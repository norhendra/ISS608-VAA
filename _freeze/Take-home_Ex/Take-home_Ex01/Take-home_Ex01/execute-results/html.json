{
  "hash": "81996f646c4e53e3126291969b42218e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Take Home Assignment 1\"\nauthor: \"Nor Hendra\"\ndate: \"30 April 2023\"\ndate-modified: \"last-modified\"\nformat: html\neditor: visual\nfreeze: true\nexecute:\n  eval: true\n  echo: true\n  warning: false\n---\n\n\n\n# Demographic structures and distribution of Singapore in 2024\n\n# 1 Importing Packages\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tidyverse, ggthemes,viridis,ggridges,ggrepel,patchwork, readr, dplyr, forcats)\n```\n:::\n\n\n\n# 2 Importing Data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 3.1 Import\nsgdemo2024 <- read_csv((\"data/respopagesex2024.csv\"), show_col_types = FALSE)\n```\n:::\n\n\n\n## 2.1 Quick check of data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(sgdemo2024)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 60,424\nColumns: 6\n$ PA   <chr> \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo K…\n$ SZ   <chr> \"Ang Mo Kio Town Centre\", \"Ang Mo Kio Town Centre\", \"Ang Mo Kio T…\n$ Age  <chr> \"0\", \"0\", \"1\", \"1\", \"2\", \"2\", \"3\", \"3\", \"4\", \"4\", \"5\", \"5\", \"6\", …\n$ Sex  <chr> \"Males\", \"Females\", \"Males\", \"Females\", \"Males\", \"Females\", \"Male…\n$ Pop  <dbl> 10, 10, 10, 10, 10, 10, 10, 10, 30, 10, 20, 10, 20, 30, 30, 10, 3…\n$ Time <dbl> 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,…\n```\n\n\n:::\n:::\n\n\n\n# 3 Data Cleaning and Quality Checks\n\n## 3.1 Converting Sex to a factor with the correct order\n\nBy coercing Sex into a factor with a known level order to give full, explicit control over how it's displayed in every plot and keeps the downstream code faster and more robust.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsgdemo2024 <- sgdemo2024 %>%\n  mutate(\n    Sex = factor(Sex, levels = c(\"Males\", \"Females\"))\n  )\n```\n:::\n\n\n\n## 3.1 Count missing values by column\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 4.1 Check for missing values and confirm none\nmissing_counts <- sgdemo2024 %>% \n  summarise_all(~ sum(is.na(.)))\n\nif (all(unlist(missing_counts) == 0)) {\n  cat(\"✅ No missing values, proceed to the next check\\n\")\n} else {\n  warning(\"⚠️ Missing values detected:\")\n  print(missing_counts)\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n✅ No missing values, proceed to the next check\n```\n\n\n:::\n:::\n\n\n\n## 3.2 Checking for any duplicates\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndup_count <- sum(duplicated(sgdemo2024))\n\nif (dup_count == 0) {\n  cat(\"✅ No duplicates, on to the next!\\n\")\n} else {\n  warning(\"⚠️ Found duplicate rows:\")\n  print(sgdemo2024[duplicated(sgdemo2024), ])\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n✅ No duplicates, on to the next!\n```\n\n\n:::\n:::\n\n\n\n## 3.3 Ensure population is strictly positive\n\n::: callout-important\n## Why we have to remove zero population rows\n\nScrolling through the data, I found zero-population rows which simply means that no one of that age and sex lives in that subzone. If we add these to the plot, it will\n\n1.  Add unnecessary clutter of showing up thousands of empty bars or tiles that distract from where people actually live. More importantly,\n\n<!-- -->\n\n2.  It obscures the story I am trying to tell - the audience cares about real population, not the zero-density grid.\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 1. Check for zero-population rows\nzero_rows <- sgdemo2024 %>% \n  filter(Pop == 0)\n\nif (nrow(zero_rows) > 0) {\n  cat(\"⚠️ Found\", nrow(zero_rows), \"rows with Pop == 0 (empty demographic cells):\\n\")\n  print(head(zero_rows))    # show a few examples\n} else {\n  cat(\"✅ No zero‐population rows found.\\n\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n⚠️ Found 23181 rows with Pop == 0 (empty demographic cells):\n# A tibble: 6 × 6\n  PA         SZ                     Age   Sex       Pop  Time\n  <chr>      <chr>                  <chr> <fct>   <dbl> <dbl>\n1 Ang Mo Kio Ang Mo Kio Town Centre 80    Males       0  2024\n2 Ang Mo Kio Ang Mo Kio Town Centre 86    Males       0  2024\n3 Ang Mo Kio Ang Mo Kio Town Centre 86    Females     0  2024\n4 Ang Mo Kio Ang Mo Kio Town Centre 88    Males       0  2024\n5 Ang Mo Kio Ang Mo Kio Town Centre 89    Males       0  2024\n6 Ang Mo Kio Ang Mo Kio Town Centre 89    Females     0  2024\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# 2. Remove all zero‐population rows\nsgdemo2024 <- sgdemo2024 %>% \n  filter(Pop > 0)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# 3. Confirm removal\nif (sum(sgdemo2024$Pop == 0) == 0) {\n  cat(\"✅ All zero‐population rows removed. Data is now focused on actual residents.\\n\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n✅ All zero‐population rows removed. Data is now focused on actual residents.\n```\n\n\n:::\n:::\n\n\n\n## 3.4 Check Age Range & Filter to Plausible Values\n\n::: callout-important\n## Converting entry \"90 & Over\" in Age Column\n\nI will be converting this to a numeric value to plot my graphs. Afterwards, I will be labeling it during the plot. This is to ensure\n\n1.  **Analytics Integrity:** Internally keeping Age=90 for all labelled \"90 & Over\" which allows me to do sums, means and such.\n2.  **Visual Clarity:** On the axis or legend, the readers we see \"90+\" so there's no confusion that the final bar or ridge covers all ages above 90.\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 1. Inspect column names to confirm they match expectations\nprint(colnames(sgdemo2024))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"PA\"   \"SZ\"   \"Age\"  \"Sex\"  \"Pop\"  \"Time\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# 2. Convert \"Age\" → numeric, mapping \"90 & Over\" → 90\nsgdemo2024 <- sgdemo2024 %>%\n  mutate(\n    Age = parse_number(as.character(Age)),  \n    Age = as.integer(Age)                   \n  )\n\n# 3. Verify the transformation\nage_stats <- sgdemo2024 %>%\n  summarise(\n    min_age = min(Age, na.rm = TRUE),\n    max_age = max(Age, na.rm = TRUE)\n  )\n\ncat(sprintf(\n  \"✅ Age conversion complete: now an integer from %d to %d.\\n\",\n  age_stats$min_age, age_stats$max_age\n))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n✅ Age conversion complete: now an integer from 0 to 90.\n```\n\n\n:::\n:::\n\n\n\nFinal confirmation there are no more \"90 & Over\" entries in my data and Age column converted into integer.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(sgdemo2024$Age == \"90 & Over\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncat(\"Age column type:\", class(sgdemo2024$Age), \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nAge column type: integer \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nna_count <- sum(is.na(sgdemo2024$Age))\ncat(\"Number of NA in Age after parsing:\", na_count, \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNumber of NA in Age after parsing: 0 \n```\n\n\n:::\n:::\n\n\n\n## 3.5 Confirm Sex Factor Levels\n\n::: callout-important\n## Inspecting Sex column in data\n\nThe below code chunk will aim to ensure that there is plot consistency and reproducibility.\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 1. Count subzone‐level totals (SZ == \"Total\")\nn_sz_total <- sum(sgdemo2024$SZ == \"Total\", na.rm = TRUE)\ncat(\"Rows with SZ == \\\"Total\\\":\", n_sz_total, \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows with SZ == \"Total\": 0 \n```\n\n\n:::\n\n```{.r .cell-code}\n# 2. Count any Age == NA (originally \"Total\")\nn_age_na <- sum(is.na(sgdemo2024$Age))\ncat(\"Rows with Age == NA (was \\\"Total\\\"):\", n_age_na, \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows with Age == NA (was \"Total\"): 0 \n```\n\n\n:::\n\n```{.r .cell-code}\n# 3. Count any Sex == \"Total\"\nn_sex_total <- sum(as.character(sgdemo2024$Sex) == \"Total\", na.rm = TRUE)\ncat(\"Rows with Sex == \\\"Total\\\":\", n_sex_total, \"\\n\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows with Sex == \"Total\": 0 \n```\n\n\n:::\n\n```{.r .cell-code}\n# 4. If any totals remain, peek at them\nif (n_sz_total + n_age_na + n_sex_total > 0) {\n  cat(\"⚠️ Example summary‐row(s):\\n\")\n  sgdemo2024 %>%\n    filter(\n      SZ == \"Total\" |\n      is.na(Age)    |\n      as.character(Sex) == \"Total\"\n    ) %>%\n    slice_head(n = 5) %>%\n    print()\n} else {\n  cat(\"✅ No summary‐row entries remain. You’re all set.\\n\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n✅ No summary‐row entries remain. You’re all set.\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define the expected order\nexpected_levels <- c(\"Males\", \"Females\")\n\n# Inspect the current factor levels\nactual_levels <- levels(sgdemo2024$Sex)\ncat(\"Current Sex levels:\", paste(actual_levels, collapse = \", \"), \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCurrent Sex levels: Males, Females \n```\n\n\n:::\n\n```{.r .cell-code}\n# Compare and act\nif (identical(actual_levels, expected_levels)) {\n  cat(\"✅ Sex factor levels are already correct (Males, Females).\\n\")\n} else {\n  warning(\"⚠️ Sex factor levels are not as expected. Resetting to Males, Females.\")\n  sgdemo2024 <- sgdemo2024 %>%\n    mutate(Sex = factor(Sex, levels = expected_levels))\n  cat(\"✅ Sex factor levels have been reset to:\", \n      paste(levels(sgdemo2024$Sex), collapse = \", \"), \"\\n\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n✅ Sex factor levels are already correct (Males, Females).\n```\n\n\n:::\n:::\n\n\n\n## 3.5 Checking for any 'Total' in Columns\n\n::: callout-important\n## Final check and summary\n\nLet's confirm that there are no values 'Total' in any of our columns so that we know our dataset is purely the granular, inhabited cells. It is not only for housekeeping, but to safeguard my visualisations and summary statistics to truly reflect Singapore's lived population in 2024.\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 1. Count subzone‐level totals (SZ == \"Total\")\nn_sz_total <- sum(sgdemo2024$SZ == \"Total\", na.rm = TRUE)\ncat(\"Rows with SZ == \\\"Total\\\":\", n_sz_total, \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows with SZ == \"Total\": 0 \n```\n\n\n:::\n\n```{.r .cell-code}\n# 2. Count any Age == NA (originally \"Total\")\nn_age_na <- sum(is.na(sgdemo2024$Age))\ncat(\"Rows with Age == NA (was \\\"Total\\\"):\", n_age_na, \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows with Age == NA (was \"Total\"): 0 \n```\n\n\n:::\n\n```{.r .cell-code}\n# 3. Count any Sex == \"Total\"\nn_sex_total <- sum(as.character(sgdemo2024$Sex) == \"Total\", na.rm = TRUE)\ncat(\"Rows with Sex == \\\"Total\\\":\", n_sex_total, \"\\n\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows with Sex == \"Total\": 0 \n```\n\n\n:::\n\n```{.r .cell-code}\n# 4. If any totals remain, peek at them\nif (n_sz_total + n_age_na + n_sex_total > 0) {\n  cat(\"⚠️ Example summary‐row(s):\\n\")\n  sgdemo2024 %>%\n    filter(\n      SZ == \"Total\" |\n      is.na(Age)    |\n      as.character(Sex) == \"Total\"\n    ) %>%\n    slice_head(n = 5) %>%\n    print()\n} else {\n  cat(\"✅ No summary‐row entries remain. You’re all set.\\n\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n✅ No summary‐row entries remain. You’re all set.\n```\n\n\n:::\n:::\n\n\n\n## 3.6 Final Summary\n\nWe are finally done with cleaning the data and converting what's needed to provide truthful and accurate data. Below is a quick summary of our freshly cleaned data!\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# High‐Level Summary of Cleaned Data\n\nsummary_tbl <- sgdemo2024 %>%\n  summarise(\n    total_records    = n(),\n    total_population = sum(Pop),\n    n_PAs            = n_distinct(PA),\n    n_SZs            = n_distinct(SZ)\n  )\n\n# Print the summary table\nprint(summary_tbl)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 4\n  total_records total_population n_PAs n_SZs\n          <int>            <dbl> <int> <int>\n1         37243          4193530    42   235\n```\n\n\n:::\n\n```{.r .cell-code}\n# Confirmation message\ncat(sprintf(\n  \"✅ Data summary complete: %d records, total population %d, across %d PAs and %d subzones.\\n\",\n  summary_tbl$total_records,\n  summary_tbl$total_population,\n  summary_tbl$n_PAs,\n  summary_tbl$n_SZs\n))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n✅ Data summary complete: 37243 records, total population 4193530, across 42 PAs and 235 subzones.\n```\n\n\n:::\n\n```{.r .cell-code}\n# Show random rows\nset.seed(2025)\nsgdemo2024 %>% \n  slice_sample(prop = 0.01)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 372 × 6\n   PA            SZ                    Age Sex       Pop  Time\n   <chr>         <chr>               <int> <fct>   <dbl> <dbl>\n 1 Tampines      Tampines North         68 Males      70  2024\n 2 Toa Payoh     Boon Teck              41 Females    80  2024\n 3 Toa Payoh     Joo Seng               50 Males      60  2024\n 4 Bukit Panjang Dairy Farm             71 Males      30  2024\n 5 Ang Mo Kio    Yio Chu Kang East      56 Males      40  2024\n 6 Queenstown    Commonwealth           73 Males      30  2024\n 7 Bukit Merah   Redhill                44 Males      80  2024\n 8 Clementi      Sunset Way             68 Females    60  2024\n 9 Jurong West   Jurong West Central    10 Females   300  2024\n10 Bukit Timah   Anak Bukit             51 Males     150  2024\n# ℹ 362 more rows\n```\n\n\n:::\n:::\n\n\n\n# 4 Population Pyramid\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nage_breaks <- c(-1, seq(4, 89, 5), Inf)\nage_labels <- c(paste0(seq(0, 85, 5), \"-\", seq(4, 89, 5)), \"90+\")\n\nbar_df <- sgdemo2024 %>%\n  mutate(\n    AgeGroup = cut(\n      Age,\n      breaks = age_breaks,\n      labels = age_labels,\n      right = TRUE\n    )\n  ) %>%\n  group_by(AgeGroup, Sex) %>%\n  summarise(Pop = sum(Pop), .groups = \"drop\") %>%\n  mutate(PopK = Pop / 1000)  # convert to '000\n\n# 2. Plot with centered title and new header\nggplot(bar_df, aes(x = AgeGroup, y = PopK, fill = Sex)) +\n  geom_col(\n    position = position_dodge2(width = 1, padding = 0),\n    width    = 0.8\n  ) +\n  scale_y_continuous(\n    name   = \"Population ('000)\",\n    limits = c(0, 180),\n    breaks = seq(0, 180, by = 10),\n    expand = c(0, 0)\n  ) +\n  scale_fill_manual(\n    values = c(\"Males\"   = \"#067FD0\",\n               \"Females\" = \"#E63B60\")\n  ) +\n  labs(\n    title = \"Age and Gender Distribution of Singapore’s Population (2024)\",\n    x     = \"Age Group\",\n    fill  = NULL\n  ) +\n  theme_minimal(base_size = 14) +\n  theme(\n    plot.title           = element_text(size = 18, face = \"bold\", hjust = 0.5),\n    axis.text.x          = element_text(angle = 45, hjust = 1),\n    panel.grid.major.x   = element_blank(),\n    panel.grid.major.y   = element_line(color = \"grey80\"),\n    legend.position      = \"bottom\"\n  )\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-18-1.png){width=1152}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# 1. Define Planning Areas by Region\ncentral      <- c(\"Bishan\",\"Bukit Merah\",\"Bukit Timah\",\"Downtown Core\",\"Geylang\",\n                  \"Kallang\",\"Marina East\",\"Marina South\",\"Marine Parade\",\"Museum\",\n                  \"Newton\",\"Novena\",\"Orchard\",\"Outram\",\"Queenstown\",\"River Valley\",\n                  \"Rochor\",\"Singapore River\",\"Southern Islands\",\"Straits View\",\n                  \"Tanglin\",\"Toa Payoh\")\neast         <- c(\"Bedok\",\"Changi\",\"Changi Bay\",\"Pasir Ris\",\"Paya Lebar\",\"Tampines\")\nnorth        <- c(\"Central Water Catchment\",\"Lim Chu Kang\",\"Mandai\",\"Sembawang\",\n                  \"Simpang\",\"Sungei Kadut\",\"Woodlands\",\"Yishun\")\nnorth_east   <- c(\"Ang Mo Kio\",\"Hougang\",\"North-Eastern Islands\",\"Punggol\",\n                  \"Seletar\",\"Sengkang\",\"Serangoon\")\nwest         <- c(\"Boon Lay\",\"Bukit Batok\",\"Bukit Panjang\",\"Choa Chu Kang\",\n                  \"Clementi\",\"Jurong East\",\"Jurong West\",\"Pioneer\",\"Tengah\",\n                  \"Tuas\",\"Western Islands\",\"Western Water Catchment\")\n\n# 2. Tag each PA with its region\nsgdemo2024 <- sgdemo2024 %>%\n  mutate(\n    Region = case_when(\n      PA %in% central    ~ \"Central\",\n      PA %in% east       ~ \"East\",\n      PA %in% north      ~ \"North\",\n      PA %in% north_east ~ \"North-East\",\n      PA %in% west       ~ \"West\",\n      TRUE               ~ NA_character_\n    )\n  )\n\n# 3. Summarise and convert to thousands\nregion_pop <- sgdemo2024 %>%\n  filter(!is.na(Region)) %>%\n  group_by(Region) %>%\n  summarise(TotalPop = sum(Pop), .groups = \"drop\") %>%\n  mutate(TotalPopK = TotalPop / 1000) %>%\n  arrange(TotalPopK)\n\n# 4. Compute max_k and breaks every 50 (’000)\nmax_k    <- ceiling(max(region_pop$TotalPopK) / 50) * 50\nbreaks_k <- seq(0, max_k, by = 50)\n\n# 5. Plot, forcing the labels to exact integers\nggplot(region_pop, aes(x = TotalPopK, y = fct_reorder(Region, TotalPopK), fill = Region)) +\n  geom_col(width = 0.7) +\n  scale_x_continuous(\n    name   = \"Population ('000)\",\n    limits = c(0, max_k),\n    breaks = breaks_k,\n    labels = as.character(breaks_k),  # exact labels: \"0\",\"50\",\"100\",...,\"1000\"\n    expand = c(0, 0)\n  ) +\n  scale_fill_manual(\n    values = c(\n      \"Central\"    = \"#1f78b4\",\n      \"East\"       = \"#33a02c\",\n      \"North\"      = \"#e31a1c\",\n      \"North-East\" = \"#ff7f00\",\n      \"West\"       = \"#6a3d9a\"\n    )\n  ) +\n  labs(\n    title = \"Population by Region, Singapore 2024\",\n    y     = NULL\n  ) +\n  theme_minimal(base_size = 14) +\n  theme(\n    plot.title         = element_text(size = 16, face = \"bold\", hjust = 0.5),\n    axis.text.y        = element_text(size = 10),\n    panel.grid.major.y = element_blank(),\n    panel.grid.minor   = element_blank(),\n    legend.position    = \"right\"\n  )\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-19-1.png){width=1152}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# 1. Define Planning Areas by Region\ncentral    <- c(\"Bishan\",\"Bukit Merah\",\"Bukit Timah\",\"Downtown Core\",\"Geylang\",\n                \"Kallang\",\"Marina East\",\"Marina South\",\"Marine Parade\",\"Museum\",\n                \"Newton\",\"Novena\",\"Orchard\",\"Outram\",\"Queenstown\",\"River Valley\",\n                \"Rochor\",\"Singapore River\",\"Southern Islands\",\"Straits View\",\n                \"Tanglin\",\"Toa Payoh\")\neast       <- c(\"Bedok\",\"Changi\",\"Changi Bay\",\"Pasir Ris\",\"Paya Lebar\",\"Tampines\")\nnorth      <- c(\"Central Water Catchment\",\"Lim Chu Kang\",\"Mandai\",\"Sembawang\",\n                \"Simpang\",\"Sungei Kadut\",\"Woodlands\",\"Yishun\")\nnorth_east <- c(\"Ang Mo Kio\",\"Hougang\",\"North-Eastern Islands\",\"Punggol\",\n                \"Seletar\",\"Sengkang\",\"Serangoon\")\nwest       <- c(\"Boon Lay\",\"Bukit Batok\",\"Bukit Panjang\",\"Choa Chu Kang\",\n                \"Clementi\",\"Jurong East\",\"Jurong West\",\"Pioneer\",\"Tengah\",\n                \"Tuas\",\"Western Islands\",\"Western Water Catchment\")\n\n# 2. Summarise total population by PA, then tag Region\npa_pop <- sgdemo2024 %>%\n  group_by(PA) %>%\n  summarise(TotalPop = sum(Pop), .groups = \"drop\") %>%\n  mutate(\n    Region = case_when(\n      PA %in% central    ~ \"Central\",\n      PA %in% east       ~ \"East\",\n      PA %in% north      ~ \"North\",\n      PA %in% north_east ~ \"North-East\",\n      PA %in% west       ~ \"West\",\n      TRUE               ~ \"Other\"\n    )\n  ) %>%\n  arrange(TotalPop)\n\n# 3. Plot horizontal bars colored by Region\nggplot(pa_pop, aes(x = TotalPop, y = fct_reorder(PA, TotalPop), fill = Region)) +\n  geom_col() +\n  scale_fill_manual(\n    values = c(\n      \"Central\"    = \"#1f78b4\",\n      \"East\"       = \"#33a02c\",\n      \"North\"      = \"#e31a1c\",\n      \"North-East\" = \"#ff7f00\",\n      \"West\"       = \"#6a3d9a\",\n      \"Other\"      = \"grey70\"\n    )\n  ) +\n  scale_x_continuous(labels = scales::comma) +\n  labs(\n    title = \"Total Population by Planning Area, Singapore 2024\",\n    subtitle = \"Bars colored by region\",\n    x     = \"Population\",\n    y     = NULL,\n    fill  = \"Region\"\n  ) +\n  theme_minimal(base_size = 12) +\n  theme(\n    plot.title         = element_text(size = 16, face = \"bold\", hjust = 0.5),\n    plot.subtitle      = element_text(size = 12, hjust = 0.5),\n    axis.text.y        = element_text(size = 8),\n    panel.grid.major.y = element_blank(),\n    panel.grid.minor   = element_blank(),\n    legend.position    = \"right\"\n  )\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-20-1.png){width=1152}\n:::\n:::\n",
    "supporting": [
      "Take-home_Ex01_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
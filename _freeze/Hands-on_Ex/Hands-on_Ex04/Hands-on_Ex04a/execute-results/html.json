{
  "hash": "e70f8b712ca8f30d08355d1773bf42f4",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Hands-on Exercise 4A\"\nauthor: \"Nor Hendra\"\ndate: \"04 May 2025\"\ndate-modified: \"last-modified\"\nformat: html\neditor: visual\nfreeze: true\nexecute:\n  eval: true\n  echo: true\n  warning: false\n---\n\n\n\n# Exercise 4A: Visualising Distribution\n\n# 1 Getting Started\n\n## 1.1 Installing and Loading Packages\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(ggdist, ggridges, ggthemes,\n               colorspace, tidyverse)\n```\n:::\n\n\n\n## 1.2 Data Import\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexam <- read_csv(\"data/Exam_data.csv\")\n```\n:::\n\n\n\n# 2 Visualising Distribution with Ridgeline Plot\n\nRidgeline plot (sometimes called Joyplot) is a data visualisation technique for revealing the distribution of a numeric value for several groups. Distribution can be represented using histograms or density plots, all aligned to the same horizontal scale and presented with a slight overlap.\n\nFigure below is a ridgelines plot showing the distribution of English score by class.\n\n::: panel-tabset\n## The plot\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex04a_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\n## The code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam,\n       aes(x = ENGLISH,\n           y = CLASS)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 2.5,\n  ) +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0,0),\n  ) +\n  scale_y_discrete(name = \"Class\", expand = expansion(add=c(0.2, 2.6))) +\n  theme_ridges()\n```\n:::\n\n\n:::\n\n::: callout-note\n## Note\n\nRidgeline plots make sense when the number of group to represent is medium to high, and thus a classic window separation would take to much space. Indeed, the fact that groups overlap each other allows to use space more efficiently. If you have less than 5 groups, dealing with other distribution plots is probably better.\n\nIt works well when there is a clear pattern in the result, like if there is an obvious ranking in groups. Otherwise group will tend to overlap each other, leading to a messy plot not providing any insight.\n:::\n\n## 2.1 Plotting ridgeline graph: ggridges method\n\nThere are several ways to plot ridgeline plot with R. In this section, you will learn how to plot ridgeline plot by using ggridges package.\n\nggridges package provides two main geom to plot gridgeline plots, they are: `geom_ridgeline()` and `geom_density_ridges()`. The former takes height values directly to draw the ridgelines, and the latter first estimates data densities and then draws those using ridgelines.\n\nThe ridgeline plot below is plotted by using `geom_density_ridges()`.\n\n::: panel-tabset\n## The plot\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex04a_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\n## The code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"#7097BB\", .3),\n    color = \"white\"\n  ) +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n    ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n```\n:::\n\n\n:::\n\n## 2.2 Varying fill colors along the x axis\n\n::: panel-tabset\n## The plot\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex04a_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n## The code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Temp. [F]\",\n                       option = \"C\") +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n```\n:::\n\n\n:::\n\n## 2.3 Mapping the probabilities directly onto colour\n\nBeside providing additional geom objects to support the need to plot ridgeline plot, ggridges package also provides a stat function called [`stat_density_ridges()`](https://wilkelab.org/ggridges/reference/stat_density_ridges.html) that replaces [`stat_density()`](https://ggplot2.tidyverse.org/reference/geom_density.html) of ggplot2.\n\nFigure below is plotted by mapping the probabilities calculated by using `stat(ecdf)` which represent the empirical cumulative density function for the distribution of English score.\n\n::: panel-tabset\n## The plot\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex04a_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\n## The code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = 0.5 - abs(0.5-stat(ecdf)))) +\n  stat_density_ridges(geom = \"density_ridges_gradient\", \n                      calc_ecdf = TRUE) +\n  scale_fill_viridis_c(name = \"Tail probability\",\n                       direction = -1) +\n  theme_ridges()\n```\n:::\n\n\n:::\n\n::: callout-important\n## Important\n\nIt is important include the argument calc_ecdf = TRUE in `stat_density_ridges()`.\n:::\n\n## 2.4 Ridgeline plots with quantile lines\n\nBy using [`geom_density_ridges_gradient()`](https://wilkelab.org/ggridges/reference/geom_ridgeline_gradient.html), we can colour the ridgeline plot by quantile, via the calculated `stat(quantile)` aesthetic as shown in the figure below.\n\n::: panel-tabset\n## The plot\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex04a_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\n## The code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = 4,\n    quantile_lines = TRUE) +\n  scale_fill_viridis_d(name = \"Quartiles\") +\n  theme_ridges()\n```\n:::\n\n\n:::\n\nInstead of using number to define the quantiles, we can also specify quantiles by cut points such as 2.5% and 97.5% tails to colour the ridgeline plot as shown in the figure below.\n\n::: panel-tabset\n## The plot\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex04a_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n\n## The code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = c(0.025, 0.975)\n    ) +\n  scale_fill_manual(\n    name = \"Probability\",\n    values = c(\"#FF0000A0\", \"#A0A0A0A0\", \"#0000FFA0\"),\n    labels = c(\"(0, 0.025]\", \"(0.025, 0.975]\", \"(0.975, 1]\")\n  ) +\n  theme_ridges()\n```\n:::\n\n\n:::\n\n# 3 Visualising Distribution with Raincloud Plot\n\nRaincloud Plot is a data visualisation techniques that produces a half-density to a distribution plot. It gets the name because the density plot is in the shape of a “raincloud”. The raincloud (half-density) plot enhances the traditional box-plot by highlighting multiple modalities (an indicator that groups may exist). The boxplot does not show where densities are clustered, but the raincloud plot does!\n\nIn this section, I will create a raincloud plot to visualise the distribution of English score by race. It will be created by using functions provided by ggdist and ggplot2 packages.\n\n## 3.1 Plotting a Half Eye Graph\n\nFirst, I will plot a Half-Eye graph by using [`stat_halfeye()`](https://mjskay.github.io/ggdist/reference/stat_halfeye.html) of **ggdist** package.\n\nThis produces a Half Eye visualization, which is contains a half-density and a slab-interval.\n\n:::: panel-tabset\n## The plot\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex04a_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\n## The code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA)\n```\n:::\n\n\n\n::: callout-tip\n## Things to learn from the code chunk above\n\nWe remove the slab interval by setting .width = 0 and point_colour=NA\n:::\n::::\n\n# 3.2 Adding the Dot Plots with `stats_dots()`\n\nNext, I will add the third geometry layer using [`stat_dots()`](https://mjskay.github.io/ggdist/reference/stat_dots.html) of ggdist package. This produces a half-dotplot, which is similar to a histogram that indicates the number of samples (number of dots) in each bin. I will select side = “left” to indicate we want it on the left-hand side.\n\n::: panel-tabset\n## The plot\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex04a_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n\n## The code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 2)\n```\n:::\n\n\n:::\n\n## 3.3 Finishing touch\n\nLastly, [`coord_flip()`](https://ggplot2.tidyverse.org/reference/coord_flip.html) of ggplot2 package will be used to flip the raincloud chart horizontally to give it the raincloud appearance. At the same time, `theme_economist()` of ggthemes package is used to give the raincloud chart a professional publishing standard look.\n\n::: panel-tabset\n## The plot\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex04a_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n\n## The code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 1.5) +\n  coord_flip() +\n  theme_economist()\n```\n:::\n\n\n:::\n\n# 4 Extras : \n\n## 4.1 Animating the Plot\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show code\"}\nlibrary(readr)\nlibrary(dplyr)\nlibrary(gganimate)\n\n# Import your data\nexam <- read_csv(\"data/Exam_data.csv\")\n\n# Make sure CLASS is a factor (so gganimate can treat each level as a state)\nexam <- exam %>%\n  mutate(CLASS = factor(CLASS))\n\n# Build the animated ridgeline plot\np <- ggplot(exam, \n            aes(x = ENGLISH, \n                y = CLASS, \n                fill = CLASS, \n                group = CLASS)) +\n  geom_density_ridges(\n    scale = 3, \n    alpha = 0.6\n  ) +\n  transition_states(\n    CLASS, \n    transition_length = 2, \n    state_length = 1\n  ) +\n  labs(\n    title = \"Class: {closest_state}\",\n    x = \"English Score\", \n    y = NULL\n  ) +\n  theme_ridges() +\n  enter_fade() + \n  exit_fade()\n\n# Render the animation (adjust nframes and fps as desired)\nanimate(p, nframes = 80, fps = 10)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04a_files/figure-html/unnamed-chunk-21-1.gif)\n:::\n:::\n\n\n## 4.2 Stacking ridges\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show code\"}\nexam_long <- exam %>%\n  pivot_longer(c(ENGLISH, MATHS), names_to = \"Subject\", values_to = \"Score\")\n\nggplot(exam_long, aes(x = Score, y = Subject, fill = Subject)) +\n  geom_density_ridges(alpha = 0.7, scale = 2) +\n  theme_ridges() +\n  facet_wrap(~CLASS, ncol = 1, scales = \"free_y\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04a_files/figure-html/unnamed-chunk-22-1.png){width=1152}\n:::\n:::\n\n\n## 4.3 Half-Violin, Boxplot + Dotplot?\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show code\"}\nggplot(exam, aes(x = CLASS, y = ENGLISH)) +\n  stat_halfeye(\n    aes(fill = CLASS),\n    side         = \"right\",     # use full \"right\"\n    .width       = c(.5, .8),   # 50% & 80% intervals\n    justification = 0.3\n  ) +\n  geom_boxplot(width = 0.15, outlier.shape = NA) +\n  geom_jitter(width = 0.1, size = 1, alpha = 0.6) +\n  coord_flip() +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04a_files/figure-html/unnamed-chunk-23-1.png){width=1152}\n:::\n:::\n",
    "supporting": [
      "Hands-on_Ex04a_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
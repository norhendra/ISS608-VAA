---
title: "In-class Exercise 5"
author: "Nor Hendra"
date: "17 May 2025"
date-modified: "last-modified"
format: html
editor: visual
freeze: true
execute:
  eval: true
  echo: true
  warning: false
code-fold: true
---

# *Mini-Challenge 1*
# 1. Getting Started
## 1.1 Installing Packages

In the code chunk below, p_load() of pacman package is used to load the R packages into R environment
```{r}
pacman::p_load(tidyverse,jsonlite,SmartEDA,tidygraph,ggraph)
```

## 1.2 Importing Knowledge Graph Data

In the code chunk below, `fromJSON()` of **jsonlite** package is used to import *MC1_graph.json* file into R and save the output object.

```{r}
kg <- fromJSON("data/MC1_graph.json")
```

### Inspect structure
```{r}
str(kg, max.level =1)
```
### Extract and inspect
```{r}
nodes_tbl <- as_tibble(kg$nodes)
edges_tbl <- as_tibble(kg$links)
```

## Initial EDA
```{r}
ggplot(data = edges_tbl,
       aes(y = `Edge Type`)) +
 geom_bar()
```
```{r}
ggplot(data = nodes_tbl,
       aes(y= `Node Type`)) +
  geom_bar()
```

## Creating Knowledge Graph

### Step 1: Mapping from node id to row index

```{r}
id_map <- tibble (id = nodes_tbl$id,
                  index=seq_len(
                    nrow(nodes_tbl)))
```

This ensures each id from node list is mapped to the correct row number

### Step 2: Map source and target IDs to row indices

```{r}
edges_tbl <- edges_tbl %>%
  left_join(id_map, by = c("source" = "id")) %>%
  rename(from = index) %>%
  left_join(id_map, by = c("target" = "id")) %>%
  rename(to = index)
```

### Step 3: Filter out any unmatched (invalid) edges

```{r}
edges_tbl <- edges_tbl %>%
  filter(!is.na(from), !is.na(to))
```

### Step 4: Creating the graph

Lastly, `tbl_graph()` is used to create tidygraph's graph object by using the code chunk below.
```{r}
graph <- tbl_graph(nodes = nodes_tbl,
                   edges = edges_tbl,
                   directed =kg$directed)
```
## Visualising the knowledge graph
```{r}
set.seed(1234)
```

### Visualising the whole graph
```{r}
#| eval: false
#| code-fold: false
#| fig-height: 8
#| fig-width: 10
ggraph(graph, layout = "fr") +
  geom_edge_link(alpha=0.3,
                 colour = "gray") +
  geom_node_point(aes(color = `Node Type`),
                  size = 4) +
  geom_node_text(aes(label=name),
                 repel = TRUE,
                 size = 2.5) +
  theme_void()
```

### Visualising the sub-graph
In this section, we are interested to create a sub-graph base on *MemberOf* value in *Edge Type*  column of the *edges* data frame. 

#### Step 1: Filter edges to only "MemberOf"
```{r}
graph_memberof <- graph %>%
  activate(edges) %>%
  filter(`Edge Type` == "MemberOf")
```

#### Step 2: Extract only connected nodes (i.e., used in these edges)
```{r}
used_node_indices <- graph_memberof %>%
  activate(edges) %>%
  as_tibble() %>%
  select(from, to) %>%
  unlist() %>%
  unique()
```

#### Step 3: Keep only those nodes
```{r}
graph_memberof <- graph_memberof %>%
  activate(nodes) %>%
  mutate(row_id = row_number()) %>%
  filter(row_id %in% used_node_indices) %>%
  select(-row_id)
```

#### Plot the sub-graph
```{r}
ggraph(graph_memberof, layout = "fr") +
  geom_edge_link(alpha=0.3,
                 colour = "gray") +
  geom_node_point(aes(color = `Node Type`),
                  size = 1) +
  geom_node_text(aes(label=name),
                 repel = TRUE,
                 size = 2.5) +
  theme_void()





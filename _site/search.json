[
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#importing-packages",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#importing-packages",
    "title": "Hands-on Exercise 6",
    "section": "2.1 Importing Packages",
    "text": "2.1 Importing Packages\n\npacman::p_load(scales, viridis, lubridate, ggthemes,\n               gridExtra, readxl, knitr, data.table,\n               CGPfunctions, ggHoriPlot, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-calendar-heatmap",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-calendar-heatmap",
    "title": "Hands-on Exercise 6",
    "section": "2.2 Plotting Calendar Heatmap",
    "text": "2.2 Plotting Calendar Heatmap\nIn this section, I will learn how to plot a calender heatmap programmatically by using ggplot2 package.\n\nBy the end of this section, you will be able to:\n\nplot a calender heatmap by using ggplot2 functions and extension,\nto write function using R programming,\nto derive specific date and time related field by using base R and lubridate packages\nto perform data preparation task by using tidyr and dplyr packages."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#the-data",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#the-data",
    "title": "Hands-on Exercise 6",
    "section": "2.3 The Data",
    "text": "2.3 The Data\nFor the purpose of this hands-on exercise, eventlog.csv file will be used. This data file consists of 199,999 rows of time-series cyber attack records by country.\n\n2.3.1 Importing the data\n\nattacks &lt;- read_csv(\"data/eventlog.csv\")\n\n\n\n2.3.2 Examining the data structure\nIt is always a good practice to examine the imported data frame before further analysis is performed.\nFor example, kable() can be used to review the structure of the imported data frame.\n\nkable(head(attacks))\n\n\n\n\ntimestamp\nsource_country\ntz\n\n\n\n\n2015-03-12 15:59:16\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:00:48\nFR\nEurope/Paris\n\n\n2015-03-12 16:02:26\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:02:38\nUS\nAmerica/Chicago\n\n\n2015-03-12 16:03:22\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:03:45\nCN\nAsia/Shanghai\n\n\n\n\n\nThere are three columns, namely timestamp, source_country and tz.\n\ntimestamp field stores date-time values in POSIXct format.\nsource_country field stores the source of the attack. It is in ISO 3166-1 alpha-2 country code.\ntz field stores time zone of the source IP address.\n\n\n\n2.3.3 Data Preparation\nStep 1: Deriving weekday and hour of day fields\nBefore we can plot the calender heatmap, two new fields namely wkday and hour need to be derived. In this step, we will write a function to perform the task.\n\nmake_hr_wkday &lt;- function(ts, sc, tz) {\n  real_times &lt;- ymd_hms(ts, \n                        tz = tz[1], \n                        quiet = TRUE)\n  dt &lt;- data.table(source_country = sc,\n                   wkday = weekdays(real_times),\n                   hour = hour(real_times))\n  return(dt)\n  }\n\n\n\n\n\n\n\nNote\n\n\n\n\nymd_hms() and hour() are from lubridate package, and\nweekdays() is a base R function.\n\n\n\nStep 2: Deriving the attacks tibble data frame\n\nwkday_levels &lt;- c('Saturday', 'Friday', \n                  'Thursday', 'Wednesday', \n                  'Tuesday', 'Monday', \n                  'Sunday')\n\nattacks &lt;- attacks %&gt;%\n  group_by(tz) %&gt;%\n  do(make_hr_wkday(.$timestamp, \n                   .$source_country, \n                   .$tz)) %&gt;% \n  ungroup() %&gt;% \n  mutate(wkday = factor(\n    wkday, levels = wkday_levels),\n    hour  = factor(\n      hour, levels = 0:23))\n\n\n\n\n\n\n\nNote\n\n\n\nBeside extracting the necessary data into attacks data frame, mutate() of dplyr package is used to convert wkday and hour fields into factor so they’ll be ordered when plotting\n\n\nTable below shows the tidy tibble table after processing\n\nkable(head(attacks))\n\n\n\n\ntz\nsource_country\nwkday\nhour\n\n\n\n\nAfrica/Cairo\nBG\nSaturday\n20\n\n\nAfrica/Cairo\nTW\nSunday\n6\n\n\nAfrica/Cairo\nTW\nSunday\n8\n\n\nAfrica/Cairo\nCN\nSunday\n11\n\n\nAfrica/Cairo\nUS\nSunday\n15\n\n\nAfrica/Cairo\nCA\nMonday\n11"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-multiple-calendar-heatmaps",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-multiple-calendar-heatmaps",
    "title": "Hands-on Exercise 6",
    "section": "4.1 Plotting Multiple Calendar Heatmaps",
    "text": "4.1 Plotting Multiple Calendar Heatmaps\n\nggplot(top4_attacks, \n       aes(hour, \n           wkday, \n           fill = n)) + \n  geom_tile(color = \"white\", \n          size = 0.1) + \n  theme_tufte(base_family = \"Helvetica\") + \n  coord_equal() +\n  scale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\n  facet_wrap(~source_country, ncol = 2) +\n  labs(x = NULL, y = NULL, \n     title = \"Attacks on top 4 countries by weekday and time of day\") +\n  theme(axis.ticks = element_blank(),\n        axis.text.x = element_text(size = 7),\n        plot.title = element_text(hjust = 0.5),\n        legend.title = element_text(size = 8),\n        legend.text = element_text(size = 6) )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-1-data-import",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-1-data-import",
    "title": "Hands-on Exercise 6",
    "section": "5.1 Step 1: Data Import",
    "text": "5.1 Step 1: Data Import\nFor the purpose of this hands-on exercise, arrivals_by_air.xlsx will be used.\nThe code chunk below imports arrivals_by_air.xlsx by using read_excel() of readxl package and save it as a tibble data frame called air.\n\nair &lt;- read_excel(\"data/arrivals_by_air.xlsx\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-2-deriving-month-and-year-fields",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-2-deriving-month-and-year-fields",
    "title": "Hands-on Exercise 6",
    "section": "5.2 Step 2: Deriving month and year fields",
    "text": "5.2 Step 2: Deriving month and year fields\nNext, two new fields called month and year are derived from Month-Year field.\n\nair$month &lt;- factor(month(air$`Month-Year`), \n                    levels=1:12, \n                    labels=month.abb, \n                    ordered=TRUE) \nair$year &lt;- year(ymd(air$`Month-Year`))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-3-extracting-the-target-country",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-3-extracting-the-target-country",
    "title": "Hands-on Exercise 6",
    "section": "5.3 Step 3: Extracting the target country",
    "text": "5.3 Step 3: Extracting the target country\nNext, the code chunk below is use to extract data for the target country (i.e. Vietnam)\n\nVietnam &lt;- air %&gt;% \n  select(`Vietnam`, \n         month, \n         year) %&gt;%\n  filter(year &gt;= 2010)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-4-computing-year-average-arrivals-by-month",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-4-computing-year-average-arrivals-by-month",
    "title": "Hands-on Exercise 6",
    "section": "5.4 Step 4: Computing year average arrivals by month",
    "text": "5.4 Step 4: Computing year average arrivals by month\nThe code chunk below uses group_by() and summarise() of dplyr to compute year average arrivals by month.\n\nhline.data &lt;- Vietnam %&gt;% \n  group_by(month) %&gt;%\n  summarise(avgvalue = mean(`Vietnam`))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-5-plotting-the-cycle-plot",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-5-plotting-the-cycle-plot",
    "title": "Hands-on Exercise 6",
    "section": "5.5 Step 5: Plotting the cycle plot",
    "text": "5.5 Step 5: Plotting the cycle plot\n\nggplot() + \n  geom_line(data=Vietnam,\n            aes(x=year, \n                y=`Vietnam`, \n                group=month), \n            colour=\"black\") +\n  geom_hline(aes(yintercept=avgvalue), \n             data=hline.data, \n             linetype=6, \n             colour=\"red\", \n             size=0.5) + \n  facet_grid(~month) +\n  labs(axis.text.x = element_blank(),\n       title = \"Visitor arrivals from Vietnam by air, Jan 2010-Dec 2019\") +\n  xlab(\"\") +\n  ylab(\"No. of Visitors\") +\n  theme_tufte(base_family = \"Helvetica\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-1-data-import-1",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-1-data-import-1",
    "title": "Hands-on Exercise 6",
    "section": "6.1 Step 1: Data Import",
    "text": "6.1 Step 1: Data Import\nImport the rice data set into R environment by using the code chunk below:\n\nrice &lt;- read_csv(\"data/rice.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-2-plotting-the-slopegraph",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-2-plotting-the-slopegraph",
    "title": "Hands-on Exercise 6",
    "section": "6.2 Step 2: Plotting the slopegraph",
    "text": "6.2 Step 2: Plotting the slopegraph\n\n\nCode\nrice %&gt;% \n  mutate(Year = factor(Year)) %&gt;%\n  filter(Year %in% c(1961, 1980)) %&gt;%\n  newggslopegraph(Year, Yield, Country,\n                Title = \"Rice Yield of Top 11 Asian Counties\",\n                SubTitle = \"1961-1980\",\n                Caption = \"Prepared by: Nor Hendra\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThing to learn from the code chunk above\n\n\n\nFor effective data visualisation design, factor() is used convert the value type of Year field from numeric to factor."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#bumpcharts-in-r",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#bumpcharts-in-r",
    "title": "Hands-on Exercise 6",
    "section": "6.3.5 BumpCharts in R",
    "text": "6.3.5 BumpCharts in R\n\n\nCode\nrice %&gt;% \n  mutate(Year = factor(Year)) %&gt;%\n  filter(Year %in% c(2005, 2006, 2007, 2008, 2009, 2010)) %&gt;%\n  ggplot(aes(x = Year,\n         y = Yield,\n         color = Country))+\n  geom_point(color = \"#FFFFFF\", size = 1) +\n  ggbump::geom_bump(mapping=aes(x = Year,\n                                y = Yield, \n                                group = Country\n                                ))+\n  labs(title = \"Rice Yield of Top 11 Asian Countries\") +  \n  theme_minimal()+\n  theme(\n        plot.background = element_rect(fill = \"#f5f5f5\", color = \"#f5f2f5\"),\n        panel.background = element_rect(fill=\"#f5f5f5\"))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#linecolour",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#linecolour",
    "title": "Hands-on Exercise 6",
    "section": "6.3.6 LineColour",
    "text": "6.3.6 LineColour\n\n\nCode\nrice %&gt;% \n  mutate(Year = factor(Year)) %&gt;%\n  filter(Year %in% c(2005, 2006, 2007, 2008, 2009, 2010)) %&gt;%\n  newggslopegraph(Year, Yield, Country,\n                Title = \"Rice Yield of Top 11 Asian Countries\",\n                SubTitle = \"2005 to 2010\",\n                Caption = NULL,\n                LineColor = c(\"Korea\" = \"#e0218a\", \"Thailand\" = \"#FFBC2F\"),\n                DataLabelFillColor = \"#f5f5f5\",) +\n    theme(\n        plot.background = element_rect(fill = \"#f5f5f5\", color = \"#f5f2f5\"),\n        panel.background = element_rect(fill=\"#f5f5f5\")\n      )"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#installing-packages",
    "href": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#installing-packages",
    "title": "In-class Exercise 5",
    "section": "1.1 Installing Packages",
    "text": "1.1 Installing Packages\nIn the code chunk below, p_load() of pacman package is used to load the R packages into R environment\n\n\nCode\npacman::p_load(tidyverse,jsonlite,SmartEDA,tidygraph,ggraph)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#importing-knowledge-graph-data",
    "href": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#importing-knowledge-graph-data",
    "title": "In-class Exercise 5",
    "section": "1.2 Importing Knowledge Graph Data",
    "text": "1.2 Importing Knowledge Graph Data\nIn the code chunk below, fromJSON() of jsonlite package is used to import MC1_graph.json file into R and save the output object.\n\n\nCode\nkg &lt;- fromJSON(\"data/MC1_graph.json\")\n\n\n\nInspect structure\n\n\nCode\nstr(kg, max.level =1)\n\n\nList of 5\n $ directed  : logi TRUE\n $ multigraph: logi TRUE\n $ graph     :List of 2\n $ nodes     :'data.frame': 17412 obs. of  10 variables:\n $ links     :'data.frame': 37857 obs. of  4 variables:\n\n\n\n\nExtract and inspect\n\n\nCode\nnodes_tbl &lt;- as_tibble(kg$nodes)\nedges_tbl &lt;- as_tibble(kg$links)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#initial-eda",
    "href": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#initial-eda",
    "title": "In-class Exercise 5",
    "section": "Initial EDA",
    "text": "Initial EDA\n\n\nCode\nggplot(data = edges_tbl,\n       aes(y = `Edge Type`)) +\n geom_bar()\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(data = nodes_tbl,\n       aes(y= `Node Type`)) +\n  geom_bar()"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#creating-knowledge-graph",
    "href": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#creating-knowledge-graph",
    "title": "In-class Exercise 5",
    "section": "Creating Knowledge Graph",
    "text": "Creating Knowledge Graph\n\nStep 1: Mapping from node id to row index\n\n\nCode\nid_map &lt;- tibble (id = nodes_tbl$id,\n                  index=seq_len(\n                    nrow(nodes_tbl)))\n\n\nThis ensures each id from node list is mapped to the correct row number\n\n\nStep 2: Map source and target IDs to row indices\n\n\nCode\nedges_tbl &lt;- edges_tbl %&gt;%\n  left_join(id_map, by = c(\"source\" = \"id\")) %&gt;%\n  rename(from = index) %&gt;%\n  left_join(id_map, by = c(\"target\" = \"id\")) %&gt;%\n  rename(to = index)\n\n\n\n\nStep 3: Filter out any unmatched (invalid) edges\n\n\nCode\nedges_tbl &lt;- edges_tbl %&gt;%\n  filter(!is.na(from), !is.na(to))\n\n\n\n\nStep 4: Creating the graph\nLastly, tbl_graph() is used to create tidygraph’s graph object by using the code chunk below.\n\n\nCode\ngraph &lt;- tbl_graph(nodes = nodes_tbl,\n                   edges = edges_tbl,\n                   directed =kg$directed)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#visualising-the-knowledge-graph",
    "href": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#visualising-the-knowledge-graph",
    "title": "In-class Exercise 5",
    "section": "Visualising the knowledge graph",
    "text": "Visualising the knowledge graph\n\n\nCode\nset.seed(1234)\n\n\n\nVisualising the whole graph\n\nggraph(graph, layout = \"fr\") +\n  geom_edge_link(alpha=0.3,\n                 colour = \"gray\") +\n  geom_node_point(aes(color = `Node Type`),\n                  size = 4) +\n  geom_node_text(aes(label=name),\n                 repel = TRUE,\n                 size = 2.5) +\n  theme_void()\n\n\n\nVisualising the sub-graph\nIn this section, we are interested to create a sub-graph base on MemberOf value in Edge Type column of the edges data frame.\n\nStep 1: Filter edges to only “MemberOf”\n\n\nCode\ngraph_memberof &lt;- graph %&gt;%\n  activate(edges) %&gt;%\n  filter(`Edge Type` == \"MemberOf\")\n\n\n\n\nStep 2: Extract only connected nodes (i.e., used in these edges)\n\n\nCode\nused_node_indices &lt;- graph_memberof %&gt;%\n  activate(edges) %&gt;%\n  as_tibble() %&gt;%\n  select(from, to) %&gt;%\n  unlist() %&gt;%\n  unique()\n\n\n\n\nStep 3: Keep only those nodes\n\n\nCode\ngraph_memberof &lt;- graph_memberof %&gt;%\n  activate(nodes) %&gt;%\n  mutate(row_id = row_number()) %&gt;%\n  filter(row_id %in% used_node_indices) %&gt;%\n  select(-row_id)\n\n\n\n\nPlot the sub-graph\n\n\nCode\nggraph(graph_memberof, \n       layout = \"fr\") +\n  geom_edge_link(alpha=0.5,\n                 colour = \"gray\") +\n  geom_node_point(aes(color = `Node Type`),\n                  size = 1) +\n  geom_node_text(aes(label = name),\n                 repel = TRUE,\n                 size = 2.5) +\n  theme_void()"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01p2.html",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01p2.html",
    "title": "Take-home Exercise 1: Phase 2",
    "section": "",
    "text": "In Phase 1 of Take-home Exercise 1, we were tasked to prepare and design data visualisation for the article. The data we used was the Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex, June 2024 available on Singstat. In this phase 2, I will be selecting a fellow classmate to critic three good design principles and three areas for further improvement.\n\n\n\n\n\n\nPURPOSE\n\n\n\nI hope the audience is able to appreciate how I have provided the step by step code to see how the plot evolves and why I made each change. My goal is to take you through my thought process for every improvement and show how each tweak builds towards the polished final visualization without changing too much of the main skeleton of the original author’s code."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01p2.html#importing-packages",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01p2.html#importing-packages",
    "title": "Take-home Exercise 1: Phase 2",
    "section": "2.1 Importing Packages",
    "text": "2.1 Importing Packages\n\n\nShow code\npacman::p_load(tidyverse, readxl, ggplot2, ggthemes, dplyr, scales,forcats, ggplot)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01p2.html#data-loading-and-cleaning-for-plotting",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01p2.html#data-loading-and-cleaning-for-plotting",
    "title": "Take-home Exercise 1: Phase 2",
    "section": "2.2 Data Loading and Cleaning for Plotting",
    "text": "2.2 Data Loading and Cleaning for Plotting\nI will be doing the same steps I did in phase 1 to clean the data before proceeding. Skip ahead to get to the main task.\n\n\nShow code\nsgdemo2024 &lt;- read_csv((\"data/respopagesex2024.csv\"), show_col_types = FALSE)\n\n\n\n2.2.1 Converting Sex to a factor with the correct order\n\n\nShow code\nsgdemo2024 &lt;- sgdemo2024 %&gt;%\n  mutate(\n    Sex = factor(Sex, levels = c(\"Males\", \"Females\"))\n  )\n\n\n\n\n2.2.2 Count missing values by column\n\n\nShow code\n#Check for missing values and confirm none\nmissing_counts &lt;- sgdemo2024 %&gt;% \n  summarise_all(~ sum(is.na(.)))\n\nif (all(unlist(missing_counts) == 0)) {\n  cat(\"✅ No missing values, proceed to the next check\\n\")\n} else {\n  warning(\"⚠️ Missing values detected:\")\n  print(missing_counts)\n}\n\n\n✅ No missing values, proceed to the next check\n\n\n\n\n2.2.3 Checking for any duplicates\n\n\nShow code\ndup_count &lt;- sum(duplicated(sgdemo2024))\n\nif (dup_count == 0) {\n  cat(\"✅ No duplicates, on to the next!\\n\")\n} else {\n  warning(\"⚠️ Found duplicate rows:\")\n  print(sgdemo2024[duplicated(sgdemo2024), ])\n}\n\n\n✅ No duplicates, on to the next!\n\n\n\n\n2.2.4 Ensure population is strictly positive\nStep 1: Checking for zero-population rows.\n\n\nShow code\n# 1. Check for zero-population rows\nzero_rows &lt;- sgdemo2024 %&gt;% \n  filter(Pop == 0)\n\nif (nrow(zero_rows) &gt; 0) {\n  cat(\"⚠️ Found\", nrow(zero_rows), \"rows with Pop == 0 (empty demographic cells):\\n\")\n  print(head(zero_rows))    # show a few examples\n} else {\n  cat(\"✅ No zero‐population rows found.\\n\")\n}\n\n\n⚠️ Found 23181 rows with Pop == 0 (empty demographic cells):\n# A tibble: 6 × 6\n  PA         SZ                     Age   Sex       Pop  Time\n  &lt;chr&gt;      &lt;chr&gt;                  &lt;chr&gt; &lt;fct&gt;   &lt;dbl&gt; &lt;dbl&gt;\n1 Ang Mo Kio Ang Mo Kio Town Centre 80    Males       0  2024\n2 Ang Mo Kio Ang Mo Kio Town Centre 86    Males       0  2024\n3 Ang Mo Kio Ang Mo Kio Town Centre 86    Females     0  2024\n4 Ang Mo Kio Ang Mo Kio Town Centre 88    Males       0  2024\n5 Ang Mo Kio Ang Mo Kio Town Centre 89    Males       0  2024\n6 Ang Mo Kio Ang Mo Kio Town Centre 89    Females     0  2024\n\n\nStep 2: Removing those zero-population rows.\n\n\nShow code\n# 2. Remove all zero‐population rows\nsgdemo2024 &lt;- sgdemo2024 %&gt;% \n  filter(Pop &gt; 0)\n\n\nStep 3: Confirm that all rows with zero-population has been removed.\n\n\nShow code\n#Confirm removal\nif (sum(sgdemo2024$Pop == 0) == 0) {\n  cat(\"✅ All zero‐population rows removed. Data is now focused on actual residents.\\n\")\n}\n\n\n✅ All zero‐population rows removed. Data is now focused on actual residents.\n\n\n\n\n2.2.5 Check Age Range & Filter to Plausible Values\nStep 1: Convert the ‘90 & Over’ to integers.\n\n\nShow code\n# 1. Inspect column names to confirm they match expectations\nprint(colnames(sgdemo2024))\n\n\n[1] \"PA\"   \"SZ\"   \"Age\"  \"Sex\"  \"Pop\"  \"Time\"\n\n\nShow code\n# 2. Convert \"Age\" → numeric, mapping \"90 & Over\" → 90\nsgdemo2024 &lt;- sgdemo2024 %&gt;%\n  mutate(\n    Age = parse_number(as.character(Age)),  \n    Age = as.integer(Age)                   \n  )\n\n# 3. Verify the transformation\nage_stats &lt;- sgdemo2024 %&gt;%\n  summarise(\n    min_age = min(Age, na.rm = TRUE),\n    max_age = max(Age, na.rm = TRUE)\n  )\n\ncat(sprintf(\n  \"✅ Age conversion complete: now an integer from %d to %d.\\n\",\n  age_stats$min_age, age_stats$max_age\n))\n\n\n✅ Age conversion complete: now an integer from 0 to 90.\n\n\nStep 2: Confirm that there are no more “90 & Over” entries in my data.\n\n\nShow code\nsum(sgdemo2024$Age == \"90 & Over\")\n\n\n[1] 0\n\n\nStep 3: Confirm the column type for Age is integer.\n\n\nShow code\ncat(\"Age column type:\", class(sgdemo2024$Age), \"\\n\")\n\n\nAge column type: integer \n\n\nStep 4: Ensure no NA in the column for Age.\n\n\nShow code\nna_count &lt;- sum(is.na(sgdemo2024$Age))\ncat(\"Number of NA in Age after parsing:\", na_count, \"\\n\")\n\n\nNumber of NA in Age after parsing: 0 \n\n\n\n\n2.2.6 Confirm Sex Factor Levels\n\n\nShow code\n# 1. Count subzone‐level totals (SZ == \"Total\")\nn_sz_total &lt;- sum(sgdemo2024$SZ == \"Total\", na.rm = TRUE)\ncat(\"Rows with SZ == \\\"Total\\\":\", n_sz_total, \"\\n\")\n\n\nRows with SZ == \"Total\": 0 \n\n\nShow code\n# 2. Count any Age == NA (originally \"Total\")\nn_age_na &lt;- sum(is.na(sgdemo2024$Age))\ncat(\"Rows with Age == NA (was \\\"Total\\\"):\", n_age_na, \"\\n\")\n\n\nRows with Age == NA (was \"Total\"): 0 \n\n\nShow code\n# 3. Count any Sex == \"Total\"\nn_sex_total &lt;- sum(as.character(sgdemo2024$Sex) == \"Total\", na.rm = TRUE)\ncat(\"Rows with Sex == \\\"Total\\\":\", n_sex_total, \"\\n\\n\")\n\n\nRows with Sex == \"Total\": 0 \n\n\nShow code\n# 4. If any totals remain, peek at them\nif (n_sz_total + n_age_na + n_sex_total &gt; 0) {\n  cat(\"⚠️ Example summary‐row(s):\\n\")\n  sgdemo2024 %&gt;%\n    filter(\n      SZ == \"Total\" |\n      is.na(Age)    |\n      as.character(Sex) == \"Total\"\n    ) %&gt;%\n    slice_head(n = 5) %&gt;%\n    print()\n} else {\n  cat(\"✅ No summary‐row entries remain. You’re all set.\\n\")\n}\n\n\n✅ No summary‐row entries remain. You’re all set.\n\n\n\n\nShow code\n# Define the expected order\nexpected_levels &lt;- c(\"Males\", \"Females\")\n\n# Inspect the current factor levels\nactual_levels &lt;- levels(sgdemo2024$Sex)\ncat(\"Current Sex levels:\", paste(actual_levels, collapse = \", \"), \"\\n\")\n\n\nCurrent Sex levels: Males, Females \n\n\nShow code\n# Compare and act\nif (identical(actual_levels, expected_levels)) {\n  cat(\"✅ Sex factor levels are already correct (Males, Females).\\n\")\n} else {\n  warning(\"⚠️ Sex factor levels are not as expected. Resetting to Males, Females.\")\n  sgdemo2024 &lt;- sgdemo2024 %&gt;%\n    mutate(Sex = factor(Sex, levels = expected_levels))\n  cat(\"✅ Sex factor levels have been reset to:\", \n      paste(levels(sgdemo2024$Sex), collapse = \", \"), \"\\n\")\n}\n\n\n✅ Sex factor levels are already correct (Males, Females).\n\n\n\n\n2.2.7 Checking for any ‘Total’ in Columns and Final Checks\n\n\nShow code\n# 1. Count subzone‐level totals (SZ == \"Total\")\nn_sz_total &lt;- sum(sgdemo2024$SZ == \"Total\", na.rm = TRUE)\ncat(\"Rows with SZ == \\\"Total\\\":\", n_sz_total, \"\\n\")\n\n\nRows with SZ == \"Total\": 0 \n\n\nShow code\n# 2. Count any Age == NA (originally \"Total\")\nn_age_na &lt;- sum(is.na(sgdemo2024$Age))\ncat(\"Rows with Age == NA (was \\\"Total\\\"):\", n_age_na, \"\\n\")\n\n\nRows with Age == NA (was \"Total\"): 0 \n\n\nShow code\n# 3. Count any Sex == \"Total\"\nn_sex_total &lt;- sum(as.character(sgdemo2024$Sex) == \"Total\", na.rm = TRUE)\ncat(\"Rows with Sex == \\\"Total\\\":\", n_sex_total, \"\\n\\n\")\n\n\nRows with Sex == \"Total\": 0 \n\n\nShow code\n# 4. If any totals remain, peek at them\nif (n_sz_total + n_age_na + n_sex_total &gt; 0) {\n  cat(\"⚠️ Example summary‐row(s):\\n\")\n  sgdemo2024 %&gt;%\n    filter(\n      SZ == \"Total\" |\n      is.na(Age)    |\n      as.character(Sex) == \"Total\"\n    ) %&gt;%\n    slice_head(n = 5) %&gt;%\n    print()\n} else {\n  cat(\"✅ No summary‐row entries remain. You’re all set.\\n\")\n}\n\n\n✅ No summary‐row entries remain. You’re all set."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01p2.html#population-pyramid",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01p2.html#population-pyramid",
    "title": "Take-home Exercise 1: Phase 2",
    "section": "3.1 Population Pyramid",
    "text": "3.1 Population Pyramid\n\n\n\n\n\n\nRewriting code\n\n\n\nI had to rewrite the earlier stages of the code before plotting the pyramid as I have cleaned and renamed my data. Below is a comparison from a screenshot of the plot and the plot I created based off his code. Although there are slight differences in code, the overall aesthetic and function of the plot remains the same.\n\n\n\nClassmate’s PlotClassmate’s CodeDuplicated PlotThe Code (Alternate Version)\n\n\n\n\n\n\npyramid_data &lt;- aggregate(Pop ~ `AG` + Sex, data = Resident_Data, sum)\n\nage_order &lt;- c(\"0_to_4\", \"5_to_9\", \"10_to_14\", \"15_to_19\", \"20_to_24\", \"25_to_29\", \n               \"30_to_34\", \"35_to_39\", \"40_to_44\", \"45_to_49\", \"50_to_54\", \"55_to_59\", \n               \"60_to_64\", \"65_to_69\", \"70_to_74\", \"75_to_79\", \"80_to_84\", \"85_to_89\", \n               \"90_and_over\")\n\npyramid_data$AG &lt;- factor(pyramid_data$AG, levels = age_order)\n\npyramid_data$Pop[pyramid_data$Sex == \"Males\"] &lt;- -pyramid_data$Pop[pyramid_data$Sex == \"Males\"]\n\nggplot(data = pyramid_data, aes(x = AG, y = Pop, fill = Sex)) +\n  geom_bar(stat = \"identity\") +\n  coord_flip() +\n  labs(title = \"Population Pyramid (2024)\", x = \"Age Group\", y = \"Population\") +\n  scale_y_continuous(labels = comma) +\n  scale_fill_manual(values = c(\"skyblue\", \"salmon\")) + \n  theme_minimal() +\n  theme(axis.text.y = element_text(size = 10))  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsgdemo2024 &lt;- sgdemo2024 %&gt;% \n  mutate(Age = as.numeric(as.character(Age)))\n\nage_order &lt;- c(\n  \"0_to_4\", \"5_to_9\",  \"10_to_14\", \"15_to_19\", \"20_to_24\", \"25_to_29\",\n  \"30_to_34\",\"35_to_39\",\"40_to_44\", \"45_to_49\", \"50_to_54\", \"55_to_59\",\n  \"60_to_64\",\"65_to_69\",\"70_to_74\", \"75_to_79\", \"80_to_84\", \"85_to_89\",\n  \"90_and_over\"\n)\n\nsgdemo2024 &lt;- sgdemo2024 %&gt;%\n  mutate(\n    AG = cut(\n      Age,\n      breaks = c(seq(0, 90, by = 5), Inf),\n      right  = FALSE,\n      labels = age_order\n    ),\n    AG = fct_explicit_na(AG, na_level = \"90_and_over\")\n  )\n\npyramid_data &lt;- sgdemo2024 %&gt;%\n  group_by(AG, Sex) %&gt;%\n  summarise(Pop = sum(Pop), .groups = \"drop\") %&gt;%\n  mutate(Pop = if_else(Sex == \"Males\", -Pop, Pop))\n\nggplot(pyramid_data, aes(x = AG, y = Pop, fill = Sex)) +\n  geom_col(width = 0.8) +\n  coord_flip() +\n  scale_y_continuous(labels = comma) +\n  scale_fill_manual(\n    values = c(\n      Males   = \"salmon\",\n      Females = \"skyblue\"\n    )\n  ) +\n  labs(\n    title = \"Population Pyramid (2024)\",\n    x     = \"Age Group\",\n    y     = \"Population\"\n  ) +\n  theme_minimal() +\n  theme(\n    axis.text.y        = element_text(size = 10)\n  )"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01p2.html#three-good-design-principles",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01p2.html#three-good-design-principles",
    "title": "Take-home Exercise 1: Phase 2",
    "section": "3.2 Three Good Design Principles",
    "text": "3.2 Three Good Design Principles\n\nSymmetric, Diverging Bars for Easy Comparison\nBy plotting males on the left and females on the right, with a shared zero-center. I am able to instantly compare cohort sizes across the aisle. The mirror layout makes it easy to see at a glance which age groups are male or female dominated and by roughly how much.\nOrdered, Evenly-Spaced Age Bands\nThe age groups run in a logical 5 year increment from bottom to top and they remain evenly spaced and sorted. This consistent ordering prevents cognitive load where viewers don’t have to hunt for a specific age group, for example the “20 to 24” in the middle of the chart. This also helps make trends (e.g. the bulge in middle ages) pop out immediately\nClean and Minimalist Theme with Gridlines\nThe light gridlines behind the bars gives you just enough reference to read values off the axis, without cluttering the visual."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01p2.html#areas-of-improvement",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01p2.html#areas-of-improvement",
    "title": "Take-home Exercise 1: Phase 2",
    "section": "3.3 Areas of Improvement",
    "text": "3.3 Areas of Improvement\n\nAbove is the four quadrants of clarity and aesthetic and based on the good design principles I found outlined previously, I would put this in Quadrant IV - beautiful but confusing.\n\nThe areas highlighted in red on the figure above are aspects I have some gripes with. The reason I said it is beautiful but confusing is because of the X-Axis and Y-Axis. The X-Axis indicating population shows value -100,000 to 100,000 - there is no such thing as a negative population (unless of course we are comparing those who aren’t alive anymore). Furthermore, the Y-Axis (age bands) has underscores in between the age. This can be indeed a little off-putting on a plot Ideally, it should just be the age bands without any underscores in between.\n\n3.3.1 Improvement 1 - Fixing the Y-Axis\nLet’s first work on renaming the age binning of the code to be without underscores. It would like something like below to replace the underscores.\n\n# Apply binning and label cleanup\nsgdemo2024 &lt;- sgdemo2024 %&gt;%\n  mutate(\n    AG = cut(Age, breaks = c(seq(0, 90, by = 5), Inf), right = FALSE, labels = age_order),\n    AG = fct_explicit_na(AG, na_level = \"90_and_over\"),\n    AG = gsub(\"_to_\", \"-\", AG),\n    AG = gsub(\"_and_over\", \"+\", AG),\n    AG = factor(AG, levels = gsub(\"_to_\", \"-\", gsub(\"_and_over\", \"+\", age_order)))\n  )\n\nPutting it Together - Plot after Improvement 1\n\n\nShow code\nage_order &lt;- c(\n  \"0 to 4\", \"5 to 9\",  \"10 to 14\", \"15 to 19\", \"20 to 24\", \"25 to 29\",\n  \"30 to 34\",\"35 to 39\",\"40 to 44\", \"45 to 49\", \"50 to 54\", \"55 to 59\",\n  \"60 to 64\",\"65 to 69\",\"70 to 74\", \"75 to 79\", \"80 to 84\", \"85 to 89\",\n  \"90+\"\n)\n\nsgdemo2024 &lt;- sgdemo2024 %&gt;%\n  mutate(\n    AG = cut(Age, breaks = c(seq(0, 90, by = 5), Inf), right = FALSE, labels = age_order),\n    AG = fct_explicit_na(AG, na_level = \"90_and_over\"),\n    AG = gsub(\"_to_\", \"-\", AG),\n    AG = gsub(\"_and_over\", \"+\", AG),\n    AG = factor(AG, levels = gsub(\"_to_\", \"-\", gsub(\"_and_over\", \"+\", age_order)))\n  )\n\npyramid_data &lt;- sgdemo2024 %&gt;%\n  group_by(AG, Sex) %&gt;%\n  summarise(Pop = sum(Pop), .groups = \"drop\") %&gt;%\n  mutate(Pop = if_else(Sex == \"Males\", -Pop, Pop))\n\nggplot(pyramid_data, aes(x = AG, y = Pop, fill = Sex)) +\n  geom_col(width = 0.8) +\n  coord_flip() +\n  scale_y_continuous(labels = comma) +\n  scale_fill_manual(\n    values = c(\n      Males   = \"salmon\",\n      Females = \"skyblue\"\n    )\n  ) +\n  labs(\n    title = \"Population Pyramid (2024)\",\n    x     = \"Age Group\",\n    y     = \"Population\"\n  ) +\n  theme_minimal() +\n  theme(\n    axis.text.y        = element_text(size = 10)\n  )\n\n\n\n\n\n\n\n\n\n\n\n3.3.2 Improvement 2 - Fixing the X-Axis\nNext, let’s fix the X-Axis by ensuring it is positive both ways and in 20,000 increments with below code. The top one would be to fix the negative population and the bottom to aggregate them to 20,000 incremental bins.\n\n# Aggregate and prepare data\npyramid_data &lt;- sgdemo2024 %&gt;%\n  group_by(AG, Sex) %&gt;%\n  summarise(Pop = sum(Pop), .groups = \"drop\") %&gt;%\n  mutate(Pop = if_else(Sex == \"Males\", -Pop, Pop))\n\n# Determine max for 20k axis break\nmax_pop &lt;- ceiling(max(abs(pyramid_data$Pop)) / 20000) * 20000\n\nI will also ensure it limits the plot to just 180000 and stop there to prevent extra grids showing up using below code chunk\n\nscale_y_continuous(\n  limits = c(-180000, 180000) / 1000,\n  breaks = seq(-180000, 180000, by = 20000) / 1000,\n  labels = function(x) abs(x),\n  expand = c(0, 0)\n)\n\nPutting it Together - Plot after Improvement 2\n\n\nShow code\nage_order &lt;- c(\n  \"0 to 4\", \"5 to 9\",  \"10 to 14\", \"15 to 19\", \"20 to 24\", \"25 to 29\",\n  \"30 to 34\",\"35 to 39\",\"40 to 44\", \"45 to 49\", \"50 to 54\", \"55 to 59\",\n  \"60 to 64\",\"65 to 69\",\"70 to 74\", \"75 to 79\", \"80 to 84\", \"85 to 89\",\n  \"90+\"\n)\n\n\nsgdemo2024 &lt;- sgdemo2024 %&gt;%\n  mutate(\n    AG = cut(Age, breaks = c(seq(0, 90, by = 5), Inf), right = FALSE, labels = age_order),\n    AG = fct_explicit_na(AG, na_level = \"90_and_over\"),\n    AG = gsub(\"_to_\", \"-\", AG),\n    AG = gsub(\"_and_over\", \"+\", AG),\n    AG = factor(AG, levels = gsub(\"_to_\", \"-\", gsub(\"_and_over\", \"+\", age_order)))\n  )\n\n\npyramid_data &lt;- sgdemo2024 %&gt;%\n  group_by(AG, Sex) %&gt;%\n  summarise(Pop = sum(Pop), .groups = \"drop\") %&gt;%\n  mutate(Pop = if_else(Sex == \"Males\", -Pop, Pop))\n\n\nmax_pop &lt;- ceiling(max(abs(pyramid_data$Pop)) / 20000) * 20000\n\n\nmax_pop &lt;- max(180000, ceiling(max(abs(pyramid_data$Pop)) / 20000) * 20000)\n\nggplot(pyramid_data, aes(x = AG, y = Pop / 1000, fill = Sex)) +  \n  geom_col(width = 0.8) +\n  coord_flip() +\nscale_y_continuous(\n  limits = c(-180000, 180000) / 1000,\n  breaks = seq(-180000, 180000, by = 20000) / 1000,\n  labels = function(x) abs(x),\n  expand = c(0, 0)\n)+\n  scale_fill_manual(values = c(Males = \"salmon\", Females = \"skyblue\")) +\n  labs(\n    title = \"Population Pyramid (2024)\",\n    x = \"Age Group\",\n    y = \"Population (in thousands)\"\n  ) +\n  theme_minimal() +\n  theme(\n    axis.text.y = element_text(size = 10),\n    panel.grid.major.y = element_line(color = \"gray90\")\n  )\n\n\n\n\n\n\n\n\n\nGreat! Now it looks much better and cleaner than what it initially was. However, there are still some improvements to be made.\n\n\n3.3.3 Improvement 3 - Colour, Labels and Gridlines\nFixing Colour: Another potential source of confusion lies in the color scheme chosen. The chart uses colors that invert the stereotypical associations—males are marked in “salmon” and females in “skyblue”. When readers see that the chart relates to gender, they may instinctively rely on color cues rather than consult the legend, especially if those colors align with common assumptions. While the intention may have been to challenge gender norms, this reversal can unintentionally mislead viewers and hinder clarity. Personally, I would prefer to adjust the color palette entirely, but in order to preserve the integrity of the original design, I will simply switch the color assignments for clarity.\n\nscale_fill_manual(values = c(Males = \"skyblue\", Females = \"salmon\"))\n\nAdding percentage-of-population: Absolute bar lengths show “how many” but not “how large a share” so I will be annotating each bar with its percentage to immediately tell the audience. This view will make both scale and structure transparent at a glance. Hence, even when 2 bars look of similar length, the percentage call-out removes any guessworrk readers have to mentally translate. Also, I’ll be adding the total population in the header to immediately anchor every subsequent percentage to give more context to the percentages added. With below code chunk, I will be adjusting the header to calculate total population so that the percentages can be referenced, along with percentage of total population on each bar.\n\nlabs(\n  title    = \"Population Pyramid (2024)\",            \n  subtitle = paste0(\"Total population: \", comma(total_pop)),\n                                                        \n  x        = \"Age Group\",\n  y        = \"Population (in thousands)\"\n)\n\n\n  mutate(\n    Pop = if_else(Sex == \"Males\", -Pop, Pop),\n    pct = abs(Pop) / sum(abs(Pop)) * 100\n  )\n\ntotal_pop &lt;- sum(abs(pct_data$Pop))\n\nRemoving horizontal gridlines: Since axis ticks and percentage labels already give precise reference points, the extra gridlines behind the bars no longer add new information and can even distract by creating “railroad tracks” that compete with the bars. Without horizontal gridlines, audience can still read each bar against the axis labels and allows for a cleaner backdrop that draws all attention to the data itself. Ultimately sharpening the demographic story without compromising clarity of precision.\n\ntheme_minimal() +\ntheme(\n  panel.grid.major.y = element_blank(),                # ← removes the horizontal gridlines\n  panel.grid.major.x = element_line(color = \"gray90\", size = 0.3),\n  panel.grid.minor.x = element_line(color = \"gray90\", size = 0.3),\n  …\n)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01p2.html#putting-it-together---all-improvements-the-final-pyramid-plot",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01p2.html#putting-it-together---all-improvements-the-final-pyramid-plot",
    "title": "Take-home Exercise 1: Phase 2",
    "section": "3.4 Putting it Together - All Improvements (The Final Pyramid Plot)",
    "text": "3.4 Putting it Together - All Improvements (The Final Pyramid Plot)\n\n\nShow code\nage_order &lt;- c(\n  \"0 to 4\", \"5 to 9\",  \"10 to 14\", \"15 to 19\", \"20 to 24\", \"25 to 29\",\n  \"30 to 34\",\"35 to 39\",\"40 to 44\", \"45 to 49\", \"50 to 54\", \"55 to 59\",\n  \"60 to 64\",\"65 to 69\",\"70 to 74\", \"75 to 79\", \"80 to 84\", \"85 to 89\",\n  \"90+\"\n)\n\npct_data &lt;- sgdemo2024 %&gt;%\n  mutate(\n    AG = cut(\n      Age,\n      breaks = c(seq(0, 90, by = 5), Inf),\n      right  = FALSE,\n      labels = age_order\n    ),\n    AG = fct_explicit_na(AG, na_level = \"90+\")\n  ) %&gt;%\n  group_by(AG, Sex) %&gt;%\n  summarise(Pop = sum(Pop), .groups = \"drop\") %&gt;%\n  mutate(\n    Pop = if_else(Sex == \"Males\", -Pop, Pop),\n    pct = abs(Pop) / sum(abs(Pop)) * 100\n  )\n\ntotal_pop &lt;- sum(abs(pct_data$Pop))\n\nggplot(pct_data, aes(x = AG, y = Pop/1000, fill = Sex)) +\n  geom_col(width = 0.8) +\n  geom_text(\n    aes(label = paste0(round(pct, 1), \"%\"),\n        hjust = if_else(Sex == \"Males\", 1.1, -0.1)\n    ),\n    size = 3, color = \"gray20\"\n  ) +\n  scale_y_continuous(\n    limits = c(-180, 180),\n    breaks = seq(-180, 180, by = 20),\n    labels = abs,\n    expand = c(0, 0.02),    \n    oob = scales::squish\n  ) +\n  coord_flip(clip = \"off\") +\n  scale_fill_manual(values = c(Males = \"skyblue\", Females = \"salmon\")) +\n  labs(\n    title    = \"Population Pyramid (2024)\",\n    subtitle = paste0(\"Total population: \", comma(total_pop)),\n    x        = \"Age Group\",\n    y        = \"Population (in thousands)\"\n  ) +\n  theme_minimal() +\n  theme(\n    panel.grid.major.y = element_blank(),\n    panel.grid.major.x = element_line(color = \"gray90\", size=0.3),\n    panel.grid.minor.x = element_line(color = \"gray90\",size=0.3),\n    legend.position    = \"right\",\n    legend.title       = element_blank(),\n    plot.title         = element_text(hjust = 0.5, face= \"bold\"),\n    plot.subtitle      = element_text(hjust = 0.5)\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nConclusion\n\n\n\nCompared to the original version, this revised pyramid is both cleaner and more informative. By placing each bar’s share of the total alongside its count, viewers can instantly gauge not just “how many” but “how big a slice” each age band represents. Centralizing the title and subtitle with the overall population right up front anchors the narrative, while bold axis labels reinforce the key dimensions. Removing non-essential horizontal gridlines sharpens focus on the data itself. Altogether, these tweaks make the demographic story more transparent, accessible, and visually engaging."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01p2.html#three-good-design-principles-1",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01p2.html#three-good-design-principles-1",
    "title": "Take-home Exercise 1: Phase 2",
    "section": "4.1 Three Good Design Principles",
    "text": "4.1 Three Good Design Principles\n\nHorizontal bars\nI like that the plot is a horinzontal bar plot. This is because by flipping the axes so that the Planning Area names run along the y-axis means that I am able to see the full names (e.g “Western Water Catchment”) legibly. If the plot had it on the x-axis, it would have been tiny, and rotated text.\nMinimalist Theme with Subtle Gridlines\nI like that the gridlights at the major tick marks are light grey as this removes all non-essential decorations. It allows the eye just enough reference to read off values without cluttering the canvas. It keeps the focus on the data itself.\nPractical Guides for Using Colour and Guides for Encoding Values in Graph\nIn Lesson 2, we learned about practical guides of using colours in chart. I like how the plot has adhered to this rule but using the same colour and has not used different colors just for the sake of it. I also like how the values start at zero, which according to Lesson 2 - is a great thing! It ensures the bars shows a quantitative scale."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01p2.html#areas-of-improvement-1",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01p2.html#areas-of-improvement-1",
    "title": "Take-home Exercise 1: Phase 2",
    "section": "4.2 Areas of Improvement",
    "text": "4.2 Areas of Improvement\nAccording to the four quadrants of clarity and aesthetic and based on the grood design principles I outlined above, I would put this in Quadrant Above is the four quadrants of clarity and aesthetic and based on the good design principles I found outlined previously, I would put this in Quadrant II - clear but ugly.\n\n4.2.1 Improvement 1 - Descending Order\nThe bars are all over the place and not arranged in an orderly manner. It does not tell me any new information by putting it randomly - it is not as if the bars are arranged by regions and such. Hence, it is extremely confusing and looks all over the place. By fixing this and arranging them by magnitude, readers will be able to immediately see who’s on top” which tells the story at a glance. Furthermore, human perception excels at comparing nearby items of similar size. In a sorted bar chart, adjacent bars differ by the smallest possible increments, making it easy to judge differences.\nBelow code chunk will be added before the ggplot to arrange them in descending order from the top - from most populated to least populated.\n\npa_totals &lt;- sgdemo2024 %&gt;%\n  group_by(PA) %&gt;%\n  summarise(Pop = sum(Pop, na.rm = TRUE)) %&gt;%\n  filter(Pop &gt; 0) %&gt;%            \n  arrange(desc(Pop))             # largest → smallest\npa_totals$PA &lt;- factor(pa_totals$PA, levels = rev(pa_totals$PA))\n\nPutting it Together - Improvement 1\n\n\nShow code\npa_totals &lt;- sgdemo2024 %&gt;%\n  group_by(PA) %&gt;%\n  summarise(Pop = sum(Pop, na.rm = TRUE)) %&gt;%\n  filter(Pop &gt; 0) %&gt;%          \n  arrange(desc(Pop))             # largest → smallest\npa_totals$PA &lt;- factor(pa_totals$PA, levels = rev(pa_totals$PA))\n\n\nggplot(pa_totals, aes(x = PA, y = Pop)) +\n  geom_col(fill = \"steelblue\") +\n  coord_flip() +\n  scale_y_continuous(labels = comma) +\n  labs(\n    title = \"Population by Planning Area (Singapore, 2024)\",\n    x     = \"Planning Area\",\n    y     = \"Population\"\n  ) +\n  theme_minimal(base_size = 20) +\n  theme(\n    plot.title  = element_text(size = 18, face = \"bold\"),\n    axis.text.y = element_text(size = 15),\n    axis.text.x = element_text(size = 10),\n    plot.margin = margin(1, 1, 1, 1, \"cm\")\n  )\n\n\n\n\n\n\n\n\n\nDoesn’t it already look better? We can instantly tell a story and use the natural human perception to gauge the population!\n\n\n4.2.2 Improvement 2 - Gridlines and Margins\nBecause the bars themselves run themselves run horizontally, adding grid lines in the same direction creates visual “noise” that doesn’t add new information. Readers already naturally follow the length of each bar to compare values. By stripping out the horizontal grids, I can declutter the plot while still preserving the vertical grid lines that act as helpful reference ticks. WIth fewer lines means a higher “data-ink ratio” as we can guide the eye straight to the bars. Below code chunk will aim to achieve those things!\n\npanel.grid.major.y = element_blank(),\npanel.grid.minor.y = element_blank(),\n\nIn the original plot, the planning-area labels sit far from the bar and the horizontal bar lines extends on the left-hand side of the bars. When labels are far from the bars they describe, readers must track back and forth across the white space, increasing cognitive load. Pulling the text flush to the bar edge establishes an immediate, one-to-one visual link between name and value. Below code chunk aims to achieve that by keeping the layout tight ensuring nothing feels floating in the margin and the plot frame remains compact.\n\nscale_x_discrete(expand = c(0, 0.02))\n\naxis.text.y = element_text(\n  size   = 15,\n  hjust  = 1,\n  margin = margin(r = 2)\n)\n\nPutting it Together - Improvement 2\n\n\nShow code\npa_totals &lt;- sgdemo2024 %&gt;%\n  group_by(PA) %&gt;%\n  summarise(Pop = sum(Pop, na.rm = TRUE)) %&gt;%\n  filter(Pop &gt; 0) %&gt;%\n  arrange(desc(Pop))\npa_totals$PA &lt;- factor(pa_totals$PA, levels = rev(pa_totals$PA))\n\nggplot(pa_totals, aes(x = PA, y = Pop)) +\n  geom_col(fill = \"steelblue\") +\n  coord_flip(expand = FALSE) +\n  geom_hline(yintercept = 0, linewidth = 0.5, color = \"black\", inherit.aes = FALSE) +\n\n  scale_x_discrete(expand = c(0, 0.02)) +\n\n\n  scale_y_continuous(\n    labels = comma,\n    expand = c(0, 0),\n  ) +\n\n  labs(\n    title = \"Population by Planning Area (Singapore, 2024)\",\n    x     = \"Planning Area\",\n    y     = \"Population\"\n  ) +\n\n  theme_minimal(base_size = 20) +\n  theme(\n\n    axis.text.y = element_text(\n      size   = 15,\n      hjust  = 1,\n      margin = margin(r = 2)\n    ),\n\n    panel.grid.major.y = element_blank(),\n    panel.grid.minor.y = element_blank(),\n\n    panel.grid.major.x = element_line(color = \"grey80\", linewidth=0.3),\n    panel.grid.minor.x = element_blank(),\n\n    plot.title  = element_text(size = 18, face = \"bold\"),\n    axis.text.x = element_text(size = 10),\n    axis.line.x = element_line(color = \"grey90\", linewidth = 0.8),\n    plot.margin = margin(1, 1, 1, 1, \"pt\")\n  )\n\n\n\n\n\n\n\n\n\nWow, it already looks much better, cleaner and compact! However, just one more minor tweak to make this even better!\n\n\n4.2.3 Improvement 3 - Binning\nThe increment units are 100,000. Let’s switch it to 10,000 instead. This allows for finer granularity in mid-range areas as there are some that are clearly a bunch below 100,000. This will also allow for easier side-by-side comparison and better visual balance. Denser grid lines creates a subtler “graph paper” effect that can help the eye track horizontally without overwhelming the chart. Hence, I am careful not to make the lines thick. Below code chunk will do exactly that by adding breaks and limits to our scale_y_continous. I have made the limits to 290000 *1.005 to allow for some breathing room as Tampines has more than 280,000 people. The 1.005 will make sure that the font 290 does not get clipped off.\n\n  scale_y_continuous(\n    limits = c(0, 290000 * 1.005),\n    breaks = seq(0, 290000, by = 10000),\n    expand = c(0, 0),\n    labels = function(x) x / 1000\n  )"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01p2.html#putting-it-together---all-improvements-the-final-horizontal-bar-plot",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01p2.html#putting-it-together---all-improvements-the-final-horizontal-bar-plot",
    "title": "Take-home Exercise 1: Phase 2",
    "section": "4.3 Putting it Together - All Improvements (The Final Horizontal Bar Plot)",
    "text": "4.3 Putting it Together - All Improvements (The Final Horizontal Bar Plot)\n\n\nShow code\nggplot(pa_totals, aes(x = PA, y = Pop)) +\n  geom_col(fill = \"steelblue\") +\n\n\n  coord_flip(expand = FALSE) +\n  geom_hline(yintercept = 0, linewidth = 0.5, color = \"black\", inherit.aes = FALSE) +\n\n  scale_x_discrete(expand = c(0, 0.02)) +\n  scale_y_continuous(\n    limits = c(0, 290000 * 1.005),\n    breaks = seq(0, 290000, by = 10000),\n    expand = c(0, 0),\n    labels = function(x) x / 1000\n  ) +\n\n  labs(\n    title = \"Population by Planning Area (Singapore, 2024)\",\n    x     = \"Planning Area\",\n    y     = \"Population (’000s)\"\n  ) +\n\n  theme_minimal(base_size = 20) +\n  theme(\n    axis.text.y        = element_text(size = 15, hjust = 1, margin = margin(r = 2)),\n    axis.text.x        = element_text(size = 10, margin = margin(t = 5)),\n\n    panel.grid.major.y = element_blank(),\n    panel.grid.minor.y = element_blank(),\n    panel.grid.major.x = element_line(color = \"grey80\", linewidth = 0.3),\n    panel.grid.minor.x = element_blank(),\n    axis.line.x        = element_line(color = \"grey90\", linewidth = 0.8),\n    plot.title         = element_text(size = 18, face = \"bold\"),\n    plot.margin        = margin(t = 5, r = 5, b = 15, l = 5, \"pt\")\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nConclusion\n\n\n\nBy ordering the bars from highest to lowest population, removing the horizontal gridlines, tightening the planning-area labels up against their bars, and using 10 000-unit bins (displayed in thousands), this chart maximizes clarity and precision where readers can instantly see which areas are most populous without distracting lines running parallel to the data, directly link each label to its bar without unnecessary white space, and accurately gauge mid-range differences thanks to finer, well-spaced reference ticks. Together, these tweaks sharpen the visual hierarchy, reduce clutter, and make the story behind Singapore’s planning-area populations immediately accessible."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "In this hands-on exercise, my aim is to learn the basic principles and essential components of ggplot2. I will also be gaining hands-on experience on these components to plot statistical graphics based on the principle of Layered Grammar of Graphics. At the end of this hands-on, I hope to be able to apply the essential graphical elements provided by ggplot2 to create elegant and yet functional statistical graphics."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#install-and-launching-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#install-and-launching-r-packages",
    "title": "Hands-on Exercise 1",
    "section": "2.1 Install and launching R packages",
    "text": "2.1 Install and launching R packages\nThe code chunk below uses p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are, then they will be launched.\n\npacman::p_load(tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-the-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-the-data",
    "title": "Hands-on Exercise 1",
    "section": "2.2 Importing the data",
    "text": "2.2 Importing the data\nBelow code chunks imports the .csv file provided for this hands-on into R environment by using the read_csv() function. The data set contains examination grades scored for different subjects of Primary 3 students.\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#plotting-a-bar-chart-geom_bar",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#plotting-a-bar-chart-geom_bar",
    "title": "Hands-on Exercise 1",
    "section": "4.1 Plotting a bar chart: geom_bar",
    "text": "4.1 Plotting a bar chart: geom_bar\n\nggplot(data= exam_data,\n       aes(x = RACE)) +\n  geom_bar()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#plotting-the-dot-plot-geom_dotplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#plotting-the-dot-plot-geom_dotplot",
    "title": "Hands-on Exercise 1",
    "section": "4.2 Plotting the dot plot: geom_dotplot",
    "text": "4.2 Plotting the dot plot: geom_dotplot\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(dotsize = 0.5)\n\n\n\n\n\n\n\n\n\n4.2.1 Correcting y-scale of above dot plot\nBelow code chunk will perform 2 things:\n\nTurn off y-axis with scale_y_continuous()\nbinwidth argument is used to change the binwidth to 2.5\n\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(binwidth=2.5,         \n               dotsize = 0.5) +      \n  scale_y_continuous(NULL,           \n                     breaks = NULL)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#plotting-a-histogram-geom_histogram",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#plotting-a-histogram-geom_histogram",
    "title": "Hands-on Exercise 1",
    "section": "4.3 Plotting a histogram: geom_histogram()",
    "text": "4.3 Plotting a histogram: geom_histogram()\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_histogram()       \n\n\n\n\n\n\n\n\n\n4.3.1 Modifying bins in histogram\nThe default bin is 30. The code chunk below aims to:\n\nbins argument is used to change the number of bins to 20\nfills argument is to shade the histogram with light blue color, and\ncolor argument is used to change the outline colour of the bars in black\n\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20,            \n                 color=\"black\",      \n                 fill=\"light blue\")  \n\n\n\n\n\n\n\n\n\n\n4.3.2 Providing clarity of data in histogram\nBelow code chunk aims to change the interior colour to clearly distinguish Math scores on the x-axis and uses different fill colors based on student’s gender. Furthermore, it creates a histogram with 20 bins and outlines each bar in grey for better visual distinction.\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           fill = GENDER)) +\n  geom_histogram(bins=20, \n                 color=\"grey30\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#plotting-kernel-density-estimate-geom_density",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#plotting-kernel-density-estimate-geom_density",
    "title": "Hands-on Exercise 1",
    "section": "4.4 Plotting kernel density estimate: geom_density()",
    "text": "4.4 Plotting kernel density estimate: geom_density()\nA kernel density estimate provides a smoothed version of the histogram for continuous data that comes from an underlying smooth distribution.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_density()           \n\n\n\n\n\n\n\n\nWe can also plot two kernel density lines by using colour or fill argument of aes()\n\nggplot(data=exam_data, \n       aes(x = MATHS, \n           colour = GENDER)) +\n  geom_density()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#plotting-a-box-plot-geom_boxplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#plotting-a-box-plot-geom_boxplot",
    "title": "Hands-on Exercise 1",
    "section": "4.5 Plotting a box plot: geom_boxplot()",
    "text": "4.5 Plotting a box plot: geom_boxplot()\nThe code chunk below plots a box plot which displays a continuous value list by visualizing 5 summary statistics (the median, two hinges and two whispers), and all “outlying” points individually.\n\nggplot(data=exam_data, \n       aes(y = MATHS,       \n           x= GENDER)) +    \n  geom_boxplot()            \n\n\n\n\n\n\n\n\n\n4.5.1 Notches in box plots\nThe code chunk below will show notches which are used in box plots to help visually assess whether the medians of distributions differ. If notches do not overlap, it is evidence that the medians are different.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot(notch=TRUE)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#plotting-a-violin-plot-geom_violin",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#plotting-a-violin-plot-geom_violin",
    "title": "Hands-on Exercise 1",
    "section": "4.6 Plotting a violin plot: geom_violin()",
    "text": "4.6 Plotting a violin plot: geom_violin()\nBelow code chunk creates violin plots which are a way of comparing multiple data distribution. With ordinary density curves, it is difficult to compare more than just a few distributions because the lines visually interfere with each other. With a violin plot, it’s easier to compare several distributions since they’re placed side by side.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_violin()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#plotting-a-scatterplot-geom_point-code-chunk-below-creates-a-scatter-plot-showing-the-maths-and-english-grades-of-pupils-by-using-geom_point",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#plotting-a-scatterplot-geom_point-code-chunk-below-creates-a-scatter-plot-showing-the-maths-and-english-grades-of-pupils-by-using-geom_point",
    "title": "Hands-on Exercise 1",
    "section": "4.7 Plotting a scatterplot: geom_point() Code chunk below creates a scatter plot showing the Maths and English grades of pupils by using geom_point()",
    "text": "4.7 Plotting a scatterplot: geom_point() Code chunk below creates a scatter plot showing the Maths and English grades of pupils by using geom_point()\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#combining-scatter-plot-and-box-plot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#combining-scatter-plot-and-box-plot",
    "title": "Hands-on Exercise 1",
    "section": "4.8 Combining scatter plot and box plot",
    "text": "4.8 Combining scatter plot and box plot\nCode chunk below combines box plot and scatter plot. This is to plot the data points on the boxplots.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot() +                    \n  geom_point(position=\"jitter\", \n             size = 0.5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat---the-stat_summary",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat---the-stat_summary",
    "title": "Hands-on Exercise 1",
    "section": "5.1 Working with stat - the stat_summary()",
    "text": "5.1 Working with stat - the stat_summary()\nThe code chunk below adds mean values by using stat_summary() function and overriding the default geom\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom = \"point\",       \n               fun = \"mean\",         \n               colour =\"red\",        \n               size=4)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat---the-geom-method",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat---the-geom-method",
    "title": "Hands-on Exercise 1",
    "section": "5.2 Working with stat - the geom() method",
    "text": "5.2 Working with stat - the geom() method\nThe code chunk below adds mean values by using geom_() function and overriding the default stat.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  geom_point(stat=\"summary\",        \n             fun=\"mean\",           \n             colour=\"red\",          \n             size=4)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#adding-a-best-fit-curve-on-a-scatterplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#adding-a-best-fit-curve-on-a-scatterplot",
    "title": "Hands-on Exercise 1",
    "section": "5.3 Adding a best fit curve on a scatterplot",
    "text": "5.3 Adding a best fit curve on a scatterplot\nThe code chunk below, geom_smooth() is used to plot a best fit curve on the scatter plot\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(size=0.5)\n\n\n\n\n\n\n\n\nThe default smoothing method used is loess and can be overridden as shown below.\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              linewidth=0.5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-facet_warp",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-facet_warp",
    "title": "Hands-on Exercise 1",
    "section": "6.1 Working with facet_warp()",
    "text": "6.1 Working with facet_warp()\nfacet_wrap wraps a 1d sequence of panels into 2d. This is generally a better use of screen space than facet_grid because most displays are roughly rectangular.\nThe code chunk below plots a trellis plot using facet_wrap().\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_wrap(~ CLASS)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#facet_grid-function",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#facet_grid-function",
    "title": "Hands-on Exercise 1",
    "section": "6.2 facet_grid() function",
    "text": "6.2 facet_grid() function\nfacet_grid() forms a matrix of panels defined by row and column faceting variables. It is most useful when you have two discrete variables, and all combinations of the variables exist in the data.\nThe code chunk below plots a trellis plot using facet_grid().\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_grid(~ CLASS)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-coordinate",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-coordinate",
    "title": "Hands-on Exercise 1",
    "section": "7.1 Working with Coordinate",
    "text": "7.1 Working with Coordinate\nThe code chunk below flips the horizontal bar chart into vertical bar chart by using coord_flip()\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#changing-the-y--and-x-axis-range",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#changing-the-y--and-x-axis-range",
    "title": "Hands-on Exercise 1",
    "section": "7.2 Changing the y- and x-axis range",
    "text": "7.2 Changing the y- and x-axis range\nThe scatter plot on the below is slightly misleading because the y-axis and x-axis range are not equal.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, size=0.5)\n\n\n\n\n\n\n\n\nThe code chunk below fixes both the y-axis and x-ais range from 0-100\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-theme-theme_gray",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-theme-theme_gray",
    "title": "Hands-on Exercise 1",
    "section": "8.1 Working with theme: theme_gray()",
    "text": "8.1 Working with theme: theme_gray()\nThe code chunk below plot a horizontal bar chart using theme_gray()\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_gray()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-theme-theme_classic",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-theme-theme_classic",
    "title": "Hands-on Exercise 1",
    "section": "8.2 Working with theme: theme_classic()",
    "text": "8.2 Working with theme: theme_classic()\nA horizontal bar chart plotted using theme_classic()\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_classic()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-theme-theme_miminal",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-theme-theme_miminal",
    "title": "Hands-on Exercise 1",
    "section": "8.3 Working with theme: theme_miminal()",
    "text": "8.3 Working with theme: theme_miminal()\nA horizontal bar chart plotted using theme_minimal()\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal()"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Hello there! Welcome to my Visual Analytics portfolio.\nI’m Nor Hendra, A Master of IT in Business student in Singapore Management University."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "title": "Take-home Exercise 1: Phase 1",
    "section": "",
    "text": "In this take‑home exercise, I’m assuming the role of graphical editor at a local online media outlet that publishes daily across digital platforms. I’ll employ a range of charts to illuminate Singapore’s 2024 demographic landscape, guiding you through my data‑cleaning process and my “Plot Approach” notes for each visualization. More than simply presenting figures, my overarching aim is to shape these charts and their accompanying narratives into a seamless, story‑driven article, just as you would see in a professional feature where every plot advances the data story and keeps readers engaged, all while ensuring honest, accurate and aesthetic plots.\nUse below links to skip ahead.\n\n\n\n\n\n\nContent\n\n\n\n\nGetting Started (Importing Packages and Data)\nData Cleaning and Quality Checks\nArticle - Of Roots and Horizons: Singapore’s Generational Odyssey in 2024"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#importing",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#importing",
    "title": "Take-home Exercise 1: Phase 1",
    "section": "1.1 Importing Packages",
    "text": "1.1 Importing Packages\n\n\nShow code\npacman::p_load(tidyverse, ggthemes,viridis,ggridges,ggrepel,patchwork, readr, dplyr, forcats, scales, ggtext, matrixStats)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#importing-data",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#importing-data",
    "title": "Take-home Exercise 1: Phase 1",
    "section": "1.2 Importing Data",
    "text": "1.2 Importing Data\nI have attained this data as per the handout’s requirement.\nSource: Singstat\nIt would be under the ‘Population Trends’ tab titled Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex, June 2024\n\n\nShow code\n# 3.1 Import\nsgdemo2024 &lt;- read_csv((\"data/respopagesex2024.csv\"), show_col_types = FALSE)\n\n\n\n1.3 Quick check of data\n\n\nShow code\nglimpse(sgdemo2024)\n\n\nRows: 60,424\nColumns: 6\n$ PA   &lt;chr&gt; \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo K…\n$ SZ   &lt;chr&gt; \"Ang Mo Kio Town Centre\", \"Ang Mo Kio Town Centre\", \"Ang Mo Kio T…\n$ Age  &lt;chr&gt; \"0\", \"0\", \"1\", \"1\", \"2\", \"2\", \"3\", \"3\", \"4\", \"4\", \"5\", \"5\", \"6\", …\n$ Sex  &lt;chr&gt; \"Males\", \"Females\", \"Males\", \"Females\", \"Males\", \"Females\", \"Male…\n$ Pop  &lt;dbl&gt; 10, 10, 10, 10, 10, 10, 10, 10, 30, 10, 20, 10, 20, 30, 30, 10, 3…\n$ Time &lt;dbl&gt; 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,…"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#converting-sex-to-a-factor-with-the-correct-order",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#converting-sex-to-a-factor-with-the-correct-order",
    "title": "Take-home Exercise 1: Phase 1",
    "section": "2.1 Converting Sex to a factor with the correct order",
    "text": "2.1 Converting Sex to a factor with the correct order\nBy coercing Sex into a factor with a known level order to give full, explicit control over how it’s displayed in every plot and keeps the downstream code faster and more robust.\n\n\nShow code\nsgdemo2024 &lt;- sgdemo2024 %&gt;%\n  mutate(\n    Sex = factor(Sex, levels = c(\"Males\", \"Females\"))\n  )"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#count-missing-values-by-column",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#count-missing-values-by-column",
    "title": "Take-home Exercise 1: Phase 1",
    "section": "2.2 Count missing values by column",
    "text": "2.2 Count missing values by column\n\n\nShow code\n# 4.1 Check for missing values and confirm none\nmissing_counts &lt;- sgdemo2024 %&gt;% \n  summarise_all(~ sum(is.na(.)))\n\nif (all(unlist(missing_counts) == 0)) {\n  cat(\"✅ No missing values, proceed to the next check\\n\")\n} else {\n  warning(\"⚠️ Missing values detected:\")\n  print(missing_counts)\n}\n\n\n✅ No missing values, proceed to the next check"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#checking-for-any-duplicates",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#checking-for-any-duplicates",
    "title": "Take-home Exercise 1: Phase 1",
    "section": "2.3 Checking for any duplicates",
    "text": "2.3 Checking for any duplicates\n\n\nShow code\ndup_count &lt;- sum(duplicated(sgdemo2024))\n\nif (dup_count == 0) {\n  cat(\"✅ No duplicates, on to the next!\\n\")\n} else {\n  warning(\"⚠️ Found duplicate rows:\")\n  print(sgdemo2024[duplicated(sgdemo2024), ])\n}\n\n\n✅ No duplicates, on to the next!"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#ensure-population-is-strictly-positive",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#ensure-population-is-strictly-positive",
    "title": "Take-home Exercise 1: Phase 1",
    "section": "2.4 Ensure population is strictly positive",
    "text": "2.4 Ensure population is strictly positive\n\n\n\n\n\n\nRemoving zero population rows\n\n\n\nScrolling through the data, I found zero-population rows which simply means that no one of that age and sex lives in that subzone. If we add these to the plot, it will -\n\nAdd unnecessary clutter of showing up thousands of empty bars or tiles that distract from where people actually live. More importantly,\n\n\n\nIt obscures the story I am trying to tell - the audience cares about real population, not the zero-density grid.\n\nHence, it is crucial to remove these rows\n\n\nStep 1: Checking for zero-population rows.\n\n\nShow code\n# 1. Check for zero-population rows\nzero_rows &lt;- sgdemo2024 %&gt;% \n  filter(Pop == 0)\n\nif (nrow(zero_rows) &gt; 0) {\n  cat(\"⚠️ Found\", nrow(zero_rows), \"rows with Pop == 0 (empty demographic cells):\\n\")\n  print(head(zero_rows))    # show a few examples\n} else {\n  cat(\"✅ No zero‐population rows found.\\n\")\n}\n\n\n⚠️ Found 23181 rows with Pop == 0 (empty demographic cells):\n# A tibble: 6 × 6\n  PA         SZ                     Age   Sex       Pop  Time\n  &lt;chr&gt;      &lt;chr&gt;                  &lt;chr&gt; &lt;fct&gt;   &lt;dbl&gt; &lt;dbl&gt;\n1 Ang Mo Kio Ang Mo Kio Town Centre 80    Males       0  2024\n2 Ang Mo Kio Ang Mo Kio Town Centre 86    Males       0  2024\n3 Ang Mo Kio Ang Mo Kio Town Centre 86    Females     0  2024\n4 Ang Mo Kio Ang Mo Kio Town Centre 88    Males       0  2024\n5 Ang Mo Kio Ang Mo Kio Town Centre 89    Males       0  2024\n6 Ang Mo Kio Ang Mo Kio Town Centre 89    Females     0  2024\n\n\n\n\n\n\n\n\nZero-populations Rows Found\n\n\n\nIn below code, we will remove the zero population rows and confirm the removal of those rows in the following code.\n\n\nStep 2: Removing those zero-population rows.\n\n\nShow code\n# 2. Remove all zero‐population rows\nsgdemo2024 &lt;- sgdemo2024 %&gt;% \n  filter(Pop &gt; 0)\n\n\nStep 3: Confirm that all rows with zero-population has been removed.\n\n\nShow code\n# 3. Confirm removal\nif (sum(sgdemo2024$Pop == 0) == 0) {\n  cat(\"✅ All zero‐population rows removed. Data is now focused on actual residents.\\n\")\n}\n\n\n✅ All zero‐population rows removed. Data is now focused on actual residents."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#check-age-range-filter-to-plausible-values",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#check-age-range-filter-to-plausible-values",
    "title": "Take-home Exercise 1: Phase 1",
    "section": "2.5 Check Age Range & Filter to Plausible Values",
    "text": "2.5 Check Age Range & Filter to Plausible Values\n\n\n\n\n\n\nConverting entry “90 & Over” in Age Column\n\n\n\nI will be converting this to a numeric value to plot my graphs. Afterwards, I will be labeling it during the plot. This is to ensure\n\nAnalytics Integrity: Internally keeping Age=90 for all labelled “90 & Over” which allows me to do sums, means and such.\nVisual Clarity: On the axis or legend, the readers we see “90+” so there’s no confusion that the final plots cover all ages above 90.\n\n\n\nStep 1: Convert the ‘90 & Over’ to integers.\n\n\nShow code\n# 1. Inspect column names to confirm they match expectations\nprint(colnames(sgdemo2024))\n\n\n[1] \"PA\"   \"SZ\"   \"Age\"  \"Sex\"  \"Pop\"  \"Time\"\n\n\nShow code\n# 2. Convert \"Age\" → numeric, mapping \"90 & Over\" → 90\nsgdemo2024 &lt;- sgdemo2024 %&gt;%\n  mutate(\n    Age = parse_number(as.character(Age)),  \n    Age = as.integer(Age)                   \n  )\n\n# 3. Verify the transformation\nage_stats &lt;- sgdemo2024 %&gt;%\n  summarise(\n    min_age = min(Age, na.rm = TRUE),\n    max_age = max(Age, na.rm = TRUE)\n  )\n\ncat(sprintf(\n  \"✅ Age conversion complete: now an integer from %d to %d.\\n\",\n  age_stats$min_age, age_stats$max_age\n))\n\n\n✅ Age conversion complete: now an integer from 0 to 90.\n\n\nStep 2: Confirm that there are no more “90 & Over” entries in my data.\n\n\nShow code\nsum(sgdemo2024$Age == \"90 & Over\")\n\n\n[1] 0\n\n\nStep 3: Confirm the column type for Age is integer.\n\n\nShow code\ncat(\"Age column type:\", class(sgdemo2024$Age), \"\\n\")\n\n\nAge column type: integer \n\n\nStep 4: Ensure no NA in the column for Age.\n\n\nShow code\nna_count &lt;- sum(is.na(sgdemo2024$Age))\ncat(\"Number of NA in Age after parsing:\", na_count, \"\\n\")\n\n\nNumber of NA in Age after parsing: 0"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#confirm-sex-factor-levels",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#confirm-sex-factor-levels",
    "title": "Take-home Exercise 1: Phase 1",
    "section": "2.6 Confirm Sex Factor Levels",
    "text": "2.6 Confirm Sex Factor Levels\n\n\n\n\n\n\nInspecting Sex Column in Data\n\n\n\nThe below code chunk will aim to ensure that there is plot consistency and reproducibility.\n\n\n\n\nShow code\n# 1. Count subzone‐level totals (SZ == \"Total\")\nn_sz_total &lt;- sum(sgdemo2024$SZ == \"Total\", na.rm = TRUE)\ncat(\"Rows with SZ == \\\"Total\\\":\", n_sz_total, \"\\n\")\n\n\nRows with SZ == \"Total\": 0 \n\n\nShow code\n# 2. Count any Age == NA (originally \"Total\")\nn_age_na &lt;- sum(is.na(sgdemo2024$Age))\ncat(\"Rows with Age == NA (was \\\"Total\\\"):\", n_age_na, \"\\n\")\n\n\nRows with Age == NA (was \"Total\"): 0 \n\n\nShow code\n# 3. Count any Sex == \"Total\"\nn_sex_total &lt;- sum(as.character(sgdemo2024$Sex) == \"Total\", na.rm = TRUE)\ncat(\"Rows with Sex == \\\"Total\\\":\", n_sex_total, \"\\n\\n\")\n\n\nRows with Sex == \"Total\": 0 \n\n\nShow code\n# 4. If any totals remain, peek at them\nif (n_sz_total + n_age_na + n_sex_total &gt; 0) {\n  cat(\"⚠️ Example summary‐row(s):\\n\")\n  sgdemo2024 %&gt;%\n    filter(\n      SZ == \"Total\" |\n      is.na(Age)    |\n      as.character(Sex) == \"Total\"\n    ) %&gt;%\n    slice_head(n = 5) %&gt;%\n    print()\n} else {\n  cat(\"✅ No summary‐row entries remain. You’re all set.\\n\")\n}\n\n\n✅ No summary‐row entries remain. You’re all set.\n\n\n\n\nShow code\n# Define the expected order\nexpected_levels &lt;- c(\"Males\", \"Females\")\n\n# Inspect the current factor levels\nactual_levels &lt;- levels(sgdemo2024$Sex)\ncat(\"Current Sex levels:\", paste(actual_levels, collapse = \", \"), \"\\n\")\n\n\nCurrent Sex levels: Males, Females \n\n\nShow code\n# Compare and act\nif (identical(actual_levels, expected_levels)) {\n  cat(\"✅ Sex factor levels are already correct (Males, Females).\\n\")\n} else {\n  warning(\"⚠️ Sex factor levels are not as expected. Resetting to Males, Females.\")\n  sgdemo2024 &lt;- sgdemo2024 %&gt;%\n    mutate(Sex = factor(Sex, levels = expected_levels))\n  cat(\"✅ Sex factor levels have been reset to:\", \n      paste(levels(sgdemo2024$Sex), collapse = \", \"), \"\\n\")\n}\n\n\n✅ Sex factor levels are already correct (Males, Females)."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#checking-for-any-total-in-columns",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#checking-for-any-total-in-columns",
    "title": "Take-home Exercise 1: Phase 1",
    "section": "2.7 Checking for any ‘Total’ in Columns",
    "text": "2.7 Checking for any ‘Total’ in Columns\n\n\n\n\n\n\nFinal Check and Summary\n\n\n\nLet’s confirm that there are no values ‘Total’ in any of our columns so that we know our dataset is purely the granular, inhabited cells. It is not only for housekeeping, but to safeguard my visualisations and summary statistics to truly reflect Singapore’s lived population in 2024.\n\n\n\n\nShow code\n# 1. Count subzone‐level totals (SZ == \"Total\")\nn_sz_total &lt;- sum(sgdemo2024$SZ == \"Total\", na.rm = TRUE)\ncat(\"Rows with SZ == \\\"Total\\\":\", n_sz_total, \"\\n\")\n\n\nRows with SZ == \"Total\": 0 \n\n\nShow code\n# 2. Count any Age == NA (originally \"Total\")\nn_age_na &lt;- sum(is.na(sgdemo2024$Age))\ncat(\"Rows with Age == NA (was \\\"Total\\\"):\", n_age_na, \"\\n\")\n\n\nRows with Age == NA (was \"Total\"): 0 \n\n\nShow code\n# 3. Count any Sex == \"Total\"\nn_sex_total &lt;- sum(as.character(sgdemo2024$Sex) == \"Total\", na.rm = TRUE)\ncat(\"Rows with Sex == \\\"Total\\\":\", n_sex_total, \"\\n\\n\")\n\n\nRows with Sex == \"Total\": 0 \n\n\nShow code\n# 4. If any totals remain, peek at them\nif (n_sz_total + n_age_na + n_sex_total &gt; 0) {\n  cat(\"⚠️ Example summary‐row(s):\\n\")\n  sgdemo2024 %&gt;%\n    filter(\n      SZ == \"Total\" |\n      is.na(Age)    |\n      as.character(Sex) == \"Total\"\n    ) %&gt;%\n    slice_head(n = 5) %&gt;%\n    print()\n} else {\n  cat(\"✅ No summary‐row entries remain. You’re all set.\\n\")\n}\n\n\n✅ No summary‐row entries remain. You’re all set."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#final-summary",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#final-summary",
    "title": "Take-home Exercise 1: Phase 1",
    "section": "2.8 Final Summary",
    "text": "2.8 Final Summary\nWe are finally done with cleaning the data and converting what’s needed to provide truthful and accurate data. Below is a quick summary of our freshly cleaned data!\n\n\nShow code\n# High‐Level Summary of Cleaned Data\n\nsummary_tbl &lt;- sgdemo2024 %&gt;%\n  summarise(\n    total_records    = n(),\n    total_population = sum(Pop),\n    n_PAs            = n_distinct(PA),\n    n_SZs            = n_distinct(SZ)\n  )\n\n# Print the summary table\nprint(summary_tbl)\n\n\n# A tibble: 1 × 4\n  total_records total_population n_PAs n_SZs\n          &lt;int&gt;            &lt;dbl&gt; &lt;int&gt; &lt;int&gt;\n1         37243          4193530    42   235\n\n\nShow code\n# Confirmation message\ncat(sprintf(\n  \"✅ Data summary complete: %d records, total population %d, across %d PAs and %d subzones.\\n\",\n  summary_tbl$total_records,\n  summary_tbl$total_population,\n  summary_tbl$n_PAs,\n  summary_tbl$n_SZs\n))\n\n\n✅ Data summary complete: 37243 records, total population 4193530, across 42 PAs and 235 subzones.\n\n\nShow code\n# Show random rows\nset.seed(2025)\nsgdemo2024 %&gt;% \n  slice_sample(prop = 0.01)\n\n\n# A tibble: 372 × 6\n   PA            SZ                    Age Sex       Pop  Time\n   &lt;chr&gt;         &lt;chr&gt;               &lt;int&gt; &lt;fct&gt;   &lt;dbl&gt; &lt;dbl&gt;\n 1 Tampines      Tampines North         68 Males      70  2024\n 2 Toa Payoh     Boon Teck              41 Females    80  2024\n 3 Toa Payoh     Joo Seng               50 Males      60  2024\n 4 Bukit Panjang Dairy Farm             71 Males      30  2024\n 5 Ang Mo Kio    Yio Chu Kang East      56 Males      40  2024\n 6 Queenstown    Commonwealth           73 Males      30  2024\n 7 Bukit Merah   Redhill                44 Males      80  2024\n 8 Clementi      Sunset Way             68 Females    60  2024\n 9 Jurong West   Jurong West Central    10 Females   300  2024\n10 Bukit Timah   Anak Bukit             51 Males     150  2024\n# ℹ 362 more rows"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#generational-imbalance-shrinking-young-cohorts-and-growing-elderhood",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#generational-imbalance-shrinking-young-cohorts-and-growing-elderhood",
    "title": "Take-home Exercise 1: Phase 1",
    "section": "Generational Imbalance: Shrinking Young Cohorts and Growing Elderhood",
    "text": "Generational Imbalance: Shrinking Young Cohorts and Growing Elderhood\n\n\n\n\n\n\nPlot Approach\n\n\n\nTechnical Approach\nFor enhanced clarity, I’ve grouped the X‑axis into five‑year age bands and scaled the Y‑axis to population figures in thousands, keeping the chart readable despite its size. I have also calculated the percentages of each age group’s gender by percentage of the total population to give a better understanding of the size.\nVisual Rationale\nI also drew inspiration from an article on moving beyond blue‑for‑boys and pink‑for‑girls: instead, Telegraph UK uses purple and green, echoing the UK’s “Votes for Women” campaign and offering superior contrast. By rejecting these stereotypes, we open the door to more inclusive storytelling and richer understanding, ensuring that our visual language empowers individuals rather than boxes them into outdated expectations. I also removed the horizontal grids to avoid the chart looking cluttered and because it does not add any value.\n\n\n\n\nShow code\n# 1. Prepare pyramid data with overall‐pop percentages\npyr_df &lt;- sgdemo2024 %&gt;%\n  mutate(\n    AgeGroup = cut(\n      Age,\n      breaks = c(-1, seq(4, 89, 5), Inf),\n      labels = c(paste0(seq(0, 85, 5), \"-\", seq(4, 89, 5)), \"90+\"),\n      right  = TRUE\n    )\n  ) %&gt;%\n  group_by(AgeGroup, Sex) %&gt;%\n    summarise(Pop = sum(Pop), .groups = \"drop\") %&gt;%\n  # Calculate percentage of male/female over the total population\n  ungroup() %&gt;%\n  mutate(\n    total_all = sum(Pop),\n    PopK      = Pop / 1000,\n    PopSignK  = if_else(Sex == \"Males\", -PopK, PopK),\n    Perc      = Pop / total_all * 100,            \n    LabelPerc = sprintf(\"%.1f%%\", Perc)\n  )\n\n# 2. Compute subtitle text with grand totals\ntotal_all     &lt;- sum(pyr_df$Pop)\ntotal_males   &lt;- sum(pyr_df$Pop[pyr_df$Sex == \"Males\"])\ntotal_females &lt;- sum(pyr_df$Pop[pyr_df$Sex == \"Females\"])\npct_males     &lt;- total_males   / total_all * 100\npct_females   &lt;- total_females / total_all * 100\n\nsubtitle_text &lt;- paste0(\n  \"Total population: \", scales::comma(total_all), \"\\n\",\n  \"Males: \", scales::comma(total_males), \" (\", sprintf(\"%.1f%%\", pct_males), \")  |  \",\n  \"Females: \", scales::comma(total_females), \" (\", sprintf(\"%.1f%%\", pct_females), \")\"\n)\n\nlim    &lt;- 180\nbreaks &lt;- seq(-lim, lim, by = 10)\n\n# 3. Plot\nggplot(pyr_df, aes(x = PopSignK, y = AgeGroup, fill = Sex)) +\n  geom_col(width = 0.8) +\n  # Male % labels \n  geom_text(\n    data    = filter(pyr_df, Sex == \"Males\"),\n    aes(label = LabelPerc),\n    hjust   = 1.1, nudge_x = -1.5,\n    size    = 3.5, color = \"black\"\n  ) +\n  # Female % labels \n  geom_text(\n    data    = filter(pyr_df, Sex == \"Females\"),\n    aes(label = LabelPerc),\n    hjust   = 0, nudge_x = 1.5,\n    size    = 3.5, color = \"black\"\n  ) +\n  scale_fill_manual(values = c(\"Males\" = \"#00C2A1\", \"Females\" = \"#9E00E3\")) +\n  scale_x_continuous(\n    breaks = breaks,\n    labels = function(x) abs(x),\n    limits = c(-lim, lim),\n    expand = c(0, 0)\n  ) +\n  geom_vline(xintercept = 0, color = \"grey50\", size = 0.3) +\n  coord_cartesian(clip = \"off\") +\n  labs(\n    title    = \"Singapore Population by Age Group in 2024\",\n    subtitle = subtitle_text,\n    x        = \"Population (’000)\",\n    y        = \"Age Group\",\n    fill     = NULL\n  ) +\n  theme_minimal(base_size = 14) +\n  theme(\n    panel.border       = element_rect(color = \"black\", fill = NA, size = 0.2),\n    plot.title         = element_text(size = 18, face = \"bold\", hjust = 0.5),\n    plot.subtitle      = element_text(size = 12, hjust = 0.5, margin = margin(b = 10)),\n    axis.text.y        = element_text(size = 11, color = \"black\"),\n    axis.text.x        = element_text(size = 11, color = \"black\"),\n    axis.title.x       = element_text(face= \"bold\"),\n    axis.title.y       = element_text(face= \"bold\"), \n    panel.grid.major.y = element_blank(),\n    panel.grid.minor   = element_blank(),\n    legend.position    = \"bottom\",\n    plot.margin        = margin(5, 40, 5, 5)\n  )\n\n\n\n\n\n\n\n\n\nUsing Singapore’s statutory retirement age of 63 as the cutoff, shows children and adolescents (ages 0–18) making up just under 19% of residents, while those aged 64 and above account for about 26%. This leaves roughly 55% of Singaporeans in the working‑age bracket (ages 20–63), a majority tasked with supporting both younger and older dependents. This underscores growing pressures on public healthcare and social services, as well as the demands placed on the “sandwich generation” juggling childcare and eldercare.\nLet’s turn our attention to the prime working‑age cohort, those between 20 and 54 years olds who make up nearly half of Singapore’s population (about 49%). This group remains the engine of our economy, with the largest concentrations clustered in the 30–44 bands, reflecting a strong mid‑career presence. Yet their growth has begun to plateau, a sign that fresh labour supply won’t keep expanding at the same pace. As this segment shoulders the financial weight of both children and older relatives, policymakers must look beyond merely filling jobs such as investing instead in skills development, flexible work arrangements and productivity enhancements to sustain economic momentum even as the pool of prime‑age workers levels off."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#balancing-act-singapores-workforce-dynamics-and-regional-age-hotspots",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#balancing-act-singapores-workforce-dynamics-and-regional-age-hotspots",
    "title": "Take-home Exercise 1: Phase 1",
    "section": "Balancing Act: Singapore’s Workforce Dynamics and Regional Age Hotspots",
    "text": "Balancing Act: Singapore’s Workforce Dynamics and Regional Age Hotspots\n\n\n\n\n\n\nPlot Approach\n\n\n\nTechnical Approach\nUsing the patchwork package, I assembled a composite figure that combines our national dependency‑cohort bar chart with a regional age‑by‑region heatmap. First, I mapped each Planning Area to its broader region (per the government’s official classification here), which allowed me to group and districts. With those region labels in place, I plotted the heatmap to visualise age‑group concentrations across the island. Defining regions upfront not only streamlined the heatmap’s construction but also sets us up for cleaner, more flexible plotting in subsequent analyses.\nVisual Rationale\nBuilding on the insights from our population pyramid, I wanted to drill down further granularity into the so‑called “Sandwich Generation,” whose members juggle childcare and eldercare. The dependency‑cohort chart quantifies exactly how many young and elderly dependents each 20–64 age bracket supports. I removed the grids for a clean look as I only have 3 categories and labels are clear. The main focus are the bar lengths to and adding grid-lines would draw attention away from an already simple bar graph. Recalling Lesson 2: Practical Guides for Using Colour in Charts, I’ve kept the dependency‑cohort bars in the same soft colour palette to maintain visual harmony and avoid overloading the viewer.\nThe regional heatmap reveals where those age groups cluster regionally. Together, these visuals highlight both the scale of intergenerational care pressures and the specific districts where urban planners and policymakers must prioritise childcare facilities, eldercare services, and family‑friendly infrastructure.\n\n\n\n\nShow code\n# Define PA → Region lookup\ncentral    &lt;- c(\"Bishan\",\"Bukit Merah\",\"Bukit Timah\",\"Downtown Core\",\"Geylang\",\n                \"Kallang\",\"Marina East\",\"Marina South\",\"Marine Parade\",\"Museum\",\n                \"Newton\",\"Novena\",\"Orchard\",\"Outram\",\"Queenstown\",\"River Valley\",\n                \"Rochor\",\"Singapore River\",\"Southern Islands\",\"Straits View\",\n                \"Tanglin\",\"Toa Payoh\")\neast       &lt;- c(\"Bedok\",\"Changi\",\"Changi Bay\",\"Pasir Ris\",\"Paya Lebar\",\"Tampines\")\nnorth      &lt;- c(\"Central Water Catchment\",\"Lim Chu Kang\",\"Mandai\",\"Sembawang\",\n                \"Simpang\",\"Sungei Kadut\",\"Woodlands\",\"Yishun\")\nnorth_east &lt;- c(\"Ang Mo Kio\",\"Hougang\",\"North-Eastern Islands\",\"Punggol\",\n                \"Seletar\",\"Sengkang\",\"Serangoon\")\nwest       &lt;- c(\"Boon Lay\",\"Bukit Batok\",\"Bukit Panjang\",\"Choa Chu Kang\",\n                \"Clementi\",\"Jurong East\",\"Jurong West\",\"Pioneer\",\"Tengah\",\n                \"Tuas\",\"Western Islands\",\"Western Water Catchment\")\n\n# 1. Cohort bar data & plot\ncohort_df &lt;- sgdemo2024 %&gt;%\n  mutate(\n    CohortKey = case_when(\n      Age &lt;= 19 ~ \"young\",\n      Age &gt;= 65 ~ \"elderly\",\n      TRUE      ~ \"labour\"\n    )\n  ) %&gt;%\n  group_by(CohortKey) %&gt;%\n    summarise(TotalPop = sum(Pop), .groups = \"drop\") %&gt;%\n  mutate(\n    TotalK    = TotalPop/1000,\n    Perc      = TotalPop/sum(TotalPop)*100,\n    LabelFull = paste0(sprintf(\"%.1f%%\", Perc), \"\\n(\", comma(TotalPop),\")\"),\n    CohortLabel = case_when(\n      CohortKey==\"young\"   ~ \"**Young Dependents**&lt;br&gt;Age: 0–19\",\n      CohortKey==\"labour\"  ~ \"**Labour Force**&lt;br&gt;Age: 20–64\",\n      CohortKey==\"elderly\" ~ \"**Elderly Dependents**&lt;br&gt;Age: 65+\"\n    ) %&gt;%\n      factor(levels=c(\n        \"**Young Dependents**&lt;br&gt;Age: 0–19\",\n        \"**Labour Force**&lt;br&gt;Age: 20–64\",\n        \"**Elderly Dependents**&lt;br&gt;Age: 65+\"\n      ))\n  )\n\ngrand_total &lt;- sum(cohort_df$TotalPop)\nmax_k       &lt;- 3000\nnudge_amt   &lt;- max_k * 0.02\n\np_cohort &lt;- ggplot(cohort_df, aes(TotalK, CohortLabel)) +\n  geom_col(fill=\"#ACE1AF\", width=0.6) +\n  geom_text(aes(label=LabelFull),\n            hjust=0, nudge_x=nudge_amt, size=5,\n            lineheight=0.9, color=\"black\") +\n  scale_x_continuous(\n    name=\"Population (’000)\",\n    breaks=seq(0,max_k,250),\n    limits=c(0,max_k),\n    expand=expansion(mult=c(0,0.05)),\n    labels=function(x)x\n  ) +\n  labs(\n    title    = \"Singapore Population by Dependency Category in 2024\",\n    subtitle = paste0(\"Total population: \", comma(grand_total)),\n    x        = NULL, y = NULL\n  ) +\n  theme_minimal(base_size=14) +\n  theme(\n    plot.title        = element_text(size=16, face=\"bold\", hjust=0.5),\n    plot.subtitle     = element_text(size=12, hjust=0.5, margin=margin(b=10)),\n    axis.text.y       = element_markdown(size=12, color=\"black\"),\n    axis.text.x       = element_text(size=12, color=\"black\"),\n    axis.title.x       = element_text(face= \"bold\"),\n    panel.grid        = element_blank(),\n    legend.position   = \"none\"\n  )\n\n# 2. Heatmap data & plot \ntile_df &lt;- sgdemo2024 %&gt;%\n  mutate(\n    Region = case_when(\n      PA %in% central    ~ \"Central\",\n      PA %in% east       ~ \"East\",\n      PA %in% north      ~ \"North\",\n      PA %in% north_east ~ \"North-East\",\n      PA %in% west       ~ \"West\"\n    ),\n    AgeBand = cut(\n      Age,\n      breaks = c(seq(0,90,5), Inf),\n      right  = FALSE,\n      labels = c(paste0(seq(0,85,5), \"-\", seq(4,89,5)), \"90+\")\n    )\n  ) %&gt;%\n  group_by(Region, AgeBand) %&gt;%\n    summarise(Pop = sum(Pop), .groups = \"drop\") %&gt;%\n  mutate(\n    Region  = factor(Region, levels=c(\"Central\",\"East\",\"North\",\"North-East\",\"West\")),\n    AgeBand = factor(AgeBand, levels=c(paste0(seq(0,85,5), \"-\", seq(4,89,5)), \"90+\"))\n  )\n\np_heat &lt;- ggplot(tile_df, aes(Region, AgeBand, fill=Pop)) +\n  geom_tile(color=\"white\") +\n  scale_fill_viridis_c(name=\"Population\", option=\"C\", labels=comma) +\n  labs(title = \"Singapore Heatmap of Age Population by Region in 2024\") +\n  theme_minimal(base_size=14) +\n  theme(\n    plot.title       = element_text(size=16, face=\"bold\", hjust=0.5),\n    axis.text.x      = element_text(color=\"black\"),\n    axis.text.y      = element_text(color=\"black\"),\n    axis.title.x     = element_blank(),\n    axis.title.y     = element_blank(),\n    panel.grid       = element_blank(),\n    legend.position  = \"right\",\n    legend.justification = \"center\"\n  )\n\n# 3. Stack cohort on top, heatmap below\np_cohort / p_heat +\n  plot_layout(heights=c(1,1))\n\n\n\n\n\n\n\n\n\nCaught between caring for aging parents and raising children, Singapore’s “sandwich generation” faces mounting pressure as 37 dependents fall on every 100 working‑age adults. With 63.1% of residents aged 20–64, these mid‑career adults must support 18.9% young dependents (ages 0–19) and 18.0% elderly dependents (65+), straining both family resources and national social services.\nOur regional heatmap further reveals where this tension is most acute: the Central and North‑East districts not only concentrate the largest cohorts of prime‑age workers (35–44) but also show darker shades in the early senior bands (65–74), indicating dual hotspots of childcare and eldercare demand. In contrast, the North region’s lighter tones across all age bands point to relatively lower service needs there. Addressing the sandwich generation’s unique challenges will require integrated policies by expanding affordable childcare in family‑dense precincts, scaling up eldercare support in senior‑heavy districts, and fostering workplace flexibility to ensure that today’s caregivers are themselves cared for."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#generational-midpoints-by-planning-area-visualising-median-ages",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#generational-midpoints-by-planning-area-visualising-median-ages",
    "title": "Take-home Exercise 1: Phase 1",
    "section": "Generational Midpoints by Planning Area: Visualising Median Ages",
    "text": "Generational Midpoints by Planning Area: Visualising Median Ages\n\n\n\n\n\n\nPlot Approach\n\n\n\nTechnical Approach\nBuilding on our earlier maps and cohort charts, I began by calculating the median age for each Planning Area, split by sex. I then reshaped the results into a “wide” format so each area has two columns, one for female median age and one for male, and ordered the Planning Areas by their overall median (average of the two sexes).\nVisual Rationale\nThis dumbbell plot naturally extends our story from a national dependency load and regional heatmap to the local “midpoints” of each community. By placing female and male medians side by side, we immediately see both overall age trends and sex‑specific gaps: established estates cluster toward the upper end of the age scale, while newer towns remain lower. The consistent purple‑and‑green palette ties back to our earlier rationale in population pyramid. Both horizontal and veritcal grids are added to guide users to link Planning Areas and Median Age. However, it has been kept soft enough to not clutter the plot, especially since the dumbell itself has a line in between the male and female. Ultimately, this chart highlights where generational midpoints and by extension, community needs vary most sharply between men and women, guiding targeted policy and infrastructure decisions at the Planning Area level.\n\n\n\n\nShow code\n# 1. Compute weighted median age by PA & sex\nmed_age &lt;- sgdemo2024 %&gt;%\n  group_by(PA, Sex) %&gt;%\n  summarise(\n    MedAge = matrixStats::weightedMedian(Age, w = Pop),\n    .groups = \"drop\"\n  ) %&gt;%\n  pivot_wider(\n    names_from  = Sex,\n    values_from = MedAge\n  ) %&gt;%\n  rename(Male = Males, Female = Females) %&gt;%\n  arrange((Male + Female) / 2) %&gt;%\n  mutate(PA = factor(PA, levels = PA))\n\n# 2. Plot static dumbbell-like chart with legend on the right\nggplot(med_age, aes(y = PA)) +\n  # a) connecting lines\n  geom_segment(aes(x = Male, xend = Female, yend = PA),\n               color = \"black\", size = 0.5) +\n  # b) male points\n  geom_point(aes(x = Male, color = \"Male\"), size = 4) +\n  # c) female points\n  geom_point(aes(x = Female, color = \"Female\"), size = 4) +\n  # 3. Scale and legend\n  scale_color_manual(\n    values = c(\"Male\" = \"#00C2A1\", \"Female\" = \"#9E00E3\")\n  ) +\n  scale_x_continuous(\n    breaks = seq(0, 55, by = 5),\n    labels = seq(0, 55, by = 5),\n    limits = c(0, 55),\n    expand = c(0, 0)\n  ) +\n  labs(\n    title = \"Singapore Median Age by Sex and Planning Area in 2024\",\n    x     = \"Median Age (years)\",\n    y     = NULL,\n    color = NULL\n  ) +\n  theme_classic(base_size = 14) +\n  theme(\n    plot.title           = element_text(hjust = 0.5, face = \"bold\"),\n    axis.text.x          = element_text(color = \"black\", size = 11),\n    axis.title.x         = element_text(size = 14),\n    axis.text.y          = element_text(color = \"black\", size = 11),\n    panel.grid.major.x   = element_line(color = \"grey90\", size = 0.2),\n    panel.grid.minor.x   = element_line(color = \"grey90\", size = 0.2),\n    panel.grid.major.y   = element_line(color = \"grey90\", size = 0.2),\n    panel.grid.minor.y   = element_line(color = \"grey90\", size = 0.2),\n    legend.position      = \"bottom\",\n    legend.justification = \"top\",\n    legend.text          = element_text(size = 12)\n  )\n\n\n\n\n\n\n\n\n\nBuilding on our dependency‑cohort and regional heatmap analyses, examining the median age across Singapore’s Planning Areas reveals where communities skew younger or older at their cores. Older estates such as Queenstown and Bukit Merah register median ages in the mid 40s, reflecting long‑established neighbourhoods and a higher share of empty‑nesters. In contrast, newer towns like Punggol, Sengkang and Tengah show median ages in the low 30s, driven by young families and recent housing launches. Heartland hubs such as Jurong East and Tampines sit in between, with medians around 36–38 years, capturing both working professionals and a growing elder segment. These median‑age patterns not only mirror the “Sandwich Generation” pressures we identified where mid‑career adults balance dependents on either side of the age spectrum, but also pinpoint where planners must tailor services: youth‑oriented amenities in family‑heavy districts and age‑friendly infrastructure in more mature estates."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#final-words---bridging-generations-tailoring-singapores-communities-for-all-ages",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#final-words---bridging-generations-tailoring-singapores-communities-for-all-ages",
    "title": "Take-home Exercise 1: Phase 1",
    "section": "Final Words - Bridging Generations: Tailoring Singapore’s Communities for All Ages",
    "text": "Final Words - Bridging Generations: Tailoring Singapore’s Communities for All Ages\nTogether, our analysis paints a comprehensive portrait of Singapore’s evolving demographic landscape: declining birth rates have narrowed the population’s base while increased longevity has expanded its apex, leaving 37 dependents, 20 young and 17 elderly for every 100 working‑age adults. Regionally, Central and North‑East districts emerge as dual hotspots of both prime‑age workers and burgeoning senior cohorts, intensifying the “sandwich generation” pressures on mid‑career adults who juggle childcare and eldercare. Across Planning Areas, median ages range from the low 30s in growth towns like Punggol and Tengah to the mid‑40s in mature estates such as Queenstown and Bukit Merah, with notable sex‑specific gaps highlighted in our dumbbell plot. These patterns underscore the urgency of place‑based strategies by expanding affordable childcare in youthful precincts, scaling up geriatric care in senior‑dense districts, and tailoring urban infrastructure to each community’s generational midpoint. By aligning services with these demographic realities, Singapore can ensure that every cohort, young, working‑age and elderly receives the support it needs for a resilient, inclusive future."
  }
]
[
  {
    "objectID": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#installing-packages",
    "href": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#installing-packages",
    "title": "In-class Exercise 5",
    "section": "1.1 Installing Packages",
    "text": "1.1 Installing Packages\nIn the code chunk below, p_load() of pacman package is used to load the R packages into R environment\n\n\nCode\npacman::p_load(tidyverse,jsonlite,SmartEDA,tidygraph,ggraph)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#importing-knowledge-graph-data",
    "href": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#importing-knowledge-graph-data",
    "title": "In-class Exercise 5",
    "section": "1.2 Importing Knowledge Graph Data",
    "text": "1.2 Importing Knowledge Graph Data\nIn the code chunk below, fromJSON() of jsonlite package is used to import MC1_graph.json file into R and save the output object.\n\n\nCode\nkg &lt;- fromJSON(\"data/MC1_graph.json\")\n\n\n\nInspect structure\n\n\nCode\nstr(kg, max.level =1)\n\n\nList of 5\n $ directed  : logi TRUE\n $ multigraph: logi TRUE\n $ graph     :List of 2\n $ nodes     :'data.frame': 17412 obs. of  10 variables:\n $ links     :'data.frame': 37857 obs. of  4 variables:\n\n\n\n\nExtract and inspect\n\n\nCode\nnodes_tbl &lt;- as_tibble(kg$nodes)\nedges_tbl &lt;- as_tibble(kg$links)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#initial-eda",
    "href": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#initial-eda",
    "title": "In-class Exercise 5",
    "section": "Initial EDA",
    "text": "Initial EDA\n\n\nCode\nggplot(data = edges_tbl,\n       aes(y = `Edge Type`)) +\n geom_bar()\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(data = nodes_tbl,\n       aes(y= `Node Type`)) +\n  geom_bar()"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#creating-knowledge-graph",
    "href": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#creating-knowledge-graph",
    "title": "In-class Exercise 5",
    "section": "Creating Knowledge Graph",
    "text": "Creating Knowledge Graph\n\nStep 1: Mapping from node id to row index\n\n\nCode\nid_map &lt;- tibble (id = nodes_tbl$id,\n                  index=seq_len(\n                    nrow(nodes_tbl)))\n\n\nThis ensures each id from node list is mapped to the correct row number\n\n\nStep 2: Map source and target IDs to row indices\n\n\nCode\nedges_tbl &lt;- edges_tbl %&gt;%\n  left_join(id_map, by = c(\"source\" = \"id\")) %&gt;%\n  rename(from = index) %&gt;%\n  left_join(id_map, by = c(\"target\" = \"id\")) %&gt;%\n  rename(to = index)\n\n\n\n\nStep 3: Filter out any unmatched (invalid) edges\n\n\nCode\nedges_tbl &lt;- edges_tbl %&gt;%\n  filter(!is.na(from), !is.na(to))\n\n\n\n\nStep 4: Creating the graph\nLastly, tbl_graph() is used to create tidygraph’s graph object by using the code chunk below.\n\n\nCode\ngraph &lt;- tbl_graph(nodes = nodes_tbl,\n                   edges = edges_tbl,\n                   directed =kg$directed)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#visualising-the-knowledge-graph",
    "href": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#visualising-the-knowledge-graph",
    "title": "In-class Exercise 5",
    "section": "Visualising the knowledge graph",
    "text": "Visualising the knowledge graph\n\n\nCode\nset.seed(1234)\n\n\n\nVisualising the whole graph\n\nggraph(graph, layout = \"fr\") +\n  geom_edge_link(alpha=0.3,\n                 colour = \"gray\") +\n  geom_node_point(aes(color = `Node Type`),\n                  size = 4) +\n  geom_node_text(aes(label=name),\n                 repel = TRUE,\n                 size = 2.5) +\n  theme_void()\n\n\n\nVisualising the sub-graph\nIn this section, we are interested to create a sub-graph base on MemberOf value in Edge Type column of the edges data frame.\n\nStep 1: Filter edges to only “MemberOf”\n\n\nCode\ngraph_memberof &lt;- graph %&gt;%\n  activate(edges) %&gt;%\n  filter(`Edge Type` == \"MemberOf\")\n\n\n\n\nStep 2: Extract only connected nodes (i.e., used in these edges)\n\n\nCode\nused_node_indices &lt;- graph_memberof %&gt;%\n  activate(edges) %&gt;%\n  as_tibble() %&gt;%\n  select(from, to) %&gt;%\n  unlist() %&gt;%\n  unique()\n\n\n\n\nStep 3: Keep only those nodes\n\n\nCode\ngraph_memberof &lt;- graph_memberof %&gt;%\n  activate(nodes) %&gt;%\n  mutate(row_id = row_number()) %&gt;%\n  filter(row_id %in% used_node_indices) %&gt;%\n  select(-row_id)\n\n\n\n\nPlot the sub-graph\n\n\nCode\nggraph(graph_memberof, \n       layout = \"fr\") +\n  geom_edge_link(alpha=0.5,\n                 colour = \"gray\") +\n  geom_node_point(aes(color = `Node Type`),\n                  size = 1) +\n  geom_node_text(aes(label = name),\n                 repel = TRUE,\n                 size = 2.5) +\n  theme_void()\n\n\n\n\n\n\n\n\n\n```"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "title": "Take-home Exercise 1: Phase 1",
    "section": "",
    "text": "In this take‑home exercise, I’m assuming the role of graphical editor at a local online media outlet that publishes daily across digital platforms. I’ll employ a range of charts to illuminate Singapore’s 2024 demographic landscape, guiding you through my data‑cleaning process and my “Plot Approach” notes for each visualization. More than simply presenting figures, my overarching aim is to shape these charts and their accompanying narratives into a seamless, story‑driven article, just as you would see in a professional feature where every plot advances the data story and keeps readers engaged, all while ensuring honest, accurate and aesthetic plots.\nUse below links to skip ahead.\n\n\n\n\n\n\nContent\n\n\n\n\nGetting Started (Importing Packages and Data)\nData Cleaning and Quality Checks\nArticle - Of Roots and Horizons: Singapore’s Generational Odyssey in 2024"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#importing",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#importing",
    "title": "Take-home Exercise 1: Phase 1",
    "section": "1.1 Importing Packages",
    "text": "1.1 Importing Packages\n\n\nShow code\npacman::p_load(tidyverse, ggthemes,viridis,ggridges,ggrepel,patchwork, readr, dplyr, forcats, scales, ggtext, matrixStats)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#importing-data",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#importing-data",
    "title": "Take-home Exercise 1: Phase 1",
    "section": "1.2 Importing Data",
    "text": "1.2 Importing Data\nI have attained this data as per the handout’s requirement.\nSource: Singstat\nIt would be under the ‘Population Trends’ tab titled Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex, June 2024\n\n\nShow code\n# 3.1 Import\nsgdemo2024 &lt;- read_csv((\"data/respopagesex2024.csv\"), show_col_types = FALSE)\n\n\n\n1.3 Quick check of data\n\n\nShow code\nglimpse(sgdemo2024)\n\n\nRows: 60,424\nColumns: 6\n$ PA   &lt;chr&gt; \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo K…\n$ SZ   &lt;chr&gt; \"Ang Mo Kio Town Centre\", \"Ang Mo Kio Town Centre\", \"Ang Mo Kio T…\n$ Age  &lt;chr&gt; \"0\", \"0\", \"1\", \"1\", \"2\", \"2\", \"3\", \"3\", \"4\", \"4\", \"5\", \"5\", \"6\", …\n$ Sex  &lt;chr&gt; \"Males\", \"Females\", \"Males\", \"Females\", \"Males\", \"Females\", \"Male…\n$ Pop  &lt;dbl&gt; 10, 10, 10, 10, 10, 10, 10, 10, 30, 10, 20, 10, 20, 30, 30, 10, 3…\n$ Time &lt;dbl&gt; 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,…"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#converting-sex-to-a-factor-with-the-correct-order",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#converting-sex-to-a-factor-with-the-correct-order",
    "title": "Take-home Exercise 1: Phase 1",
    "section": "2.1 Converting Sex to a factor with the correct order",
    "text": "2.1 Converting Sex to a factor with the correct order\nBy coercing Sex into a factor with a known level order to give full, explicit control over how it’s displayed in every plot and keeps the downstream code faster and more robust.\n\n\nShow code\nsgdemo2024 &lt;- sgdemo2024 %&gt;%\n  mutate(\n    Sex = factor(Sex, levels = c(\"Males\", \"Females\"))\n  )"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#count-missing-values-by-column",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#count-missing-values-by-column",
    "title": "Take-home Exercise 1: Phase 1",
    "section": "2.2 Count missing values by column",
    "text": "2.2 Count missing values by column\n\n\nShow code\n# 4.1 Check for missing values and confirm none\nmissing_counts &lt;- sgdemo2024 %&gt;% \n  summarise_all(~ sum(is.na(.)))\n\nif (all(unlist(missing_counts) == 0)) {\n  cat(\"✅ No missing values, proceed to the next check\\n\")\n} else {\n  warning(\"⚠️ Missing values detected:\")\n  print(missing_counts)\n}\n\n\n✅ No missing values, proceed to the next check"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#checking-for-any-duplicates",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#checking-for-any-duplicates",
    "title": "Take-home Exercise 1: Phase 1",
    "section": "2.3 Checking for any duplicates",
    "text": "2.3 Checking for any duplicates\n\n\nShow code\ndup_count &lt;- sum(duplicated(sgdemo2024))\n\nif (dup_count == 0) {\n  cat(\"✅ No duplicates, on to the next!\\n\")\n} else {\n  warning(\"⚠️ Found duplicate rows:\")\n  print(sgdemo2024[duplicated(sgdemo2024), ])\n}\n\n\n✅ No duplicates, on to the next!"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#ensure-population-is-strictly-positive",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#ensure-population-is-strictly-positive",
    "title": "Take-home Exercise 1: Phase 1",
    "section": "2.4 Ensure population is strictly positive",
    "text": "2.4 Ensure population is strictly positive\n\n\n\n\n\n\nRemoving zero population rows\n\n\n\nScrolling through the data, I found zero-population rows which simply means that no one of that age and sex lives in that subzone. If we add these to the plot, it will -\n\nAdd unnecessary clutter of showing up thousands of empty bars or tiles that distract from where people actually live. More importantly,\n\n\n\nIt obscures the story I am trying to tell - the audience cares about real population, not the zero-density grid.\n\nHence, it is crucial to remove these rows\n\n\nStep 1: Checking for zero-population rows.\n\n\nShow code\n# 1. Check for zero-population rows\nzero_rows &lt;- sgdemo2024 %&gt;% \n  filter(Pop == 0)\n\nif (nrow(zero_rows) &gt; 0) {\n  cat(\"⚠️ Found\", nrow(zero_rows), \"rows with Pop == 0 (empty demographic cells):\\n\")\n  print(head(zero_rows))    # show a few examples\n} else {\n  cat(\"✅ No zero‐population rows found.\\n\")\n}\n\n\n⚠️ Found 23181 rows with Pop == 0 (empty demographic cells):\n# A tibble: 6 × 6\n  PA         SZ                     Age   Sex       Pop  Time\n  &lt;chr&gt;      &lt;chr&gt;                  &lt;chr&gt; &lt;fct&gt;   &lt;dbl&gt; &lt;dbl&gt;\n1 Ang Mo Kio Ang Mo Kio Town Centre 80    Males       0  2024\n2 Ang Mo Kio Ang Mo Kio Town Centre 86    Males       0  2024\n3 Ang Mo Kio Ang Mo Kio Town Centre 86    Females     0  2024\n4 Ang Mo Kio Ang Mo Kio Town Centre 88    Males       0  2024\n5 Ang Mo Kio Ang Mo Kio Town Centre 89    Males       0  2024\n6 Ang Mo Kio Ang Mo Kio Town Centre 89    Females     0  2024\n\n\n\n\n\n\n\n\nZero-populations Rows Found\n\n\n\nIn below code, we will remove the zero population rows and confirm the removal of those rows in the following code.\n\n\nStep 2: Removing those zero-population rows.\n\n\nShow code\n# 2. Remove all zero‐population rows\nsgdemo2024 &lt;- sgdemo2024 %&gt;% \n  filter(Pop &gt; 0)\n\n\nStep 3: Confirm that all rows with zero-population has been removed.\n\n\nShow code\n# 3. Confirm removal\nif (sum(sgdemo2024$Pop == 0) == 0) {\n  cat(\"✅ All zero‐population rows removed. Data is now focused on actual residents.\\n\")\n}\n\n\n✅ All zero‐population rows removed. Data is now focused on actual residents."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#check-age-range-filter-to-plausible-values",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#check-age-range-filter-to-plausible-values",
    "title": "Take-home Exercise 1: Phase 1",
    "section": "2.5 Check Age Range & Filter to Plausible Values",
    "text": "2.5 Check Age Range & Filter to Plausible Values\n\n\n\n\n\n\nConverting entry “90 & Over” in Age Column\n\n\n\nI will be converting this to a numeric value to plot my graphs. Afterwards, I will be labeling it during the plot. This is to ensure\n\nAnalytics Integrity: Internally keeping Age=90 for all labelled “90 & Over” which allows me to do sums, means and such.\nVisual Clarity: On the axis or legend, the readers we see “90+” so there’s no confusion that the final plots cover all ages above 90.\n\n\n\nStep 1: Convert the ‘90 & Over’ to integers.\n\n\nShow code\n# 1. Inspect column names to confirm they match expectations\nprint(colnames(sgdemo2024))\n\n\n[1] \"PA\"   \"SZ\"   \"Age\"  \"Sex\"  \"Pop\"  \"Time\"\n\n\nShow code\n# 2. Convert \"Age\" → numeric, mapping \"90 & Over\" → 90\nsgdemo2024 &lt;- sgdemo2024 %&gt;%\n  mutate(\n    Age = parse_number(as.character(Age)),  \n    Age = as.integer(Age)                   \n  )\n\n# 3. Verify the transformation\nage_stats &lt;- sgdemo2024 %&gt;%\n  summarise(\n    min_age = min(Age, na.rm = TRUE),\n    max_age = max(Age, na.rm = TRUE)\n  )\n\ncat(sprintf(\n  \"✅ Age conversion complete: now an integer from %d to %d.\\n\",\n  age_stats$min_age, age_stats$max_age\n))\n\n\n✅ Age conversion complete: now an integer from 0 to 90.\n\n\nStep 2: Confirm that there are no more “90 & Over” entries in my data.\n\n\nShow code\nsum(sgdemo2024$Age == \"90 & Over\")\n\n\n[1] 0\n\n\nStep 3: Confirm the column type for Age is integer.\n\n\nShow code\ncat(\"Age column type:\", class(sgdemo2024$Age), \"\\n\")\n\n\nAge column type: integer \n\n\nStep 4: Ensure no NA in the column for Age.\n\n\nShow code\nna_count &lt;- sum(is.na(sgdemo2024$Age))\ncat(\"Number of NA in Age after parsing:\", na_count, \"\\n\")\n\n\nNumber of NA in Age after parsing: 0"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#confirm-sex-factor-levels",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#confirm-sex-factor-levels",
    "title": "Take-home Exercise 1: Phase 1",
    "section": "2.6 Confirm Sex Factor Levels",
    "text": "2.6 Confirm Sex Factor Levels\n\n\n\n\n\n\nInspecting Sex Column in Data\n\n\n\nThe below code chunk will aim to ensure that there is plot consistency and reproducibility.\n\n\n\n\nShow code\n# 1. Count subzone‐level totals (SZ == \"Total\")\nn_sz_total &lt;- sum(sgdemo2024$SZ == \"Total\", na.rm = TRUE)\ncat(\"Rows with SZ == \\\"Total\\\":\", n_sz_total, \"\\n\")\n\n\nRows with SZ == \"Total\": 0 \n\n\nShow code\n# 2. Count any Age == NA (originally \"Total\")\nn_age_na &lt;- sum(is.na(sgdemo2024$Age))\ncat(\"Rows with Age == NA (was \\\"Total\\\"):\", n_age_na, \"\\n\")\n\n\nRows with Age == NA (was \"Total\"): 0 \n\n\nShow code\n# 3. Count any Sex == \"Total\"\nn_sex_total &lt;- sum(as.character(sgdemo2024$Sex) == \"Total\", na.rm = TRUE)\ncat(\"Rows with Sex == \\\"Total\\\":\", n_sex_total, \"\\n\\n\")\n\n\nRows with Sex == \"Total\": 0 \n\n\nShow code\n# 4. If any totals remain, peek at them\nif (n_sz_total + n_age_na + n_sex_total &gt; 0) {\n  cat(\"⚠️ Example summary‐row(s):\\n\")\n  sgdemo2024 %&gt;%\n    filter(\n      SZ == \"Total\" |\n      is.na(Age)    |\n      as.character(Sex) == \"Total\"\n    ) %&gt;%\n    slice_head(n = 5) %&gt;%\n    print()\n} else {\n  cat(\"✅ No summary‐row entries remain. You’re all set.\\n\")\n}\n\n\n✅ No summary‐row entries remain. You’re all set.\n\n\n\n\nShow code\n# Define the expected order\nexpected_levels &lt;- c(\"Males\", \"Females\")\n\n# Inspect the current factor levels\nactual_levels &lt;- levels(sgdemo2024$Sex)\ncat(\"Current Sex levels:\", paste(actual_levels, collapse = \", \"), \"\\n\")\n\n\nCurrent Sex levels: Males, Females \n\n\nShow code\n# Compare and act\nif (identical(actual_levels, expected_levels)) {\n  cat(\"✅ Sex factor levels are already correct (Males, Females).\\n\")\n} else {\n  warning(\"⚠️ Sex factor levels are not as expected. Resetting to Males, Females.\")\n  sgdemo2024 &lt;- sgdemo2024 %&gt;%\n    mutate(Sex = factor(Sex, levels = expected_levels))\n  cat(\"✅ Sex factor levels have been reset to:\", \n      paste(levels(sgdemo2024$Sex), collapse = \", \"), \"\\n\")\n}\n\n\n✅ Sex factor levels are already correct (Males, Females)."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#checking-for-any-total-in-columns",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#checking-for-any-total-in-columns",
    "title": "Take-home Exercise 1: Phase 1",
    "section": "2.7 Checking for any ‘Total’ in Columns",
    "text": "2.7 Checking for any ‘Total’ in Columns\n\n\n\n\n\n\nFinal Check and Summary\n\n\n\nLet’s confirm that there are no values ‘Total’ in any of our columns so that we know our dataset is purely the granular, inhabited cells. It is not only for housekeeping, but to safeguard my visualisations and summary statistics to truly reflect Singapore’s lived population in 2024.\n\n\n\n\nShow code\n# 1. Count subzone‐level totals (SZ == \"Total\")\nn_sz_total &lt;- sum(sgdemo2024$SZ == \"Total\", na.rm = TRUE)\ncat(\"Rows with SZ == \\\"Total\\\":\", n_sz_total, \"\\n\")\n\n\nRows with SZ == \"Total\": 0 \n\n\nShow code\n# 2. Count any Age == NA (originally \"Total\")\nn_age_na &lt;- sum(is.na(sgdemo2024$Age))\ncat(\"Rows with Age == NA (was \\\"Total\\\"):\", n_age_na, \"\\n\")\n\n\nRows with Age == NA (was \"Total\"): 0 \n\n\nShow code\n# 3. Count any Sex == \"Total\"\nn_sex_total &lt;- sum(as.character(sgdemo2024$Sex) == \"Total\", na.rm = TRUE)\ncat(\"Rows with Sex == \\\"Total\\\":\", n_sex_total, \"\\n\\n\")\n\n\nRows with Sex == \"Total\": 0 \n\n\nShow code\n# 4. If any totals remain, peek at them\nif (n_sz_total + n_age_na + n_sex_total &gt; 0) {\n  cat(\"⚠️ Example summary‐row(s):\\n\")\n  sgdemo2024 %&gt;%\n    filter(\n      SZ == \"Total\" |\n      is.na(Age)    |\n      as.character(Sex) == \"Total\"\n    ) %&gt;%\n    slice_head(n = 5) %&gt;%\n    print()\n} else {\n  cat(\"✅ No summary‐row entries remain. You’re all set.\\n\")\n}\n\n\n✅ No summary‐row entries remain. You’re all set."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#final-summary",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#final-summary",
    "title": "Take-home Exercise 1: Phase 1",
    "section": "2.8 Final Summary",
    "text": "2.8 Final Summary\nWe are finally done with cleaning the data and converting what’s needed to provide truthful and accurate data. Below is a quick summary of our freshly cleaned data!\n\n\nShow code\n# High‐Level Summary of Cleaned Data\n\nsummary_tbl &lt;- sgdemo2024 %&gt;%\n  summarise(\n    total_records    = n(),\n    total_population = sum(Pop),\n    n_PAs            = n_distinct(PA),\n    n_SZs            = n_distinct(SZ)\n  )\n\n# Print the summary table\nprint(summary_tbl)\n\n\n# A tibble: 1 × 4\n  total_records total_population n_PAs n_SZs\n          &lt;int&gt;            &lt;dbl&gt; &lt;int&gt; &lt;int&gt;\n1         37243          4193530    42   235\n\n\nShow code\n# Confirmation message\ncat(sprintf(\n  \"✅ Data summary complete: %d records, total population %d, across %d PAs and %d subzones.\\n\",\n  summary_tbl$total_records,\n  summary_tbl$total_population,\n  summary_tbl$n_PAs,\n  summary_tbl$n_SZs\n))\n\n\n✅ Data summary complete: 37243 records, total population 4193530, across 42 PAs and 235 subzones.\n\n\nShow code\n# Show random rows\nset.seed(2025)\nsgdemo2024 %&gt;% \n  slice_sample(prop = 0.01)\n\n\n# A tibble: 372 × 6\n   PA            SZ                    Age Sex       Pop  Time\n   &lt;chr&gt;         &lt;chr&gt;               &lt;int&gt; &lt;fct&gt;   &lt;dbl&gt; &lt;dbl&gt;\n 1 Tampines      Tampines North         68 Males      70  2024\n 2 Toa Payoh     Boon Teck              41 Females    80  2024\n 3 Toa Payoh     Joo Seng               50 Males      60  2024\n 4 Bukit Panjang Dairy Farm             71 Males      30  2024\n 5 Ang Mo Kio    Yio Chu Kang East      56 Males      40  2024\n 6 Queenstown    Commonwealth           73 Males      30  2024\n 7 Bukit Merah   Redhill                44 Males      80  2024\n 8 Clementi      Sunset Way             68 Females    60  2024\n 9 Jurong West   Jurong West Central    10 Females   300  2024\n10 Bukit Timah   Anak Bukit             51 Males     150  2024\n# ℹ 362 more rows"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#generational-imbalance-shrinking-young-cohorts-and-growing-elderhood",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#generational-imbalance-shrinking-young-cohorts-and-growing-elderhood",
    "title": "Take-home Exercise 1: Phase 1",
    "section": "Generational Imbalance: Shrinking Young Cohorts and Growing Elderhood",
    "text": "Generational Imbalance: Shrinking Young Cohorts and Growing Elderhood\n\n\n\n\n\n\nPlot Approach\n\n\n\nTechnical Approach\nFor enhanced clarity, I’ve grouped the X‑axis into five‑year age bands and scaled the Y‑axis to population figures in thousands, keeping the chart readable despite its size. I have also calculated the percentages of each age group’s gender by percentage of the total population to give a better understanding of the size.\nVisual Rationale\nI also drew inspiration from an article on moving beyond blue‑for‑boys and pink‑for‑girls: instead, Telegraph UK uses purple and green, echoing the UK’s “Votes for Women” campaign and offering superior contrast. By rejecting these stereotypes, we open the door to more inclusive storytelling and richer understanding, ensuring that our visual language empowers individuals rather than boxes them into outdated expectations. I also removed the horizontal grids to avoid the chart looking cluttered and because it does not add any value.\n\n\n\n\nShow code\n# 1. Prepare pyramid data with overall‐pop percentages\npyr_df &lt;- sgdemo2024 %&gt;%\n  mutate(\n    AgeGroup = cut(\n      Age,\n      breaks = c(-1, seq(4, 89, 5), Inf),\n      labels = c(paste0(seq(0, 85, 5), \"-\", seq(4, 89, 5)), \"90+\"),\n      right  = TRUE\n    )\n  ) %&gt;%\n  group_by(AgeGroup, Sex) %&gt;%\n    summarise(Pop = sum(Pop), .groups = \"drop\") %&gt;%\n  # Calculate percentage of male/female over the total population\n  ungroup() %&gt;%\n  mutate(\n    total_all = sum(Pop),\n    PopK      = Pop / 1000,\n    PopSignK  = if_else(Sex == \"Males\", -PopK, PopK),\n    Perc      = Pop / total_all * 100,            \n    LabelPerc = sprintf(\"%.1f%%\", Perc)\n  )\n\n# 2. Compute subtitle text with grand totals\ntotal_all     &lt;- sum(pyr_df$Pop)\ntotal_males   &lt;- sum(pyr_df$Pop[pyr_df$Sex == \"Males\"])\ntotal_females &lt;- sum(pyr_df$Pop[pyr_df$Sex == \"Females\"])\npct_males     &lt;- total_males   / total_all * 100\npct_females   &lt;- total_females / total_all * 100\n\nsubtitle_text &lt;- paste0(\n  \"Total population: \", scales::comma(total_all), \"\\n\",\n  \"Males: \", scales::comma(total_males), \" (\", sprintf(\"%.1f%%\", pct_males), \")  |  \",\n  \"Females: \", scales::comma(total_females), \" (\", sprintf(\"%.1f%%\", pct_females), \")\"\n)\n\nlim    &lt;- 180\nbreaks &lt;- seq(-lim, lim, by = 10)\n\n# 3. Plot\nggplot(pyr_df, aes(x = PopSignK, y = AgeGroup, fill = Sex)) +\n  geom_col(width = 0.8) +\n  # Male % labels \n  geom_text(\n    data    = filter(pyr_df, Sex == \"Males\"),\n    aes(label = LabelPerc),\n    hjust   = 1.1, nudge_x = -1.5,\n    size    = 3.5, color = \"black\"\n  ) +\n  # Female % labels \n  geom_text(\n    data    = filter(pyr_df, Sex == \"Females\"),\n    aes(label = LabelPerc),\n    hjust   = 0, nudge_x = 1.5,\n    size    = 3.5, color = \"black\"\n  ) +\n  scale_fill_manual(values = c(\"Males\" = \"#00C2A1\", \"Females\" = \"#9E00E3\")) +\n  scale_x_continuous(\n    breaks = breaks,\n    labels = function(x) abs(x),\n    limits = c(-lim, lim),\n    expand = c(0, 0)\n  ) +\n  geom_vline(xintercept = 0, color = \"grey50\", size = 0.3) +\n  coord_cartesian(clip = \"off\") +\n  labs(\n    title    = \"Singapore Population by Age Group in 2024\",\n    subtitle = subtitle_text,\n    x        = \"Population (’000)\",\n    y        = \"Age Group\",\n    fill     = NULL\n  ) +\n  theme_minimal(base_size = 14) +\n  theme(\n    panel.border       = element_rect(color = \"black\", fill = NA, size = 0.2),\n    plot.title         = element_text(size = 18, face = \"bold\", hjust = 0.5),\n    plot.subtitle      = element_text(size = 12, hjust = 0.5, margin = margin(b = 10)),\n    axis.text.y        = element_text(size = 11, color = \"black\"),\n    axis.text.x        = element_text(size = 11, color = \"black\"),\n    axis.title.x       = element_text(face= \"bold\"),\n    axis.title.y       = element_text(face= \"bold\"), \n    panel.grid.major.y = element_blank(),\n    panel.grid.minor   = element_blank(),\n    legend.position    = \"bottom\",\n    plot.margin        = margin(5, 40, 5, 5)\n  )\n\n\n\n\n\n\n\n\n\nUsing Singapore’s statutory retirement age of 63 as the cutoff, shows children and adolescents (ages 0–18) making up just under 19% of residents, while those aged 64 and above account for about 26%. This leaves roughly 55% of Singaporeans in the working‑age bracket (ages 20–63), a majority tasked with supporting both younger and older dependents. This underscores growing pressures on public healthcare and social services, as well as the demands placed on the “sandwich generation” juggling childcare and eldercare.\nLet’s turn our attention to the prime working‑age cohort, those between 20 and 54 years olds who make up nearly half of Singapore’s population (about 49%). This group remains the engine of our economy, with the largest concentrations clustered in the 30–44 bands, reflecting a strong mid‑career presence. Yet their growth has begun to plateau, a sign that fresh labour supply won’t keep expanding at the same pace. As this segment shoulders the financial weight of both children and older relatives, policymakers must look beyond merely filling jobs such as investing instead in skills development, flexible work arrangements and productivity enhancements to sustain economic momentum even as the pool of prime‑age workers levels off."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#balancing-act-singapores-workforce-dynamics-and-regional-age-hotspots",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#balancing-act-singapores-workforce-dynamics-and-regional-age-hotspots",
    "title": "Take-home Exercise 1: Phase 1",
    "section": "Balancing Act: Singapore’s Workforce Dynamics and Regional Age Hotspots",
    "text": "Balancing Act: Singapore’s Workforce Dynamics and Regional Age Hotspots\n\n\n\n\n\n\nPlot Approach\n\n\n\nTechnical Approach\nUsing the patchwork package, I assembled a composite figure that combines our national dependency‑cohort bar chart with a regional age‑by‑region heatmap. First, I mapped each Planning Area to its broader region (per the government’s official classification here), which allowed me to group and districts. With those region labels in place, I plotted the heatmap to visualise age‑group concentrations across the island. Defining regions upfront not only streamlined the heatmap’s construction but also sets us up for cleaner, more flexible plotting in subsequent analyses.\nVisual Rationale\nBuilding on the insights from our population pyramid, I wanted to drill down further granularity into the so‑called “Sandwich Generation,” whose members juggle childcare and eldercare. The dependency‑cohort chart quantifies exactly how many young and elderly dependents each 20–64 age bracket supports. I removed the grids for a clean look as I only have 3 categories and labels are clear. The main focus are the bar lengths to and adding grid-lines would draw attention away from an already simple bar graph. Recalling Lesson 2: Practical Guides for Using Colour in Charts, I’ve kept the dependency‑cohort bars in the same soft colour palette to maintain visual harmony and avoid overloading the viewer.\nThe regional heatmap reveals where those age groups cluster regionally. Together, these visuals highlight both the scale of intergenerational care pressures and the specific districts where urban planners and policymakers must prioritise childcare facilities, eldercare services, and family‑friendly infrastructure.\n\n\n\n\nShow code\n# Define PA → Region lookup\ncentral    &lt;- c(\"Bishan\",\"Bukit Merah\",\"Bukit Timah\",\"Downtown Core\",\"Geylang\",\n                \"Kallang\",\"Marina East\",\"Marina South\",\"Marine Parade\",\"Museum\",\n                \"Newton\",\"Novena\",\"Orchard\",\"Outram\",\"Queenstown\",\"River Valley\",\n                \"Rochor\",\"Singapore River\",\"Southern Islands\",\"Straits View\",\n                \"Tanglin\",\"Toa Payoh\")\neast       &lt;- c(\"Bedok\",\"Changi\",\"Changi Bay\",\"Pasir Ris\",\"Paya Lebar\",\"Tampines\")\nnorth      &lt;- c(\"Central Water Catchment\",\"Lim Chu Kang\",\"Mandai\",\"Sembawang\",\n                \"Simpang\",\"Sungei Kadut\",\"Woodlands\",\"Yishun\")\nnorth_east &lt;- c(\"Ang Mo Kio\",\"Hougang\",\"North-Eastern Islands\",\"Punggol\",\n                \"Seletar\",\"Sengkang\",\"Serangoon\")\nwest       &lt;- c(\"Boon Lay\",\"Bukit Batok\",\"Bukit Panjang\",\"Choa Chu Kang\",\n                \"Clementi\",\"Jurong East\",\"Jurong West\",\"Pioneer\",\"Tengah\",\n                \"Tuas\",\"Western Islands\",\"Western Water Catchment\")\n\n# 1. Cohort bar data & plot\ncohort_df &lt;- sgdemo2024 %&gt;%\n  mutate(\n    CohortKey = case_when(\n      Age &lt;= 19 ~ \"young\",\n      Age &gt;= 65 ~ \"elderly\",\n      TRUE      ~ \"labour\"\n    )\n  ) %&gt;%\n  group_by(CohortKey) %&gt;%\n    summarise(TotalPop = sum(Pop), .groups = \"drop\") %&gt;%\n  mutate(\n    TotalK    = TotalPop/1000,\n    Perc      = TotalPop/sum(TotalPop)*100,\n    LabelFull = paste0(sprintf(\"%.1f%%\", Perc), \"\\n(\", comma(TotalPop),\")\"),\n    CohortLabel = case_when(\n      CohortKey==\"young\"   ~ \"**Young Dependents**&lt;br&gt;Age: 0–19\",\n      CohortKey==\"labour\"  ~ \"**Labour Force**&lt;br&gt;Age: 20–64\",\n      CohortKey==\"elderly\" ~ \"**Elderly Dependents**&lt;br&gt;Age: 65+\"\n    ) %&gt;%\n      factor(levels=c(\n        \"**Young Dependents**&lt;br&gt;Age: 0–19\",\n        \"**Labour Force**&lt;br&gt;Age: 20–64\",\n        \"**Elderly Dependents**&lt;br&gt;Age: 65+\"\n      ))\n  )\n\ngrand_total &lt;- sum(cohort_df$TotalPop)\nmax_k       &lt;- 3000\nnudge_amt   &lt;- max_k * 0.02\n\np_cohort &lt;- ggplot(cohort_df, aes(TotalK, CohortLabel)) +\n  geom_col(fill=\"#ACE1AF\", width=0.6) +\n  geom_text(aes(label=LabelFull),\n            hjust=0, nudge_x=nudge_amt, size=5,\n            lineheight=0.9, color=\"black\") +\n  scale_x_continuous(\n    name=\"Population (’000)\",\n    breaks=seq(0,max_k,250),\n    limits=c(0,max_k),\n    expand=expansion(mult=c(0,0.05)),\n    labels=function(x)x\n  ) +\n  labs(\n    title    = \"Singapore Population by Dependency Category in 2024\",\n    subtitle = paste0(\"Total population: \", comma(grand_total)),\n    x        = NULL, y = NULL\n  ) +\n  theme_minimal(base_size=14) +\n  theme(\n    plot.title        = element_text(size=16, face=\"bold\", hjust=0.5),\n    plot.subtitle     = element_text(size=12, hjust=0.5, margin=margin(b=10)),\n    axis.text.y       = element_markdown(size=12, color=\"black\"),\n    axis.text.x       = element_text(size=12, color=\"black\"),\n    axis.title.x       = element_text(face= \"bold\"),\n    panel.grid        = element_blank(),\n    legend.position   = \"none\"\n  )\n\n# 2. Heatmap data & plot \ntile_df &lt;- sgdemo2024 %&gt;%\n  mutate(\n    Region = case_when(\n      PA %in% central    ~ \"Central\",\n      PA %in% east       ~ \"East\",\n      PA %in% north      ~ \"North\",\n      PA %in% north_east ~ \"North-East\",\n      PA %in% west       ~ \"West\"\n    ),\n    AgeBand = cut(\n      Age,\n      breaks = c(seq(0,90,5), Inf),\n      right  = FALSE,\n      labels = c(paste0(seq(0,85,5), \"-\", seq(4,89,5)), \"90+\")\n    )\n  ) %&gt;%\n  group_by(Region, AgeBand) %&gt;%\n    summarise(Pop = sum(Pop), .groups = \"drop\") %&gt;%\n  mutate(\n    Region  = factor(Region, levels=c(\"Central\",\"East\",\"North\",\"North-East\",\"West\")),\n    AgeBand = factor(AgeBand, levels=c(paste0(seq(0,85,5), \"-\", seq(4,89,5)), \"90+\"))\n  )\n\np_heat &lt;- ggplot(tile_df, aes(Region, AgeBand, fill=Pop)) +\n  geom_tile(color=\"white\") +\n  scale_fill_viridis_c(name=\"Population\", option=\"C\", labels=comma) +\n  labs(title = \"Singapore Heatmap of Age Population by Region in 2024\") +\n  theme_minimal(base_size=14) +\n  theme(\n    plot.title       = element_text(size=16, face=\"bold\", hjust=0.5),\n    axis.text.x      = element_text(color=\"black\"),\n    axis.text.y      = element_text(color=\"black\"),\n    axis.title.x     = element_blank(),\n    axis.title.y     = element_blank(),\n    panel.grid       = element_blank(),\n    legend.position  = \"right\",\n    legend.justification = \"center\"\n  )\n\n# 3. Stack cohort on top, heatmap below\np_cohort / p_heat +\n  plot_layout(heights=c(1,1))\n\n\n\n\n\n\n\n\n\nCaught between caring for aging parents and raising children, Singapore’s “sandwich generation” faces mounting pressure as 37 dependents fall on every 100 working‑age adults. With 63.1% of residents aged 20–64, these mid‑career adults must support 18.9% young dependents (ages 0–19) and 18.0% elderly dependents (65+), straining both family resources and national social services.\nOur regional heatmap further reveals where this tension is most acute: the Central and North‑East districts not only concentrate the largest cohorts of prime‑age workers (35–44) but also show darker shades in the early senior bands (65–74), indicating dual hotspots of childcare and eldercare demand. In contrast, the North region’s lighter tones across all age bands point to relatively lower service needs there. Addressing the sandwich generation’s unique challenges will require integrated policies by expanding affordable childcare in family‑dense precincts, scaling up eldercare support in senior‑heavy districts, and fostering workplace flexibility to ensure that today’s caregivers are themselves cared for."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#generational-midpoints-by-planning-area-visualising-median-ages",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#generational-midpoints-by-planning-area-visualising-median-ages",
    "title": "Take-home Exercise 1: Phase 1",
    "section": "Generational Midpoints by Planning Area: Visualising Median Ages",
    "text": "Generational Midpoints by Planning Area: Visualising Median Ages\n\n\n\n\n\n\nPlot Approach\n\n\n\nTechnical Approach\nBuilding on our earlier maps and cohort charts, I began by calculating the median age for each Planning Area, split by sex. I then reshaped the results into a “wide” format so each area has two columns, one for female median age and one for male, and ordered the Planning Areas by their overall median (average of the two sexes).\nVisual Rationale\nThis dumbbell plot naturally extends our story from a national dependency load and regional heatmap to the local “midpoints” of each community. By placing female and male medians side by side, we immediately see both overall age trends and sex‑specific gaps: established estates cluster toward the upper end of the age scale, while newer towns remain lower. The consistent purple‑and‑green palette ties back to our earlier rationale in population pyramid. Both horizontal and veritcal grids are added to guide users to link Planning Areas and Median Age. However, it has been kept soft enough to not clutter the plot, especially since the dumbell itself has a line in between the male and female. Ultimately, this chart highlights where generational midpoints and by extension, community needs vary most sharply between men and women, guiding targeted policy and infrastructure decisions at the Planning Area level.\n\n\n\n\nShow code\n# 1. Compute weighted median age by PA & sex\nmed_age &lt;- sgdemo2024 %&gt;%\n  group_by(PA, Sex) %&gt;%\n  summarise(\n    MedAge = matrixStats::weightedMedian(Age, w = Pop),\n    .groups = \"drop\"\n  ) %&gt;%\n  pivot_wider(\n    names_from  = Sex,\n    values_from = MedAge\n  ) %&gt;%\n  rename(Male = Males, Female = Females) %&gt;%\n  arrange((Male + Female) / 2) %&gt;%\n  mutate(PA = factor(PA, levels = PA))\n\n# 2. Plot static dumbbell-like chart with legend on the right\nggplot(med_age, aes(y = PA)) +\n  # a) connecting lines\n  geom_segment(aes(x = Male, xend = Female, yend = PA),\n               color = \"black\", size = 0.5) +\n  # b) male points\n  geom_point(aes(x = Male, color = \"Male\"), size = 4) +\n  # c) female points\n  geom_point(aes(x = Female, color = \"Female\"), size = 4) +\n  # 3. Scale and legend\n  scale_color_manual(\n    values = c(\"Male\" = \"#00C2A1\", \"Female\" = \"#9E00E3\")\n  ) +\n  scale_x_continuous(\n    breaks = seq(0, 55, by = 5),\n    labels = seq(0, 55, by = 5),\n    limits = c(0, 55),\n    expand = c(0, 0)\n  ) +\n  labs(\n    title = \"Singapore Median Age by Sex and Planning Area in 2024\",\n    x     = \"Median Age (years)\",\n    y     = NULL,\n    color = NULL\n  ) +\n  theme_classic(base_size = 14) +\n  theme(\n    plot.title           = element_text(hjust = 0.5, face = \"bold\"),\n    axis.text.x          = element_text(color = \"black\", size = 11),\n    axis.title.x         = element_text(size = 14),\n    axis.text.y          = element_text(color = \"black\", size = 11),\n    panel.grid.major.x   = element_line(color = \"grey90\", size = 0.2),\n    panel.grid.minor.x   = element_line(color = \"grey90\", size = 0.2),\n    panel.grid.major.y   = element_line(color = \"grey90\", size = 0.2),\n    panel.grid.minor.y   = element_line(color = \"grey90\", size = 0.2),\n    legend.position      = \"bottom\",\n    legend.justification = \"top\",\n    legend.text          = element_text(size = 12)\n  )\n\n\n\n\n\n\n\n\n\nBuilding on our dependency‑cohort and regional heatmap analyses, examining the median age across Singapore’s Planning Areas reveals where communities skew younger or older at their cores. Older estates such as Queenstown and Bukit Merah register median ages in the mid 40s, reflecting long‑established neighbourhoods and a higher share of empty‑nesters. In contrast, newer towns like Punggol, Sengkang and Tengah show median ages in the low 30s, driven by young families and recent housing launches. Heartland hubs such as Jurong East and Tampines sit in between, with medians around 36–38 years, capturing both working professionals and a growing elder segment. These median‑age patterns not only mirror the “Sandwich Generation” pressures we identified where mid‑career adults balance dependents on either side of the age spectrum, but also pinpoint where planners must tailor services: youth‑oriented amenities in family‑heavy districts and age‑friendly infrastructure in more mature estates."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#final-words---bridging-generations-tailoring-singapores-communities-for-all-ages",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#final-words---bridging-generations-tailoring-singapores-communities-for-all-ages",
    "title": "Take-home Exercise 1: Phase 1",
    "section": "Final Words - Bridging Generations: Tailoring Singapore’s Communities for All Ages",
    "text": "Final Words - Bridging Generations: Tailoring Singapore’s Communities for All Ages\nTogether, our analysis paints a comprehensive portrait of Singapore’s evolving demographic landscape: declining birth rates have narrowed the population’s base while increased longevity has expanded its apex, leaving 37 dependents, 20 young and 17 elderly for every 100 working‑age adults. Regionally, Central and North‑East districts emerge as dual hotspots of both prime‑age workers and burgeoning senior cohorts, intensifying the “sandwich generation” pressures on mid‑career adults who juggle childcare and eldercare. Across Planning Areas, median ages range from the low 30s in growth towns like Punggol and Tengah to the mid‑40s in mature estates such as Queenstown and Bukit Merah, with notable sex‑specific gaps highlighted in our dumbbell plot. These patterns underscore the urgency of place‑based strategies by expanding affordable childcare in youthful precincts, scaling up geriatric care in senior‑dense districts, and tailoring urban infrastructure to each community’s generational midpoint. By aligning services with these demographic realities, Singapore can ensure that every cohort, young, working‑age and elderly receives the support it needs for a resilient, inclusive future."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Hello there! Welcome to my Visual Analytics portfolio.\nI’m Nor Hendra, A Master of IT in Business student in Singapore Management University."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "In this hands-on exercise, my aim is to learn the basic principles and essential components of ggplot2. I will also be gaining hands-on experience on these components to plot statistical graphics based on the principle of Layered Grammar of Graphics. At the end of this hands-on, I hope to be able to apply the essential graphical elements provided by ggplot2 to create elegant and yet functional statistical graphics."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#install-and-launching-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#install-and-launching-r-packages",
    "title": "Hands-on Exercise 1",
    "section": "2.1 Install and launching R packages",
    "text": "2.1 Install and launching R packages\nThe code chunk below uses p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are, then they will be launched.\n\npacman::p_load(tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-the-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-the-data",
    "title": "Hands-on Exercise 1",
    "section": "2.2 Importing the data",
    "text": "2.2 Importing the data\nBelow code chunks imports the .csv file provided for this hands-on into R environment by using the read_csv() function. The data set contains examination grades scored for different subjects of Primary 3 students.\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#plotting-a-bar-chart-geom_bar",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#plotting-a-bar-chart-geom_bar",
    "title": "Hands-on Exercise 1",
    "section": "4.1 Plotting a bar chart: geom_bar",
    "text": "4.1 Plotting a bar chart: geom_bar\n\nggplot(data= exam_data,\n       aes(x = RACE)) +\n  geom_bar()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#plotting-the-dot-plot-geom_dotplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#plotting-the-dot-plot-geom_dotplot",
    "title": "Hands-on Exercise 1",
    "section": "4.2 Plotting the dot plot: geom_dotplot",
    "text": "4.2 Plotting the dot plot: geom_dotplot\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(dotsize = 0.5)\n\n\n\n\n\n\n\n\n\n4.2.1 Correcting y-scale of above dot plot\nBelow code chunk will perform 2 things:\n\nTurn off y-axis with scale_y_continuous()\nbinwidth argument is used to change the binwidth to 2.5\n\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(binwidth=2.5,         \n               dotsize = 0.5) +      \n  scale_y_continuous(NULL,           \n                     breaks = NULL)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#plotting-a-histogram-geom_histogram",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#plotting-a-histogram-geom_histogram",
    "title": "Hands-on Exercise 1",
    "section": "4.3 Plotting a histogram: geom_histogram()",
    "text": "4.3 Plotting a histogram: geom_histogram()\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_histogram()       \n\n\n\n\n\n\n\n\n\n4.3.1 Modifying bins in histogram\nThe default bin is 30. The code chunk below aims to:\n\nbins argument is used to change the number of bins to 20\nfills argument is to shade the histogram with light blue color, and\ncolor argument is used to change the outline colour of the bars in black\n\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20,            \n                 color=\"black\",      \n                 fill=\"light blue\")  \n\n\n\n\n\n\n\n\n\n\n4.3.2 Providing clarity of data in histogram\nBelow code chunk aims to change the interior colour to clearly distinguish Math scores on the x-axis and uses different fill colors based on student’s gender. Furthermore, it creates a histogram with 20 bins and outlines each bar in grey for better visual distinction.\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           fill = GENDER)) +\n  geom_histogram(bins=20, \n                 color=\"grey30\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#plotting-kernel-density-estimate-geom_density",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#plotting-kernel-density-estimate-geom_density",
    "title": "Hands-on Exercise 1",
    "section": "4.4 Plotting kernel density estimate: geom_density()",
    "text": "4.4 Plotting kernel density estimate: geom_density()\nA kernel density estimate provides a smoothed version of the histogram for continuous data that comes from an underlying smooth distribution.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_density()           \n\n\n\n\n\n\n\n\nWe can also plot two kernel density lines by using colour or fill argument of aes()\n\nggplot(data=exam_data, \n       aes(x = MATHS, \n           colour = GENDER)) +\n  geom_density()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#plotting-a-box-plot-geom_boxplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#plotting-a-box-plot-geom_boxplot",
    "title": "Hands-on Exercise 1",
    "section": "4.5 Plotting a box plot: geom_boxplot()",
    "text": "4.5 Plotting a box plot: geom_boxplot()\nThe code chunk below plots a box plot which displays a continuous value list by visualizing 5 summary statistics (the median, two hinges and two whispers), and all “outlying” points individually.\n\nggplot(data=exam_data, \n       aes(y = MATHS,       \n           x= GENDER)) +    \n  geom_boxplot()            \n\n\n\n\n\n\n\n\n\n4.5.1 Notches in box plots\nThe code chunk below will show notches which are used in box plots to help visually assess whether the medians of distributions differ. If notches do not overlap, it is evidence that the medians are different.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot(notch=TRUE)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#plotting-a-violin-plot-geom_violin",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#plotting-a-violin-plot-geom_violin",
    "title": "Hands-on Exercise 1",
    "section": "4.6 Plotting a violin plot: geom_violin()",
    "text": "4.6 Plotting a violin plot: geom_violin()\nBelow code chunk creates violin plots which are a way of comparing multiple data distribution. With ordinary density curves, it is difficult to compare more than just a few distributions because the lines visually interfere with each other. With a violin plot, it’s easier to compare several distributions since they’re placed side by side.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_violin()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#plotting-a-scatterplot-geom_point-code-chunk-below-creates-a-scatter-plot-showing-the-maths-and-english-grades-of-pupils-by-using-geom_point",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#plotting-a-scatterplot-geom_point-code-chunk-below-creates-a-scatter-plot-showing-the-maths-and-english-grades-of-pupils-by-using-geom_point",
    "title": "Hands-on Exercise 1",
    "section": "4.7 Plotting a scatterplot: geom_point() Code chunk below creates a scatter plot showing the Maths and English grades of pupils by using geom_point()",
    "text": "4.7 Plotting a scatterplot: geom_point() Code chunk below creates a scatter plot showing the Maths and English grades of pupils by using geom_point()\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#combining-scatter-plot-and-box-plot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#combining-scatter-plot-and-box-plot",
    "title": "Hands-on Exercise 1",
    "section": "4.8 Combining scatter plot and box plot",
    "text": "4.8 Combining scatter plot and box plot\nCode chunk below combines box plot and scatter plot. This is to plot the data points on the boxplots.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot() +                    \n  geom_point(position=\"jitter\", \n             size = 0.5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat---the-stat_summary",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat---the-stat_summary",
    "title": "Hands-on Exercise 1",
    "section": "5.1 Working with stat - the stat_summary()",
    "text": "5.1 Working with stat - the stat_summary()\nThe code chunk below adds mean values by using stat_summary() function and overriding the default geom\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom = \"point\",       \n               fun = \"mean\",         \n               colour =\"red\",        \n               size=4)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat---the-geom-method",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat---the-geom-method",
    "title": "Hands-on Exercise 1",
    "section": "5.2 Working with stat - the geom() method",
    "text": "5.2 Working with stat - the geom() method\nThe code chunk below adds mean values by using geom_() function and overriding the default stat.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  geom_point(stat=\"summary\",        \n             fun=\"mean\",           \n             colour=\"red\",          \n             size=4)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#adding-a-best-fit-curve-on-a-scatterplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#adding-a-best-fit-curve-on-a-scatterplot",
    "title": "Hands-on Exercise 1",
    "section": "5.3 Adding a best fit curve on a scatterplot",
    "text": "5.3 Adding a best fit curve on a scatterplot\nThe code chunk below, geom_smooth() is used to plot a best fit curve on the scatter plot\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(size=0.5)\n\n\n\n\n\n\n\n\nThe default smoothing method used is loess and can be overridden as shown below.\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              linewidth=0.5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-facet_warp",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-facet_warp",
    "title": "Hands-on Exercise 1",
    "section": "6.1 Working with facet_warp()",
    "text": "6.1 Working with facet_warp()\nfacet_wrap wraps a 1d sequence of panels into 2d. This is generally a better use of screen space than facet_grid because most displays are roughly rectangular.\nThe code chunk below plots a trellis plot using facet_wrap().\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_wrap(~ CLASS)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#facet_grid-function",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#facet_grid-function",
    "title": "Hands-on Exercise 1",
    "section": "6.2 facet_grid() function",
    "text": "6.2 facet_grid() function\nfacet_grid() forms a matrix of panels defined by row and column faceting variables. It is most useful when you have two discrete variables, and all combinations of the variables exist in the data.\nThe code chunk below plots a trellis plot using facet_grid().\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_grid(~ CLASS)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-coordinate",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-coordinate",
    "title": "Hands-on Exercise 1",
    "section": "7.1 Working with Coordinate",
    "text": "7.1 Working with Coordinate\nThe code chunk below flips the horizontal bar chart into vertical bar chart by using coord_flip()\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#changing-the-y--and-x-axis-range",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#changing-the-y--and-x-axis-range",
    "title": "Hands-on Exercise 1",
    "section": "7.2 Changing the y- and x-axis range",
    "text": "7.2 Changing the y- and x-axis range\nThe scatter plot on the below is slightly misleading because the y-axis and x-axis range are not equal.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, size=0.5)\n\n\n\n\n\n\n\n\nThe code chunk below fixes both the y-axis and x-ais range from 0-100\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-theme-theme_gray",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-theme-theme_gray",
    "title": "Hands-on Exercise 1",
    "section": "8.1 Working with theme: theme_gray()",
    "text": "8.1 Working with theme: theme_gray()\nThe code chunk below plot a horizontal bar chart using theme_gray()\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_gray()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-theme-theme_classic",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-theme-theme_classic",
    "title": "Hands-on Exercise 1",
    "section": "8.2 Working with theme: theme_classic()",
    "text": "8.2 Working with theme: theme_classic()\nA horizontal bar chart plotted using theme_classic()\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_classic()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-theme-theme_miminal",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-theme-theme_miminal",
    "title": "Hands-on Exercise 1",
    "section": "8.3 Working with theme: theme_miminal()",
    "text": "8.3 Working with theme: theme_miminal()\nA horizontal bar chart plotted using theme_minimal()\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#installing-and-launching-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#installing-and-launching-r-packages",
    "title": "Hands-on Exercise 5",
    "section": "2.1 Installing and launching R packages**",
    "text": "2.1 Installing and launching R packages**\nIn this hands-on exercise, four network data modelling and visualisation packages will be installed and launched. They are igraph, tidygraph, ggraph and visNetwork. Beside these four packages, tidyverse and lubridate, an R package specially designed to handle and wrangling time data will be installed and launched too.\nThe code chunk:\n\n\nCode\npacman::p_load(igraph, tidygraph, ggraph, \n               visNetwork, lubridate, clock,\n               tidyverse, graphlayouts, \n               concaveman, ggforce)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#the-data",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#the-data",
    "title": "Hands-on Exercise 5",
    "section": "2.2 The Data",
    "text": "2.2 The Data\nThe data sets used in this hands-on exercise is from an oil exploration and extraction company. There are two data sets. One contains the nodes data and the other contains the edges (also know as link) data.\n\n2.2.1 The edges data\n\nGAStech-email_edges.csv which consists of two weeks of 9063 emails correspondances between 55 employees.\n\n\n\n\n2.2.2 The nodes data\n\nGAStech_email_nodes.csv which consist of the names, department and title of the 55 employees.\n\n\n\n\n2.2.3 Importing network data from files\nIn this step, you will import GAStech_email_node.csv and GAStech_email_edges-v2.csv into RStudio environment by using read_csv() of readr package.\n\n\nCode\nGAStech_nodes &lt;- read_csv(\"data/GAStech_email_node.csv\")\nGAStech_edges &lt;- read_csv(\"data/GAStech_email_edge-v2.csv\")\n\n\n\n\n2.2.3 Reviewing the imported data\n\n\nCode\nglimpse(GAStech_edges)\n\n\nRows: 9,063\nColumns: 8\n$ source      &lt;dbl&gt; 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 26, 26, 26…\n$ target      &lt;dbl&gt; 41, 40, 51, 52, 53, 45, 44, 46, 48, 49, 47, 54, 27, 28, 29…\n$ SentDate    &lt;chr&gt; \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\"…\n$ SentTime    &lt;time&gt; 08:39:00, 08:39:00, 08:58:00, 08:58:00, 08:58:00, 08:58:0…\n$ Subject     &lt;chr&gt; \"GT-SeismicProcessorPro Bug Report\", \"GT-SeismicProcessorP…\n$ MainSubject &lt;chr&gt; \"Work related\", \"Work related\", \"Work related\", \"Work rela…\n$ sourceLabel &lt;chr&gt; \"Sven.Flecha\", \"Sven.Flecha\", \"Kanon.Herrero\", \"Kanon.Herr…\n$ targetLabel &lt;chr&gt; \"Isak.Baza\", \"Lucas.Alcazar\", \"Felix.Resumir\", \"Hideki.Coc…\n\n\n\n\n\n\n\n\nWarning\n\n\n\nThe output report of GAStech_edges above reveals that the SentDate is treated as “Character” data type instead of date data type. This is an error! Before we continue, it is important for us to change the data type of SentDate field back to “Date”” data type.\n\n\n\n\n2.2.4 Wrangling time\nThe code chunkbelow will be used to perform the changes\n\n\nCode\nGAStech_edges &lt;- GAStech_edges %&gt;%\n  mutate(SendDate = dmy(SentDate)) %&gt;%\n  mutate(Weekday = wday(SentDate,\n                        label = TRUE,\n                        abbr = FALSE))\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nboth dmy() and wday() are functions of lubridate package. lubridate is an R package that makes it easier to work with dates and times.\ndmy() transforms the SentDate to Date data type.\nwday() returns the day of the week as a decimal number or an ordered factor if label is TRUE. The argument abbr is FALSE keep the daya spells in full, i.e. Monday. The function will create a new column in the data.frame i.e. Weekday and the output of wday() will save in this newly created field.\nthe values in the Weekday field are in ordinal scale.\n\n\n\n\n\n2.2.5 Reviewing the revised date fields\nTable below shows the data structure of the reformatted GAStech_edges data frame\n\n\nCode\nglimpse(GAStech_edges)\n\n\nRows: 9,063\nColumns: 10\n$ source      &lt;dbl&gt; 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 26, 26, 26…\n$ target      &lt;dbl&gt; 41, 40, 51, 52, 53, 45, 44, 46, 48, 49, 47, 54, 27, 28, 29…\n$ SentDate    &lt;chr&gt; \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\"…\n$ SentTime    &lt;time&gt; 08:39:00, 08:39:00, 08:58:00, 08:58:00, 08:58:00, 08:58:0…\n$ Subject     &lt;chr&gt; \"GT-SeismicProcessorPro Bug Report\", \"GT-SeismicProcessorP…\n$ MainSubject &lt;chr&gt; \"Work related\", \"Work related\", \"Work related\", \"Work rela…\n$ sourceLabel &lt;chr&gt; \"Sven.Flecha\", \"Sven.Flecha\", \"Kanon.Herrero\", \"Kanon.Herr…\n$ targetLabel &lt;chr&gt; \"Isak.Baza\", \"Lucas.Alcazar\", \"Felix.Resumir\", \"Hideki.Coc…\n$ SendDate    &lt;date&gt; 2014-01-06, 2014-01-06, 2014-01-06, 2014-01-06, 2014-01-0…\n$ Weekday     &lt;ord&gt; Friday, Friday, Friday, Friday, Friday, Friday, Friday, Fr…\n\n\n\n\n2.2.6 Wrangling attributes\nA close examination of GAStech_edges data.frame reveals that it consists of individual e-mail flow records. This is not very useful for visualisation.\nIn view of this, we will aggregate the individual by date, senders, receivers, main subject and day of the week.\nThe code chunk:\n\n\nCode\nGAStech_edges_aggregated &lt;- GAStech_edges %&gt;%\n  filter(MainSubject == \"Work related\") %&gt;%\n  group_by(source, target, Weekday) %&gt;%\n    summarise(Weight = n()) %&gt;%\n  filter(source!=target) %&gt;%\n  filter(Weight &gt; 1) %&gt;%\n  ungroup()\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above:\n\n\n\n\nfour functions from dplyr package are used. They are: filter(), group(), summarise(), and ungroup().\nThe output data.frame is called GAStech_edges_aggregated.\nA new field called Weight has been added in GAStech_edges_aggregated.\n\n\n\n\n\n2.2.7 Reviewing the revised edges files\n\n\nCode\nglimpse(GAStech_edges_aggregated)\n\n\nRows: 1,372\nColumns: 4\n$ source  &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ target  &lt;dbl&gt; 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6,…\n$ Weekday &lt;ord&gt; Sunday, Monday, Tuesday, Wednesday, Friday, Sunday, Monday, Tu…\n$ Weight  &lt;int&gt; 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5,…"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#the-tbl_graph-object",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#the-tbl_graph-object",
    "title": "Hands-on Exercise 5",
    "section": "3.1 The tbl_graph object",
    "text": "3.1 The tbl_graph object\nTwo functions of tidygraph package can be used to create network objects, they are:\n\ntbl_graph() creates a tbl_graph network object from nodes and edges data.\nas_tbl_graph() converts network data and objects to a tbl_graph network. Below are network data and objects supported by as_tbl_graph()\n\na node data.frame and an edge data.frame,\ndata.frame, list, matrix from base,\nigraph from igraph,\nnetwork from network,\ndendrogram and hclust from stats,\nNode from data.tree,\nphylo and evonet from ape, and\ngraphNEL, graphAM, graphBAM from graph (in Bioconductor)."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#the-dplyr-verbs-in-tidygraph",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#the-dplyr-verbs-in-tidygraph",
    "title": "Hands-on Exercise 5",
    "section": "3.2 The dplyr verbs in tidygraph",
    "text": "3.2 The dplyr verbs in tidygraph\n\nactivate() verb from tidygraph serves as a switch between tibbles for nodes and edges. All dplyr verbs applied to tbl_graph object are applied to the active tibble.\n\n\n\nIn the above the .N() function is used to gain access to the node data while manipulating the edge data. Similarly .E() will give you the edge data and .G() will give you the tbl_graph object itself."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#using-tbl_graph-to-build-tidygraph-data-model.",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#using-tbl_graph-to-build-tidygraph-data-model.",
    "title": "Hands-on Exercise 5",
    "section": "3.3 Using tbl_graph() to build tidygraph data model.",
    "text": "3.3 Using tbl_graph() to build tidygraph data model.\nIn this section, I will use tbl_graph() of tinygraph package to build an tidygraph’s network graph data.frame.\nBefore typing the codes, I will review to reference guide of tbl_graph()\n\n\nCode\nGAStech_graph &lt;- tbl_graph(nodes = GAStech_nodes,\n                           edges = GAStech_edges_aggregated, \n                           directed = TRUE)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#reviewing-the-output-tidygraphs-graph-object",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#reviewing-the-output-tidygraphs-graph-object",
    "title": "Hands-on Exercise 5",
    "section": "3.4 Reviewing the output tidygraph’s graph object",
    "text": "3.4 Reviewing the output tidygraph’s graph object\n\n\nCode\nGAStech_graph\n\n\n# A tbl_graph: 54 nodes and 1372 edges\n#\n# A directed multigraph with 1 component\n#\n# Node Data: 54 × 4 (active)\n      id label               Department     Title                               \n   &lt;dbl&gt; &lt;chr&gt;               &lt;chr&gt;          &lt;chr&gt;                               \n 1     1 Mat.Bramar          Administration Assistant to CEO                    \n 2     2 Anda.Ribera         Administration Assistant to CFO                    \n 3     3 Rachel.Pantanal     Administration Assistant to CIO                    \n 4     4 Linda.Lagos         Administration Assistant to COO                    \n 5     5 Ruscella.Mies.Haber Administration Assistant to Engineering Group Mana…\n 6     6 Carla.Forluniau     Administration Assistant to IT Group Manager       \n 7     7 Cornelia.Lais       Administration Assistant to Security Group Manager \n 8    44 Kanon.Herrero       Security       Badging Office                      \n 9    45 Varja.Lagos         Security       Badging Office                      \n10    46 Stenig.Fusil        Security       Building Control                    \n# ℹ 44 more rows\n#\n# Edge Data: 1,372 × 4\n   from    to Weekday Weight\n  &lt;int&gt; &lt;int&gt; &lt;ord&gt;    &lt;int&gt;\n1     1     2 Sunday       5\n2     1     2 Monday       2\n3     1     2 Tuesday      3\n# ℹ 1,369 more rows"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#changing-the-active-object",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#changing-the-active-object",
    "title": "Hands-on Exercise 5",
    "section": "3.5 Changing the active object",
    "text": "3.5 Changing the active object\nThe nodes tibble data frame is activated by default, but you can change which tibble data frame is active with the activate() function. Thus, if we wanted to rearrange the rows in the edges tibble to list those with the highest “weight” first, we could use activate() and then arrange().\nFor example,\n\n\nCode\nGAStech_graph %&gt;%\n  activate(edges) %&gt;%\n  arrange(desc(Weight))\n\n\n# A tbl_graph: 54 nodes and 1372 edges\n#\n# A directed multigraph with 1 component\n#\n# Edge Data: 1,372 × 4 (active)\n    from    to Weekday   Weight\n   &lt;int&gt; &lt;int&gt; &lt;ord&gt;      &lt;int&gt;\n 1    40    41 Saturday      13\n 2    41    43 Monday        11\n 3    35    31 Tuesday       10\n 4    40    41 Monday        10\n 5    40    43 Monday        10\n 6    36    32 Sunday         9\n 7    40    43 Saturday       9\n 8    41    40 Monday         9\n 9    19    15 Wednesday      8\n10    35    38 Tuesday        8\n# ℹ 1,362 more rows\n#\n# Node Data: 54 × 4\n     id label           Department     Title           \n  &lt;dbl&gt; &lt;chr&gt;           &lt;chr&gt;          &lt;chr&gt;           \n1     1 Mat.Bramar      Administration Assistant to CEO\n2     2 Anda.Ribera     Administration Assistant to CFO\n3     3 Rachel.Pantanal Administration Assistant to CIO\n# ℹ 51 more rows\n\n\nVisit the reference guide of activate() to find out more about the function."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#plotting-a-basic-network-graph",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#plotting-a-basic-network-graph",
    "title": "Hands-on Exercise 5",
    "section": "4.1 Plotting a basic network graph",
    "text": "4.1 Plotting a basic network graph\nThe code chunk below uses ggraph(), geom-edge_link() and geom_node_point() to plot a network graph by using GAStech_graph. Before your get started, it is advisable to read their respective reference guide at least once.\n\n\nCode\nggraph(GAStech_graph) +\n  geom_edge_link() +\n  geom_node_point()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nThe basic plotting function is ggraph(), which takes the data to be used for the graph and the type of layout desired. Both of the arguments for ggraph() are built around igraph. Therefore, ggraph() can use either an igraph object or a tbl_graph object."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#changing-the-default-network-graph-theme",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#changing-the-default-network-graph-theme",
    "title": "Hands-on Exercise 5",
    "section": "4.2 Changing the default network graph theme",
    "text": "4.2 Changing the default network graph theme\nIn this section, I will use theme_graph() to remove the x and y axes. Before I get started, I will read it’s reference guide at least once.\n\n\nCode\ng &lt;- ggraph(GAStech_graph) + \n  geom_edge_link(aes()) +\n  geom_node_point(aes())\n\ng + theme_graph()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nggraph introduces a special ggplot theme that provides better defaults for network graphs than the normal ggplot defaults. theme_graph(), besides removing axes, grids, and border, changes the font to Arial Narrow (this can be overridden).\nThe ggraph theme can be set for a series of plots with the set_graph_style() command run before the graphs are plotted or by using theme_graph() in the individual plots."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#changing-the-coloring-of-the-plot",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#changing-the-coloring-of-the-plot",
    "title": "Hands-on Exercise 5",
    "section": "4.3 Changing the coloring of the plot",
    "text": "4.3 Changing the coloring of the plot\nFurthermore, theme_graph() makes it easy to change the coloring of the plot.\n\n\nCode\ng &lt;- ggraph(GAStech_graph) + \n  geom_edge_link(aes(colour = 'grey50')) +\n  geom_node_point(aes(colour = 'grey40'))\n\ng + theme_graph(background = 'grey10',\n                text_colour = 'white')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#working-with-ggraphs-layouts",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#working-with-ggraphs-layouts",
    "title": "Hands-on Exercise 5",
    "section": "4.4 Working with ggraph’s layouts",
    "text": "4.4 Working with ggraph’s layouts\nggraph support many layout for standard used, they are: star, circle, nicely (default), dh, gem, graphopt, grid, mds, spahere, randomly, fr, kk, drl and lgl. Figures below and on the right show layouts supported by ggraph()."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#fruchterman-and-reingold-layout",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#fruchterman-and-reingold-layout",
    "title": "Hands-on Exercise 5",
    "section": "4.5 Fruchterman and Reingold layout",
    "text": "4.5 Fruchterman and Reingold layout\nThe code chunks below will be used to plot the network graph using Fruchterman and Reingold layout.\n\n\nCode\ng &lt;- ggraph(GAStech_graph, \n            layout = \"fr\") +\n  geom_edge_link(aes()) +\n  geom_node_point(aes())\n\ng + theme_graph()\n\n\n\n\n\n\n\n\n\nThing to learn from the code chunk above:\n\nlayout argument is used to define the layout to be used."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#modifying-network-nodes",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#modifying-network-nodes",
    "title": "Hands-on Exercise 5",
    "section": "4.6 Modifying network nodes",
    "text": "4.6 Modifying network nodes\nIn this section, you will colour each node by referring to their respective departments.\n\n\nCode\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes()) +\n  geom_node_point(aes(colour = Department, \n                      size = 3))\n\ng + theme_graph()\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunks above:\n\ngeom_node_point is equivalent in functionality to geo_point of ggplot2. It allows for simple plotting of nodes in different shapes, colours and sizes. In the codes chnuks above colour and size are used."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#modifying-edges",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#modifying-edges",
    "title": "Hands-on Exercise 5",
    "section": "4.7 Modifying edges",
    "text": "4.7 Modifying edges\nIn the code chunk below, the thickness of the edges will be mapped with the Weight variable.\n\n\nCode\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") +\n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 3)\n\ng + theme_graph()\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunks above:\n\ngeom_edge_link draws edges in the simplest way - as straight lines between the start and end nodes. But, it can do more that that. In the example above, argument width is used to map the width of the line in proportional to the Weight attribute and argument alpha is used to introduce opacity on the line."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#working-with-facet_edges",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#working-with-facet_edges",
    "title": "Hands-on Exercise 5",
    "section": "5.1 Working with facet_edges()",
    "text": "5.1 Working with facet_edges()\nIn the code chunk below, facet_edges() is used. Before getting started, I will read it’s reference guide at least once.\n\n\nCode\nset_graph_style()\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2)\n\ng + facet_edges(~Weekday)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#themes-of-facet_edges",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#themes-of-facet_edges",
    "title": "Hands-on Exercise 5",
    "section": "5.2 Themes of facet_edges()",
    "text": "5.2 Themes of facet_edges()\nThe code chunk below uses theme() to change the position of the legend\n\n\nCode\nset_graph_style()\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2) +\n  theme(legend.position = 'bottom')\n  \ng + facet_edges(~Weekday)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#a-framed-facet-graph",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#a-framed-facet-graph",
    "title": "Hands-on Exercise 5",
    "section": "5.3 A framed facet graph",
    "text": "5.3 A framed facet graph\nThe code chunk below adds frame to each graph\n\n\nCode\nset_graph_style() \n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2)\n  \ng + facet_edges(~Weekday) +\n  th_foreground(foreground = \"grey80\",  \n                border = TRUE) +\n  theme(legend.position = 'bottom')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#working-with-facet_nodes",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#working-with-facet_nodes",
    "title": "Hands-on Exercise 5",
    "section": "5.4 Working with facet_nodes()",
    "text": "5.4 Working with facet_nodes()\nIn the code chunk below, facet_nodes() is used. Before getting started, I will read it’s reference guide at least once.\n\n\nCode\nset_graph_style()\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2)\n  \ng + facet_nodes(~Department)+\n  th_foreground(foreground = \"grey80\",  \n                border = TRUE) +\n  theme(legend.position = 'bottom')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#computing-centrality-indices",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#computing-centrality-indices",
    "title": "Hands-on Exercise 5",
    "section": "6.1 Computing centrality indices",
    "text": "6.1 Computing centrality indices\nCentrality measures are a collection of statistical indices use to describe the relative important of the actors are to a network. There are four well-known centrality measures, namely: degree, betweenness, closeness and eigenvector. It is beyond the scope of this hands-on exercise to cover the principles and mathematics of these measure here. Students are encouraged to refer to Chapter 7: Actor Prominence of A User’s Guide to Network Analysis in R to gain better understanding of theses network measures.\n\n\nCode\ng &lt;- GAStech_graph %&gt;%\n  mutate(betweenness_centrality = centrality_betweenness()) %&gt;%\n  ggraph(layout = \"fr\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department,\n            size=betweenness_centrality))\ng + theme_graph()\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above:\n\nmutate() of dplyr is used to perform the computation.\nthe algorithm used, on the other hand, is the centrality_betweenness() of tidygraph."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#visualising-network-metrics",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#visualising-network-metrics",
    "title": "Hands-on Exercise 5",
    "section": "6.2 Visualising network metrics",
    "text": "6.2 Visualising network metrics\nIt is important to note that from ggraph v2.0 onward tidygraph algorithms such as centrality measures can be accessed directly in ggraph calls. This means that it is no longer necessary to precompute and store derived node and edge centrality measures on the graph in order to use them in a plot.\n\n\nCode\ng &lt;- GAStech_graph %&gt;%\n  ggraph(layout = \"fr\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department, \n                      size = centrality_betweenness()))\ng + theme_graph()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#visualising-community",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#visualising-community",
    "title": "Hands-on Exercise 5",
    "section": "6.3 Visualising Community",
    "text": "6.3 Visualising Community\ntidygraph package inherits many of the community detection algorithms imbedded into igraph and makes them available to us, including Edge-betweenness (group_edge_betweenness), Leading eigenvector (group_leading_eigen), Fast-greedy (group_fast_greedy), Louvain (group_louvain), Walktrap (group_walktrap), Label propagation (group_label_prop), InfoMAP (group_infomap), Spinglass (group_spinglass), and Optimal (group_optimal). Some community algorithms are designed to take into account direction or weight, while others ignore it. Use this link to find out more about community detection functions provided by tidygraph,\nIn the code chunk below group_edge_betweenness() is used.\n\n\nCode\ng &lt;- GAStech_graph %&gt;%\n  mutate(community = as.factor(\n    group_edge_betweenness(\n      weights = Weight, \n      directed = TRUE))) %&gt;%\n  ggraph(layout = \"fr\") + \n  geom_edge_link(\n    aes(\n      width=Weight), \n    alpha=0.2) +\n  scale_edge_width(\n    range = c(0.1, 5)) +\n  geom_node_point(\n    aes(colour = community))  \n\ng + theme_graph()\n\n\n\n\n\n\n\n\n\nIn order to support effective visual investigation, the community network above has been revised by using geom_mark_hull() of ggforce package.\n\n\nCode\ng &lt;- GAStech_graph %&gt;%\n  activate(nodes) %&gt;%\n  mutate(community = as.factor(\n    group_optimal(weights = Weight)),\n         betweenness_measure = centrality_betweenness()) %&gt;%\n  ggraph(layout = \"fr\") +\n  geom_mark_hull(\n    aes(x, y, \n        group = community, \n        fill = community),  \n    alpha = 0.2,  \n    expand = unit(0.3, \"cm\"),  # Expand\n    radius = unit(0.3, \"cm\")  # Smoothness\n  ) + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(fill = Department,\n                      size = betweenness_measure),\n                      color = \"black\",\n                      shape = 21)\n  \ng + theme_graph()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#data-preparation",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#data-preparation",
    "title": "Hands-on Exercise 5",
    "section": "7.1 Data preparation",
    "text": "7.1 Data preparation\nBefore we can plot the interactive network graph, we need to prepare the data model by using the code chunk below.\n\n\nCode\nGAStech_edges_aggregated &lt;- GAStech_edges %&gt;%\n  left_join(GAStech_nodes, by = c(\"sourceLabel\" = \"label\")) %&gt;%\n  rename(from = id) %&gt;%\n  left_join(GAStech_nodes, by = c(\"targetLabel\" = \"label\")) %&gt;%\n  rename(to = id) %&gt;%\n  filter(MainSubject == \"Work related\") %&gt;%\n  group_by(from, to) %&gt;%\n    summarise(weight = n()) %&gt;%\n  filter(from!=to) %&gt;%\n  filter(weight &gt; 1) %&gt;%\n  ungroup()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#plotting-the-first-interactive-network-graph",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#plotting-the-first-interactive-network-graph",
    "title": "Hands-on Exercise 5",
    "section": "7.2 Plotting the first interactive network graph",
    "text": "7.2 Plotting the first interactive network graph\nThe code chunk below will be used to plot an interactive network graph by using the data prepared.\n\n\nCode\nvisNetwork(GAStech_nodes, \n           GAStech_edges_aggregated)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#working-with-layout",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#working-with-layout",
    "title": "Hands-on Exercise 5",
    "section": "7.3 Working with layout",
    "text": "7.3 Working with layout\nIn the code chunk below, Fruchterman and Reingold layout is used.\n\n\nCode\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#working-with-visual-attributes---edges",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#working-with-visual-attributes---edges",
    "title": "Hands-on Exercise 5",
    "section": "8.1 Working with visual attributes - Edges",
    "text": "8.1 Working with visual attributes - Edges\nIn the code run below visEdges() is used to symbolise the edges.\n- The argument arrows is used to define where to place the arrow.\n- The smooth argument is used to plot the edges using a smooth curve.\n\n\nCode\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visEdges(arrows = \"to\", \n           smooth = list(enabled = TRUE, \n                         type = \"curvedCW\")) %&gt;%\n  visLegend() %&gt;%\n  visLayout(randomSeed = 123)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#interactivity",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#interactivity",
    "title": "Hands-on Exercise 5",
    "section": "8.2 Interactivity",
    "text": "8.2 Interactivity\nIn the code chunk below, visOptions() is used to incorporate interactivity features in the data visualisation.\n\nThe argument highlightNearest highlights nearest when clicking a node.\nThe argument nodesIdSelection adds an id node selection creating an HTML select element.\n\n\n\nCode\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visOptions(highlightNearest = TRUE,\n             nodesIdSelection = TRUE) %&gt;%\n  visLegend() %&gt;%\n  visLayout(randomSeed = 123)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#importing-data",
    "title": "Hands-on Exercise 3A",
    "section": "1.1 Importing Data",
    "text": "1.1 Importing Data\nUsing the same data as hands-on exercise 01 and 02, exam_data.csv is used and will be imported using read_csv() of the readr package.\n\nexam_data &lt;- read_csv((\"data/Exam_data.csv\"), show_col_types = FALSE)\n\n\n\n\n\n\n\nChecking data\n\n\n\nSince it is the same data set as previous hands-on exercises, I will skip checking the data set."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#tooltip-effect-with-tooltip-aesthetic",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#tooltip-effect-with-tooltip-aesthetic",
    "title": "Hands-on Exercise 3A",
    "section": "2.1 Tooltip effect with tooltip aesthetic",
    "text": "2.1 Tooltip effect with tooltip aesthetic\nBelow shows a typical code chunk to plot an interactive statistical graph by using ggiraph package. Notice that the code chunk consists of two parts. First, an ggplot object will be created. Next, girafe() of ggiraph will be used to create an interactive svg object.\nBy hovering the mouse pointer on an data point of interest, the student’s ID will be displayed.\n\nInteractive PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\nNotice that two steps are involved. First, an interactive version of ggplot2 geom (i.e. geom_dotplot_interactive()) will be used to create the basic graph. Then, girafe() will be used to generate an svg object to be displayed on an html page"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#displaying-multiple-information-on-tooltip",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#displaying-multiple-information-on-tooltip",
    "title": "Hands-on Exercise 3A",
    "section": "2.2 Displaying multiple information on tooltip",
    "text": "2.2 Displaying multiple information on tooltip\nThe first three lines of codes in the code chunk create a new field called tooltip. At the same time, it populates text in ID and CLASS fields into the newly created field. Next, this newly created field is used as tooltip field as shown in the code of line 7.\n\nInteractive PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\nexam_data$tooltip &lt;- c(paste0(     \n  \"Name = \", exam_data$ID,         \n  \"\\n Class = \", exam_data$CLASS)) \n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    \n    # Below code line uses the newly created field as a tooltip field\n    aes(tooltip = exam_data$tooltip), \n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#data_id-aesthetic",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#data_id-aesthetic",
    "title": "Hands-on Exercise 3A",
    "section": "3.1 data_id aesthetic",
    "text": "3.1 data_id aesthetic\nCode chunk below shows the second interactive feature of ggiraph, namely data_id.\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\n\n\n\n\n\n\nDefault colour of elements associated with a data_id\n\n\n\nNote that the default value of the hover css is hover_css = “fill:orange;”.\n\n\n\nInteractive PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(           \n    aes(data_id = CLASS),             \n    stackgroups = TRUE,               \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618                      \n)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#styling-hover-effect",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#styling-hover-effect",
    "title": "Hands-on Exercise 3A",
    "section": "3.2 Styling hover effect",
    "text": "3.2 Styling hover effect\nIn the code chunk below, css codes are used to change the highlighting effect.\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\n\n\n\n\n\n\nNote\n\n\n\nNote: Different from previous example, in this example the ccs customisation request are encoded directly.\n\n\n\nInteractive PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#combining-tooltip-and-hover-effect",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#combining-tooltip-and-hover-effect",
    "title": "Hands-on Exercise 3A",
    "section": "3.3 Combining tooltip and hover effect",
    "text": "3.3 Combining tooltip and hover effect\nThere are time that we want to combine tooltip and hover effect on the interactive statistical graph as shown in the code chunk below.\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over. At the same time, the tooltip will show the CLASS.\n\nInteractive PlotThe code\n\n\n\n\n\n\n\n\n\n\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, \n        data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#creating-an-interactive-scatter-plot-plot_ly-method",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#creating-an-interactive-scatter-plot-plot_ly-method",
    "title": "Hands-on Exercise 3A",
    "section": "6.1 Creating an interactive scatter plot: plot_ly() method",
    "text": "6.1 Creating an interactive scatter plot: plot_ly() method\nThe tabset below shows an example a basic interactive plot created by using plot_ly().\n\nInteractive PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\nplot_ly(data = exam_data, \n             x = ~MATHS, \n             y = ~ENGLISH)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#working-with-visual-variable-plot_ly",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#working-with-visual-variable-plot_ly",
    "title": "Hands-on Exercise 3A",
    "section": "6.2 Working with visual variable: plot_ly()",
    "text": "6.2 Working with visual variable: plot_ly()\nIn the code chunk below, color argument is mapped to a qualitative visual variable (i.e. RACE).\nInteractivity: Click the colour symbol on legend\n\nInteractive PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#coordinated-multiple-views-with-plotly",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#coordinated-multiple-views-with-plotly",
    "title": "Hands-on Exercise 3A",
    "section": "7.1 Coordinated Multiple Views with plotly",
    "text": "7.1 Coordinated Multiple Views with plotly\nThe creation of a coordinated linked plot by using plotly involves three steps:\n\nhighlight_key() of plotly package is used as shared data.\ntwo scatterplots will be created by using ggplot2 functions.\nlastly, subplot() of plotly package is used to place them next to each other side-by-side.\n\nThing to learn from the code chunk:\nhighlight_key() simply creates an object of class crosstalk::SharedData. Visit this link to learn more about crosstalk,\n\nInteractive PlotThe Code\n\n\n\n\n\n\n\n\nClick on a data point of one of the scatter plot and see how corresponding point on the other scatterplot is selected.\n\n\n\nd &lt;- highlight_key(exam_data)\np1 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nsubplot(ggplotly(p1),\n        ggplotly(p2))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#interactive-data-table-dt-package",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#interactive-data-table-dt-package",
    "title": "Hands-on Exercise 3A",
    "section": "8.1 Interactive Data Table: DT package",
    "text": "8.1 Interactive Data Table: DT package\n\nA wrapper of the JavaScript Library DataTables\nData objects in R can be rendered as HTML tables using the JavaScript library ‘DataTables’ (typically via R Markdown or Shiny).\n\n\nDT::datatable(exam_data, class= \"compact\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#linked-brushing-crosstalk-method",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#linked-brushing-crosstalk-method",
    "title": "Hands-on Exercise 3A",
    "section": "8.2 Linked brushing: crosstalk method",
    "text": "8.2 Linked brushing: crosstalk method\n\nInteractive PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nd &lt;- highlight_key(exam_data) \np &lt;- ggplot(d, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg &lt;- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n\ncrosstalk::bscols(gg,               \n                  DT::datatable(d), \n                  widths = 5)   \n\nThings to learn from the code chunk:\nhighlight() is a function of plotly package. It sets a variety of options for brushing (i.e., highlighting) multiple plots. These options are primarily designed for linking multiple plotly graphs, and may not behave as expected when linking plotly to another htmlwidget package via crosstalk. In some cases, other htmlwidgets will respect these options, such as persistent selection in leaflet.\nbscols() is a helper function of crosstalk package. It makes it easy to put HTML elements side by side. It can be called directly from the console but is especially designed to work in an R Markdown document. Warning: This will bring in all of Bootstrap!."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex4d.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex4d.html",
    "title": "Hands on Exercise 4D",
    "section": "",
    "text": "Funnel plot is a specially designed data visualisation for conducting unbiased comparison between outlets, stores or business entities. By the end of this hands-on exercise, you will gain hands-on experience on:\n\nplotting funnel plots by using funnelPlotR package,\nplotting static funnel plot by using ggplot2 package, and\nplotting interactive funnel plot by using both plotly R and ggplot2 packages."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex4d.html#installing-and-launching-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex4d.html#installing-and-launching-r-packages",
    "title": "Hands on Exercise 4D",
    "section": "1.1 Installing and Launching R Packages",
    "text": "1.1 Installing and Launching R Packages\nIn this exercise, four R packages will be used. They are:\n\nreadr for importing csv into R.\nFunnelPlotR for creating funnel plot.\nggplot2 for creating funnel plot manually.\nknitr for building static html table.\nplotly for creating interactive funnel plot.\n\n\npacman::p_load(tidyverse, FunnelPlotR, plotly, knitr)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex4d.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex4d.html#importing-data",
    "title": "Hands on Exercise 4D",
    "section": "1.2 Importing Data",
    "text": "1.2 Importing Data\n\ncovid19 &lt;- read_csv(\"data/COVID-19_DKI_Jakarta.csv\") %&gt;%\n  mutate_if(is.character, as.factor)\n\n\nhead(covid19, 5)\n\n# A tibble: 5 × 7\n  `Sub-district ID` City        District `Sub-district` Positive Recovered Death\n              &lt;dbl&gt; &lt;fct&gt;       &lt;fct&gt;    &lt;fct&gt;             &lt;dbl&gt;     &lt;dbl&gt; &lt;dbl&gt;\n1        3172051003 JAKARTA UT… PADEMAN… ANCOL              1776      1691    26\n2        3173041007 JAKARTA BA… TAMBORA  ANGKE              1783      1720    29\n3        3175041005 JAKARTA TI… KRAMAT … BALE KAMBANG       2049      1964    31\n4        3175031003 JAKARTA TI… JATINEG… BALI MESTER         827       797    13\n5        3175101006 JAKARTA TI… CIPAYUNG BAMBU APUS         2866      2792    27\n\n\n\nn_distinct(covid19$City)\n\n[1] 6\n\nn_distinct(covid19$District)\n\n[1] 44\n\nn_distinct(covid19$\"Sub-district\")\n\n[1] 267"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex4d.html#funnelplotr-methods-the-basic-plot",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex4d.html#funnelplotr-methods-the-basic-plot",
    "title": "Hands on Exercise 4D",
    "section": "2.1 FunnelPlotR methods: The basic plot",
    "text": "2.1 FunnelPlotR methods: The basic plot\nThe code chunk below plots a funnel plot. I’ve made it bigger so the ‘control limits’ does not get cut off.\n\nfunnel_plot(\n  .data = covid19,\n  numerator = Positive,\n  denominator = Death,\n  group = `Sub-district`\n) \n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 0 are outliers. \nPlot is adjusted for overdispersion. \n\n\nIn the code chunk above:\n\ngroup in this function is different from the scatterplot. Here, it defines the level of the points to be plotted i.e. Sub-district, District or City. If City is chosen, there are only six data points.\nBy default, data_typeargument is “SR” (stands for standardised Ratio)\nlimit: Plot limits, accepted values are: 95 or 99, corresponding to 95% or 99.8% quantiles of the distribution."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex4d.html#funnelplotr-methods-makeover-1",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex4d.html#funnelplotr-methods-makeover-1",
    "title": "Hands on Exercise 4D",
    "section": "2.2 FunnelPlotR methods: Makeover 1",
    "text": "2.2 FunnelPlotR methods: Makeover 1\nThe code chunk below plots a funnel pot.\n\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`,\n  data_type = \"PR\",     #&lt;&lt;\n  xrange = c(0, 6500),  #&lt;&lt;\n  yrange = c(0, 0.05)   #&lt;&lt;\n)\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex4d.html#funnelplotr-methods-makeover-2",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex4d.html#funnelplotr-methods-makeover-2",
    "title": "Hands on Exercise 4D",
    "section": "2.3 FunnelPlotR methods: Makeover 2",
    "text": "2.3 FunnelPlotR methods: Makeover 2\nThe code chunk below plots a funnel plot.\n\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`,\n  data_type = \"PR\",   \n  xrange = c(0, 6500),  \n  yrange = c(0, 0.05),\n  label = NA,\n  title = \"Cumulative COVID-19 Fatality Rate by Cumulative Total Number of COVID-19 Positive Cases\", #&lt;&lt;           \n  x_label = \"Cumulative COVID-19 Positive Cases\", #&lt;&lt;\n  y_label = \"Cumulative Fatality Rate\"  #&lt;&lt;\n)\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\nThings to learn from the code chunk above.\n\nlabel = NA argument is to removed the default label outliers feature.\ntitle argument is used to add plot title.\nx_label and y_label arguments are used to add/edit x-axis and y-axis titles."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex4d.html#computing-the-basic-derived-fields",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex4d.html#computing-the-basic-derived-fields",
    "title": "Hands on Exercise 4D",
    "section": "3.1 Computing the basic derived fields",
    "text": "3.1 Computing the basic derived fields\nTo plot the funnel plot from scratch, we need to derive cumulative death rate and standard error of cumulative death rate.\n\ndf &lt;- covid19 %&gt;%\n  mutate(rate = Death / Positive) %&gt;%\n  mutate(rate.se = sqrt((rate*(1-rate)) / (Positive))) %&gt;%\n  filter(rate &gt; 0)\n\nNext, the fit.mean is computed by using the code chunk below.\n\nfit.mean &lt;- weighted.mean(df$rate, 1/df$rate.se^2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex4d.html#calculate-lower-and-upper-limits-for-95-and-99.9-ci",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex4d.html#calculate-lower-and-upper-limits-for-95-and-99.9-ci",
    "title": "Hands on Exercise 4D",
    "section": "3.2 Calculate lower and upper limits for 95% and 99.9% CI",
    "text": "3.2 Calculate lower and upper limits for 95% and 99.9% CI\nThe code chunk below is used to compute the lower and upper limits for 95% confidence interval.\n\nnumber.seq &lt;- seq(1, max(df$Positive), 1)\nnumber.ll95 &lt;- fit.mean - 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul95 &lt;- fit.mean + 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ll999 &lt;- fit.mean - 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul999 &lt;- fit.mean + 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \ndfCI &lt;- data.frame(number.ll95, number.ul95, number.ll999, \n                   number.ul999, number.seq, fit.mean)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex4d.html#plotting-a-static-funnel-plot",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex4d.html#plotting-a-static-funnel-plot",
    "title": "Hands on Exercise 4D",
    "section": "3.3 Plotting a static funnel plot",
    "text": "3.3 Plotting a static funnel plot\nIn the code chunk below, ggplot2 functions are used to plot a static funnel plot\n\np &lt;- ggplot(df, aes(x = Positive, y = rate)) +\n  geom_point(aes(label=`Sub-district`), \n             alpha=0.4) +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_hline(data = dfCI, \n             aes(yintercept = fit.mean), \n             size = 0.4, \n             colour = \"grey40\") +\n  coord_cartesian(ylim=c(0,0.05)) +\n  annotate(\"text\", x = 1, y = -0.13, label = \"95%\", size = 3, colour = \"grey40\") + \n  annotate(\"text\", x = 4.5, y = -0.18, label = \"99%\", size = 3, colour = \"grey40\") + \n  ggtitle(\"Cumulative Fatality Rate by Cumulative Number of COVID-19 Cases\") +\n  xlab(\"Cumulative Number of COVID-19 Cases\") + \n  ylab(\"Cumulative Fatality Rate\") +\n  theme_light() +\n  theme(plot.title = element_text(size=12),\n        legend.position = c(0.91,0.85), \n        legend.title = element_text(size=7),\n        legend.text = element_text(size=7),\n        legend.background = element_rect(colour = \"grey60\", linetype = \"dotted\"),\n        legend.key.height = unit(0.3, \"cm\"))\np"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex4d.html#interactive-funnel-plot-plotly-gglplot2",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex4d.html#interactive-funnel-plot-plotly-gglplot2",
    "title": "Hands on Exercise 4D",
    "section": "4 Interactive Funnel Plot: plotly + gglplot2",
    "text": "4 Interactive Funnel Plot: plotly + gglplot2\nThe funnel plot created using ggplot2 functions can be made interactive with ggplotly() of plotly r package.\n\nfp_ggplotly &lt;- ggplotly(p,\n  tooltip = c(\"label\", \n              \"x\", \n              \"y\"))\nfp_ggplotly"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#importing-data",
    "title": "Hands-on Exercise 4B",
    "section": "2.1 Importing Data",
    "text": "2.1 Importing Data\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#how-to-interpret-bayes-factor",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#how-to-interpret-bayes-factor",
    "title": "Hands-on Exercise 4B",
    "section": "4.1 How to interpret Bayes Factor",
    "text": "4.1 How to interpret Bayes Factor\nA Bayes Factor can be any positive number. One of the most common interpretations is this one—first proposed by Harold Jeffereys (1961) and slightly modified by Lee and Wagenmakers in 2013:"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#two-sample-mean-test-ggbetweenstats",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#two-sample-mean-test-ggbetweenstats",
    "title": "Hands-on Exercise 4B",
    "section": "5 Two-sample mean test: ggbetweenstats()",
    "text": "5 Two-sample mean test: ggbetweenstats()\nIn the code chunk below, ggbetweenstats() is used to build a visual for two-sample mean test of Maths scores by gender.\n\nggbetweenstats(\n  data = exam,\n  x = GENDER, \n  y = MATHS,\n  type = \"np\",\n  messages = FALSE\n)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#oneway-anova-test-ggbetweenstats",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#oneway-anova-test-ggbetweenstats",
    "title": "Hands-on Exercise 4B",
    "section": "5.1 Oneway ANOVA Test: ggbetweenstats()",
    "text": "5.1 Oneway ANOVA Test: ggbetweenstats()\nIn the code chunk below, ggbetweenstats() is used to build a visual for One-way ANOVA test on English score by race.\n\nggbetweenstats(\n  data = exam,\n  x = RACE, \n  y = ENGLISH,\n  type = \"p\",\n  mean.ci = TRUE, \n  pairwise.comparisons = TRUE, \n  pairwise.display = \"s\",\n  p.adjust.method = \"fdr\",\n  messages = FALSE\n)\n\n\n\n\n\n\n\n\n\n“ns” → only non-significant\n“s” → only significant\n“all” → everything"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#summary-of-tests---ggbetweenstats",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#summary-of-tests---ggbetweenstats",
    "title": "Hands-on Exercise 4B",
    "section": "5.2 Summary of tests - ggbetweenstats",
    "text": "5.2 Summary of tests - ggbetweenstats"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#significant-test-of-association-dependence",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#significant-test-of-association-dependence",
    "title": "Hands-on Exercise 4B",
    "section": "6.1 Significant Test of Association (Dependence)",
    "text": "6.1 Significant Test of Association (Dependence)\nIn the code chunk below, the Maths scores is binned into a 4-class variable by using cut().\n\nexam1 &lt;- exam %&gt;% \n  mutate(MATHS_bins = \n           cut(MATHS, \n               breaks = c(0,60,75,85,100))\n)\n\nIn this code chunk below ggbarstats() is used to build a visual for Significant Test of Association.\n\nggbarstats(exam1, \n           x = MATHS_bins, \n           y = GENDER)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#installing-and-loading-packages",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#installing-and-loading-packages",
    "title": "Hands on Exercise 4C",
    "section": "2.1 Installing and loading packages",
    "text": "2.1 Installing and loading packages\nFor the purpose of this exercise, the following R packages will be used, they are:\n\ntidyverse, a family of R packages for data science process,\nplotly for creating interactive plot,\ngganimate for creating animation plot,\nDT for displaying interactive html table,\ncrosstalk for for implementing cross-widget interactions (currently, linked brushing and filtering), and\nggdist for visualising distribution and uncertainty.\n\n\npacman::p_load(plotly, crosstalk, DT, \n               ggdist, ggridges, colorspace,\n               gganimate, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#data-import",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#data-import",
    "title": "Hands on Exercise 4C",
    "section": "2.2 Data Import",
    "text": "2.2 Data Import\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#plotting-standard-error-bars-of-point-estimates",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#plotting-standard-error-bars-of-point-estimates",
    "title": "Hands on Exercise 4C",
    "section": "3.1 Plotting standard error bars of point estimates",
    "text": "3.1 Plotting standard error bars of point estimates\nNow we are ready to plot the standard error bars of mean maths score by race as shown below.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=RACE, \n        ymin=mean-se, \n        ymax=mean+se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    linewidth=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  ggtitle(\"Standard error of mean maths score by rac\")\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nThe error bars are computed by using the formula mean+/-se.\nFor geom_point(), it is important to indicate stat=“identity”."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#plotting-confidence-internal-of-point-estimates",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#plotting-confidence-internal-of-point-estimates",
    "title": "Hands on Exercise 4C",
    "section": "3.2 Plotting confidence internal of point estimates",
    "text": "3.2 Plotting confidence internal of point estimates\nInstead of plotting the standard error bar of point estimates, we can also plot the confidence intervals of mean maths score by race.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=reorder(RACE, -mean), \n        ymin=mean-1.96*se, \n        ymax=mean+1.96*se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    linewidth=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  labs(x = \"Maths score\",\n       title = \"95% confidence interval of mean maths score by race\")\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nThe confidence intervals are computed by using the formula mean+/-1.96*se.\nThe error bars is sorted by using the average maths scores.\nlabs() argument of ggplot2 is used to change the x-axis label."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#visualizing-the-uncertainty-of-point-estimates-with-interactive-error-bars",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#visualizing-the-uncertainty-of-point-estimates-with-interactive-error-bars",
    "title": "Hands on Exercise 4C",
    "section": "3.3 Visualizing the uncertainty of point estimates with interactive error bars",
    "text": "3.3 Visualizing the uncertainty of point estimates with interactive error bars\nIn this section, you will learn how to plot interactive error bars for the 99% confidence interval of mean maths score by race as shown in the figure below.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdjustments\n\n\n\nI adjusted the graph to be bigger instead by adjusting the bscols(widths = c(7,4) so that the header doesn’t get cut off and also provide better clarity\n\n\n\n\n\nshared_df = SharedData$new(my_sum)\n\nbscols(widths = c(7,4),\n       ggplotly((ggplot(shared_df) +\n                   geom_errorbar(aes(\n                     x=reorder(RACE, -mean),\n                     ymin=mean-2.58*se, \n                     ymax=mean+2.58*se), \n                     width=0.2, \n                     colour=\"black\", \n                     alpha=0.9, \n                     size=0.5) +\n                   geom_point(aes(\n                     x=RACE, \n                     y=mean, \n                     text = paste(\"Race:\", `RACE`, \n                                  \"&lt;br&gt;N:\", `n`,\n                                  \"&lt;br&gt;Avg. Scores:\", round(mean, digits = 2),\n                                  \"&lt;br&gt;95% CI:[\", \n                                  round((mean-2.58*se), digits = 2), \",\",\n                                  round((mean+2.58*se), digits = 2),\"]\")),\n                     stat=\"identity\", \n                     color=\"red\", \n                     size = 1.5, \n                     alpha=1) + \n                   xlab(\"Race\") + \n                   ylab(\"Average Scores\") + \n                   theme_minimal() + \n                   theme(axis.text.x = element_text(\n                     angle = 45, vjust = 0.5, hjust=1)) +\n                   ggtitle(\"99% Confidence interval of average /&lt;br&gt;maths scores by race\")), \n                tooltip = \"text\"), \n       DT::datatable(shared_df, \n                     rownames = FALSE, \n                     class=\"compact\", \n                     width=\"100%\", \n                     options = list(pageLength = 10,\n                                    scrollX=T), \n                     colnames = c(\"No. of pupils\", \n                                  \"Avg Scores\",\n                                  \"Std Dev\",\n                                  \"Std Error\")) %&gt;%\n         formatRound(columns=c('mean', 'sd', 'se'),\n                     digits=2))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#visualizing-the-uncertainty-of-point-estimates-ggdist-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#visualizing-the-uncertainty-of-point-estimates-ggdist-methods",
    "title": "Hands on Exercise 4C",
    "section": "4.1 Visualizing the uncertainty of point estimates: ggdist methods",
    "text": "4.1 Visualizing the uncertainty of point estimates: ggdist methods\nIn the code chunk below, stat_pointinterval() of ggdist is used to build a visual for displaying distribution of maths scores by race.\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_pointinterval() +\n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-interval plot\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThis function comes with many arguments, students are advised to read the syntax reference for more detail.\n\n\nFor example, in the code chunk below the following arguments are used:\n\n.width = 0.95\n.point = median\n.interval = qi\n\n\nexam %&gt;%\n  ggplot(aes(x = RACE, y = MATHS)) +\n  stat_pointinterval(.width = 0.95,\n  .point = median,\n  .interval = qi) +\n  labs(\n    title = \"Visualising confidence intervals of median math score\",\n    subtitle = \"Median Point + Multiple-interval plot\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#visualizing-the-uncertainty-of-point-estimates-ggdist-methods-1",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#visualizing-the-uncertainty-of-point-estimates-ggdist-methods-1",
    "title": "Hands on Exercise 4C",
    "section": "4.3 Visualizing the uncertainty of point estimates: ggdist methods",
    "text": "4.3 Visualizing the uncertainty of point estimates: ggdist methods\n\nMakeover of previous plot by showing 95% and 99% confidence intervals\n\n\nexam %&gt;%\n  ggplot(aes(x = RACE, y = MATHS)) +\n  stat_pointinterval(\n    .width     = c(.95, .99),\n    size       = 0.6,\n    point_size = 2,\n    aes(color = factor(after_stat(.width)))\n  ) +\n  scale_color_manual(\n    name   = \"Confidence level\",\n    values = c(\"0.95\" = \"#1f77b4\", \"0.99\" = \"#ff7f0e\"),\n    labels = c(\"95% CI\", \"99% CI\")\n  ) +\n  labs(\n    title    = \"Visualising Confidence Intervals of Mean Math Score by Race\",\n    subtitle = \"Point estimate with 95% and 99% CIs\",\n    x        = \"Race\",\n    y        = \"Mean Maths Score\"\n  ) +\n  theme_minimal(base_size = 14) +\n  theme(\n    legend.position = \"top\",\n    axis.title      = element_text(face = \"bold\")\n  )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#installing-and-loading-packages",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#installing-and-loading-packages",
    "title": "Hands-on Exercise 4A",
    "section": "1.1 Installing and Loading Packages",
    "text": "1.1 Installing and Loading Packages\n\npacman::p_load(ggdist, ggridges, ggthemes,\n               colorspace, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#data-import",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#data-import",
    "title": "Hands-on Exercise 4A",
    "section": "1.2 Data Import",
    "text": "1.2 Data Import\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#plotting-ridgeline-graph-ggridges-method",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#plotting-ridgeline-graph-ggridges-method",
    "title": "Hands-on Exercise 4A",
    "section": "2.1 Plotting ridgeline graph: ggridges method",
    "text": "2.1 Plotting ridgeline graph: ggridges method\nThere are several ways to plot ridgeline plot with R. In this section, you will learn how to plot ridgeline plot by using ggridges package.\nggridges package provides two main geom to plot gridgeline plots, they are: geom_ridgeline() and geom_density_ridges(). The former takes height values directly to draw the ridgelines, and the latter first estimates data densities and then draws those using ridgelines.\nThe ridgeline plot below is plotted by using geom_density_ridges().\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"#7097BB\", .3),\n    color = \"white\"\n  ) +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n    ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#varying-fill-colors-along-the-x-axis",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#varying-fill-colors-along-the-x-axis",
    "title": "Hands-on Exercise 4A",
    "section": "2.2 Varying fill colors along the x axis",
    "text": "2.2 Varying fill colors along the x axis\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Temp. [F]\",\n                       option = \"C\") +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#mapping-the-probabilities-directly-onto-colour",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#mapping-the-probabilities-directly-onto-colour",
    "title": "Hands-on Exercise 4A",
    "section": "2.3 Mapping the probabilities directly onto colour",
    "text": "2.3 Mapping the probabilities directly onto colour\nBeside providing additional geom objects to support the need to plot ridgeline plot, ggridges package also provides a stat function called stat_density_ridges() that replaces stat_density() of ggplot2.\nFigure below is plotted by mapping the probabilities calculated by using stat(ecdf) which represent the empirical cumulative density function for the distribution of English score.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = 0.5 - abs(0.5-stat(ecdf)))) +\n  stat_density_ridges(geom = \"density_ridges_gradient\", \n                      calc_ecdf = TRUE) +\n  scale_fill_viridis_c(name = \"Tail probability\",\n                       direction = -1) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nIt is important include the argument calc_ecdf = TRUE in stat_density_ridges()."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#ridgeline-plots-with-quantile-lines",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#ridgeline-plots-with-quantile-lines",
    "title": "Hands-on Exercise 4A",
    "section": "2.4 Ridgeline plots with quantile lines",
    "text": "2.4 Ridgeline plots with quantile lines\nBy using geom_density_ridges_gradient(), we can colour the ridgeline plot by quantile, via the calculated stat(quantile) aesthetic as shown in the figure below.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = 4,\n    quantile_lines = TRUE) +\n  scale_fill_viridis_d(name = \"Quartiles\") +\n  theme_ridges()\n\n\n\n\nInstead of using number to define the quantiles, we can also specify quantiles by cut points such as 2.5% and 97.5% tails to colour the ridgeline plot as shown in the figure below.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = c(0.025, 0.975)\n    ) +\n  scale_fill_manual(\n    name = \"Probability\",\n    values = c(\"#FF0000A0\", \"#A0A0A0A0\", \"#0000FFA0\"),\n    labels = c(\"(0, 0.025]\", \"(0.025, 0.975]\", \"(0.975, 1]\")\n  ) +\n  theme_ridges()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#plotting-a-half-eye-graph",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#plotting-a-half-eye-graph",
    "title": "Hands-on Exercise 4A",
    "section": "3.1 Plotting a Half Eye Graph",
    "text": "3.1 Plotting a Half Eye Graph\nFirst, I will plot a Half-Eye graph by using stat_halfeye() of ggdist package.\nThis produces a Half Eye visualization, which is contains a half-density and a slab-interval.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA)\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\nWe remove the slab interval by setting .width = 0 and point_colour=NA"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#finishing-touch",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#finishing-touch",
    "title": "Hands-on Exercise 4A",
    "section": "3.3 Finishing touch",
    "text": "3.3 Finishing touch\nLastly, coord_flip() of ggplot2 package will be used to flip the raincloud chart horizontally to give it the raincloud appearance. At the same time, theme_economist() of ggthemes package is used to give the raincloud chart a professional publishing standard look.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 1.5) +\n  coord_flip() +\n  theme_economist()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#animating-the-plot",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#animating-the-plot",
    "title": "Hands-on Exercise 4A",
    "section": "4.1 Animating the Plot",
    "text": "4.1 Animating the Plot\n\n\nShow code\nlibrary(readr)\nlibrary(dplyr)\nlibrary(gganimate)\n\n# Import your data\nexam &lt;- read_csv(\"data/Exam_data.csv\")\n\n# Make sure CLASS is a factor (so gganimate can treat each level as a state)\nexam &lt;- exam %&gt;%\n  mutate(CLASS = factor(CLASS))\n\n# Build the animated ridgeline plot\np &lt;- ggplot(exam, \n            aes(x = ENGLISH, \n                y = CLASS, \n                fill = CLASS, \n                group = CLASS)) +\n  geom_density_ridges(\n    scale = 3, \n    alpha = 0.6\n  ) +\n  transition_states(\n    CLASS, \n    transition_length = 2, \n    state_length = 1\n  ) +\n  labs(\n    title = \"Class: {closest_state}\",\n    x = \"English Score\", \n    y = NULL\n  ) +\n  theme_ridges() +\n  enter_fade() + \n  exit_fade()\n\n# Render the animation (adjust nframes and fps as desired)\nanimate(p, nframes = 80, fps = 10)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#stacking-ridges",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#stacking-ridges",
    "title": "Hands-on Exercise 4A",
    "section": "4.2 Stacking ridges",
    "text": "4.2 Stacking ridges\n\n\nShow code\nexam_long &lt;- exam %&gt;%\n  pivot_longer(c(ENGLISH, MATHS), names_to = \"Subject\", values_to = \"Score\")\n\nggplot(exam_long, aes(x = Score, y = Subject, fill = Subject)) +\n  geom_density_ridges(alpha = 0.7, scale = 2) +\n  theme_ridges() +\n  facet_wrap(~CLASS, ncol = 1, scales = \"free_y\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#half-violin-boxplot-dotplot",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#half-violin-boxplot-dotplot",
    "title": "Hands-on Exercise 4A",
    "section": "4.3 Half-Violin, Boxplot + Dotplot?",
    "text": "4.3 Half-Violin, Boxplot + Dotplot?\n\n\nShow code\nggplot(exam, aes(x = CLASS, y = ENGLISH)) +\n  stat_halfeye(\n    aes(fill = CLASS),\n    side         = \"right\",     # use full \"right\"\n    .width       = c(.5, .8),   # 50% & 80% intervals\n    justification = 0.3\n  ) +\n  geom_boxplot(width = 0.15, outlier.shape = NA) +\n  geom_jitter(width = 0.1, size = 1, alpha = 0.6) +\n  coord_flip() +\n  theme_minimal()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#loading-the-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#loading-the-r-packages",
    "title": "Hands-on Exercise 3B",
    "section": "1.1 Loading the R packages",
    "text": "1.1 Loading the R packages\nWe will need below R packages:\n\nplotly, R library for plotting interactive statistical graphs.\ngganimate, an ggplot extension for creating animated statistical graphs.\ngifski converts video frames to GIF animations using pngquant’s fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colors per frame.\ngapminder: An excerpt of the data available at Gapminder.org. We just want to use its country_colors scheme.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\n\n\npacman::p_load(readxl, gifski, gapminder,\n               plotly, gganimate, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#importing-the-data",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#importing-the-data",
    "title": "Hands-on Exercise 3B",
    "section": "1.2 Importing the data",
    "text": "1.2 Importing the data\nThe Data worksheet from GlobalPopulation Excel workbook will be used.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_each_(funs(factor(.)), col) %&gt;%\n  mutate(Year = as.integer(Year))\n\n\n\n\n\n\n\nThings to learn fro the code chunk above\n\n\n\n\nread_xls() of readxl package is used to import the Excel worksheet.\nmutate_each_() of dplyr package is used to convert all character data type into factor.\nmutate of dplyr package is used to convert data values of Year field into integer.\n\n\n\nUnfortunately, mutate_each_() was deprecated in dplyr 0.7.0. and funs() was deprecated in dplyr 0.8.0. In view of this, we will re-write the code by using mutate_at() as shown in the code chunk below.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_at(col, as.factor) %&gt;%\n  mutate(Year = as.integer(Year))\n\nInstead of using mutate_at(), across() can be used to derive the same outputs.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate(across(col, as.factor)) %&gt;%\n  mutate(Year = as.integer(Year))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#building-a-static-population-bubble-plot",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#building-a-static-population-bubble-plot",
    "title": "Hands-on Exercise 3B",
    "section": "2.1 Building a static population bubble plot",
    "text": "2.1 Building a static population bubble plot\nIn the code chunk below, the basic ggplot2 functions are used to create a static bubble plot.\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#building-the-animated-bubble-plot",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#building-the-animated-bubble-plot",
    "title": "Hands-on Exercise 3B",
    "section": "2.2 Building the animated bubble plot",
    "text": "2.2 Building the animated bubble plot\nIn the code chunk below,\n\ntransition_time() of gganimate is used to create transition through distinct states in time (i.e. Year).\nease_aes() is used to control easing of aesthetics. The default is linear. Other methods are: quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.\n\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +       \n  ease_aes('linear')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "EXTRAS"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#installing-and-loading-required-libraries",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#installing-and-loading-required-libraries",
    "title": "Hands-on Exercise 2",
    "section": "1.1 Installing and loading required libraries",
    "text": "1.1 Installing and loading required libraries\nThe code chunk below uses p_load to check if below packages have been installed.\n\nggrepel: an R package provides geoms for ggplot2 to repel overlapping text labels.\nggthemes: an R package provides some extra themes, geoms, and scales for ‘ggplot2’.\nhrbrthemes: an R package provides typography-centric themes and theme components for ggplot2.\npatchwork: an R package for preparing composite figure created using ggplot2.\n\n\npacman::p_load(ggrepel, patchwork, ggthemes, hrbrthemes, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#importing-data",
    "title": "Hands-on Exercise 2",
    "section": "1.2 Importing data",
    "text": "1.2 Importing data\nBelow code chunk imports a data file called exam_data. It consists of year and end examination grades of a cohort of primary 3 students from a local school.\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\", show_col_types = FALSE)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#checking-data",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#checking-data",
    "title": "Hands-on Exercise 2",
    "section": "1.3 Checking data",
    "text": "1.3 Checking data\n\n\n\n\n\n\nClean Data?\n\n\n\nOnly been a week since the last exercise and I am intrigued by what VAA has to offer! After reading a few articles, I found some ways to summarize and check the data. I will try out on this Hands-on Exercise 02’s data set and see if we can find anything interesting.\n\n\n\nSummaryStructureMissing valuesDuplicates\n\n\n\nsummary(exam_data)\n\n      ID               CLASS              GENDER              RACE          \n Length:322         Length:322         Length:322         Length:322        \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n    ENGLISH          MATHS          SCIENCE     \n Min.   :21.00   Min.   : 9.00   Min.   :15.00  \n 1st Qu.:59.00   1st Qu.:58.00   1st Qu.:49.25  \n Median :70.00   Median :74.00   Median :65.00  \n Mean   :67.18   Mean   :69.33   Mean   :61.16  \n 3rd Qu.:78.00   3rd Qu.:85.00   3rd Qu.:74.75  \n Max.   :96.00   Max.   :99.00   Max.   :96.00  \n\n\n\n\n\nstr(exam_data)\n\nspc_tbl_ [322 × 7] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ ID     : chr [1:322] \"Student321\" \"Student305\" \"Student289\" \"Student227\" ...\n $ CLASS  : chr [1:322] \"3I\" \"3I\" \"3H\" \"3F\" ...\n $ GENDER : chr [1:322] \"Male\" \"Female\" \"Male\" \"Male\" ...\n $ RACE   : chr [1:322] \"Malay\" \"Malay\" \"Chinese\" \"Chinese\" ...\n $ ENGLISH: num [1:322] 21 24 26 27 27 31 31 31 33 34 ...\n $ MATHS  : num [1:322] 9 22 16 77 11 16 21 18 19 49 ...\n $ SCIENCE: num [1:322] 15 16 16 31 25 16 25 27 15 37 ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   ID = col_character(),\n  ..   CLASS = col_character(),\n  ..   GENDER = col_character(),\n  ..   RACE = col_character(),\n  ..   ENGLISH = col_double(),\n  ..   MATHS = col_double(),\n  ..   SCIENCE = col_double()\n  .. )\n - attr(*, \"problems\")=&lt;externalptr&gt; \n\n\n\n\n\ncolSums(is.na(exam_data))\n\n     ID   CLASS  GENDER    RACE ENGLISH   MATHS SCIENCE \n      0       0       0       0       0       0       0 \n\nanyNA(exam_data)\n\n[1] FALSE\n\n\n\n\n\nsum(duplicated(exam_data))\n\n[1] 0\n\nexam_data[duplicated(exam_data), ]\n\n# A tibble: 0 × 7\n# ℹ 7 variables: ID &lt;chr&gt;, CLASS &lt;chr&gt;, GENDER &lt;chr&gt;, RACE &lt;chr&gt;,\n#   ENGLISH &lt;dbl&gt;, MATHS &lt;dbl&gt;, SCIENCE &lt;dbl&gt;\n\n\n\n\n\n\n\n\n\n\n\nConclusion\n\n\n\nWe can see that there are no missing values or duplicates. We can conlude data is clean and ready to proceed with plotting!"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-ggrepel",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-ggrepel",
    "title": "Hands-on Exercise 2",
    "section": "2.1 Working with ggrepel",
    "text": "2.1 Working with ggrepel\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label_repel(aes(label = ID), \n                   fontface = \"bold\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n2.1.1 Labelling Outliers\n\n\n\n\n\n\nOutliers\n\n\n\nI was thinking, what if we only wanted to see students who are the outliers? I set the threshold to be &gt;20 to show students that have scores between English and Maths being more than 20. This can help focus on unusual cases where students excel in one subject, but struggle in the other.\n\n\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nexam_data$outlier &lt;- abs(exam_data$ENGLISH - exam_data$MATHS) &gt; 20\n\nggplot(data = exam_data, \n       aes(x = MATHS, y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method = \"lm\", size = 0.5) +\n  geom_text_repel(data = subset(exam_data, outlier == TRUE),\n                  aes(label = ID),\n                  size = 3) +\n  coord_cartesian(xlim = c(0, 100), ylim = c(0, 100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\n\n\n\n\nHigh-performing vs Underperforming students?\n\n\n\nWhat about students who deviate more than the general average? I applied the simple concept of mean and standard deviation. In below case, if student deviates more than 1 SD from the mean, they are labelled instead.\n\n\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Score difference for each student\nexam_data$score_diff &lt;- exam_data$ENGLISH - exam_data$MATHS\n\n# Computing the mean and standard deviation of the differences\nmean_diff &lt;- mean(exam_data$score_diff)\nsd_diff &lt;- sd(exam_data$score_diff)\n\n# Flag as outlier if the score difference deviates more than 1 SD from mean\nexam_data$outlier &lt;- abs(exam_data$score_diff - mean_diff) &gt; sd_diff\n\n# Plot\nggplot(data = exam_data, \n       aes(x = MATHS, y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method = \"lm\", size = 0.5) +\n  geom_text_repel(data = subset(exam_data, outlier == TRUE),\n                  aes(label = ID),\n                  size = 3) +\n  coord_cartesian(xlim = c(0, 100), ylim = c(0, 100)) +\n  ggtitle(\"English vs Maths: Highlighting Students Who Deviate from Class Average\")\n\n\n\n\n\n\n\n\n\n\nFindings\n\n\n\nIt looks like ggrepel is smart enough to know when there’s too many overlaps. In above example, it skipped 50 students to keep things readable. Interesting finding! This tells me that it is no different than the initial issue we had when not using ggrepel. I could perhaps increase overlaps by defining max.overlaps , but that would still clutter the plot."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-ggtheme-package",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-ggtheme-package",
    "title": "Hands-on Exercise 2",
    "section": "3.1 Working with ggtheme package",
    "text": "3.1 Working with ggtheme package\nggthemes provides ‘ggplot2’ themes that replicate the look of plots by Edward Tufte, Stephen Few, Fivethirtyeight, The Economist, ‘Stata’, ‘Excel’, and The Wall Street Journal, among others.\nIn the example below, The Economist theme is used\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_economist() \n\n\n\n\n\n3.1.1 Trying other themes\n\n\n\n\n\n\nCuriosity!\n\n\n\nI wondered how other themes look like, so I used the scatter plot from Hands-on Exercise 01 and experimented with the themes!\n\n\n\nFivethirtyeightSolarizedFewWall Street Journal\n\n\n\nggplot(data = exam_data, \n       aes(x = MATHS, \n           y = ENGLISH, \n           color = GENDER)) +  # Add color aesthetic\n  geom_point() +\n  theme_fivethirtyeight() +\n  ggtitle(\"English and Maths Scores by Gender\")\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = exam_data, \n       aes(x = MATHS, \n           y = ENGLISH, \n           color = GENDER)) +  \n  geom_point() +\n  theme_solarized() +\n  ggtitle(\"English and Maths scores by Gender\")\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = exam_data, \n       aes(x = MATHS, \n           y = ENGLISH, \n           color = GENDER)) +  \n  geom_point() +\n  theme_few() +\n  ggtitle(\"English and Maths scores by Gender\")\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_wsj() +\n  theme(plot.title = element_text(size = 25, face = \"bold\"))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-hrbthems-package",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-hrbthems-package",
    "title": "Hands-on Exercise 2",
    "section": "3.2 Working with hrbthems package",
    "text": "3.2 Working with hrbthems package\nhrbrthemes package provides a base theme that focuses on typographic elements, including where various labels are placed as well as the fonts that are used.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()\n\n\n\n\nThe second goal centers around productivity for a production workflow. In fact, this “production workflow” is the context for where the elements of hrbrthemes should be used.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum(axis_title_size = 18,\n              base_size = 15,\n              grid = \"Y\")\n\n\n\n\n\n\n\n\n\n\nWhat can we learn from the code chunk above?\n\n\n\n\naxis_title_size argument is used to increase the font size of the axis title to 18,\nbase_size argument is used to increase the default axis label to 15, and\ngrid argument is used to remove the x-axis grid lines."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-composite-graphics-pathwork-methods",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-composite-graphics-pathwork-methods",
    "title": "Hands-on Exercise 2",
    "section": "4.1 Creating Composite Graphics: pathwork methods",
    "text": "4.1 Creating Composite Graphics: pathwork methods\nPatchwork package has a very simple syntax where we can create layouts super easily. Here’s the general syntax that combines:\n\nTwo-Column Layout using the Plus Sign +.\nParenthesis () to create a subplot group.\nTwo-Row Layout using the Division Sign /\n\n\n4.1.1 Combining two ggplot2 graphs\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np1 + p2\n\n\n\n\n\n\n4.1.2 Combining three ggplot2 graphs\nPlotting more complex composite using appropriate operations.\n\n“/” operator to stack two ggplot2 graphs,\n“|” operator to place the plots beside each other,\n“()” operator the define the sequence of the plotting.\n\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(p1/p2) | p3\n\n\n\n\n\n\n4.1.3 Creating figure with insert\nUsing inset_element() of patchwork, we can place one or several plots or graphic elements freely on top or below another plot.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)\n\n\n\n\n\n\n4.1.4 Creating a composite figure by using patchwork and ggtheme\nFigure below is created by combining patchwork and theme-economist() of ggthemes package.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npatchwork &lt;- (p1 / p2) | p3\npatchwork & theme_economist()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#importing-packages",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#importing-packages",
    "title": "Hands-on Exercise 6",
    "section": "2.1 Importing Packages",
    "text": "2.1 Importing Packages\n\npacman::p_load(scales, viridis, lubridate, ggthemes,\n               gridExtra, readxl, knitr, data.table,\n               CGPfunctions, ggHoriPlot, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-calendar-heatmap",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-calendar-heatmap",
    "title": "Hands-on Exercise 6",
    "section": "2.2 Plotting Calendar Heatmap",
    "text": "2.2 Plotting Calendar Heatmap\nIn this section, I will learn how to plot a calender heatmap programmatically by using ggplot2 package.\n\nBy the end of this section, you will be able to:\n\nplot a calender heatmap by using ggplot2 functions and extension,\nto write function using R programming,\nto derive specific date and time related field by using base R and lubridate packages\nto perform data preparation task by using tidyr and dplyr packages."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#the-data",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#the-data",
    "title": "Hands-on Exercise 6",
    "section": "2.3 The Data",
    "text": "2.3 The Data\nFor the purpose of this hands-on exercise, eventlog.csv file will be used. This data file consists of 199,999 rows of time-series cyber attack records by country.\n\n2.3.1 Importing the data\n\nattacks &lt;- read_csv(\"data/eventlog.csv\")\n\n\n\n2.3.2 Examining the data structure\nIt is always a good practice to examine the imported data frame before further analysis is performed.\nFor example, kable() can be used to review the structure of the imported data frame.\n\nkable(head(attacks))\n\n\n\n\ntimestamp\nsource_country\ntz\n\n\n\n\n2015-03-12 15:59:16\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:00:48\nFR\nEurope/Paris\n\n\n2015-03-12 16:02:26\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:02:38\nUS\nAmerica/Chicago\n\n\n2015-03-12 16:03:22\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:03:45\nCN\nAsia/Shanghai\n\n\n\n\n\nThere are three columns, namely timestamp, source_country and tz.\n\ntimestamp field stores date-time values in POSIXct format.\nsource_country field stores the source of the attack. It is in ISO 3166-1 alpha-2 country code.\ntz field stores time zone of the source IP address.\n\n\n\n2.3.3 Data Preparation\nStep 1: Deriving weekday and hour of day fields\nBefore we can plot the calender heatmap, two new fields namely wkday and hour need to be derived. In this step, we will write a function to perform the task.\n\nmake_hr_wkday &lt;- function(ts, sc, tz) {\n  real_times &lt;- ymd_hms(ts, \n                        tz = tz[1], \n                        quiet = TRUE)\n  dt &lt;- data.table(source_country = sc,\n                   wkday = weekdays(real_times),\n                   hour = hour(real_times))\n  return(dt)\n  }\n\n\n\n\n\n\n\nNote\n\n\n\n\nymd_hms() and hour() are from lubridate package, and\nweekdays() is a base R function.\n\n\n\nStep 2: Deriving the attacks tibble data frame\n\nwkday_levels &lt;- c('Saturday', 'Friday', \n                  'Thursday', 'Wednesday', \n                  'Tuesday', 'Monday', \n                  'Sunday')\n\nattacks &lt;- attacks %&gt;%\n  group_by(tz) %&gt;%\n  do(make_hr_wkday(.$timestamp, \n                   .$source_country, \n                   .$tz)) %&gt;% \n  ungroup() %&gt;% \n  mutate(wkday = factor(\n    wkday, levels = wkday_levels),\n    hour  = factor(\n      hour, levels = 0:23))\n\n\n\n\n\n\n\nNote\n\n\n\nBeside extracting the necessary data into attacks data frame, mutate() of dplyr package is used to convert wkday and hour fields into factor so they’ll be ordered when plotting\n\n\nTable below shows the tidy tibble table after processing\n\nkable(head(attacks))\n\n\n\n\ntz\nsource_country\nwkday\nhour\n\n\n\n\nAfrica/Cairo\nBG\nSaturday\n20\n\n\nAfrica/Cairo\nTW\nSunday\n6\n\n\nAfrica/Cairo\nTW\nSunday\n8\n\n\nAfrica/Cairo\nCN\nSunday\n11\n\n\nAfrica/Cairo\nUS\nSunday\n15\n\n\nAfrica/Cairo\nCA\nMonday\n11"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-multiple-calendar-heatmaps",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-multiple-calendar-heatmaps",
    "title": "Hands-on Exercise 6",
    "section": "4.1 Plotting Multiple Calendar Heatmaps",
    "text": "4.1 Plotting Multiple Calendar Heatmaps\n\nggplot(top4_attacks, \n       aes(hour, \n           wkday, \n           fill = n)) + \n  geom_tile(color = \"white\", \n          size = 0.1) + \n  theme_tufte(base_family = \"Helvetica\") + \n  coord_equal() +\n  scale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\n  facet_wrap(~source_country, ncol = 2) +\n  labs(x = NULL, y = NULL, \n     title = \"Attacks on top 4 countries by weekday and time of day\") +\n  theme(axis.ticks = element_blank(),\n        axis.text.x = element_text(size = 7),\n        plot.title = element_text(hjust = 0.5),\n        legend.title = element_text(size = 8),\n        legend.text = element_text(size = 6) )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-1-data-import",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-1-data-import",
    "title": "Hands-on Exercise 6",
    "section": "5.1 Step 1: Data Import",
    "text": "5.1 Step 1: Data Import\nFor the purpose of this hands-on exercise, arrivals_by_air.xlsx will be used.\nThe code chunk below imports arrivals_by_air.xlsx by using read_excel() of readxl package and save it as a tibble data frame called air.\n\nair &lt;- read_excel(\"data/arrivals_by_air.xlsx\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-2-deriving-month-and-year-fields",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-2-deriving-month-and-year-fields",
    "title": "Hands-on Exercise 6",
    "section": "5.2 Step 2: Deriving month and year fields",
    "text": "5.2 Step 2: Deriving month and year fields\nNext, two new fields called month and year are derived from Month-Year field.\n\nair$month &lt;- factor(month(air$`Month-Year`), \n                    levels=1:12, \n                    labels=month.abb, \n                    ordered=TRUE) \nair$year &lt;- year(ymd(air$`Month-Year`))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-3-extracting-the-target-country",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-3-extracting-the-target-country",
    "title": "Hands-on Exercise 6",
    "section": "5.3 Step 3: Extracting the target country",
    "text": "5.3 Step 3: Extracting the target country\nNext, the code chunk below is use to extract data for the target country (i.e. Vietnam)\n\nVietnam &lt;- air %&gt;% \n  select(`Vietnam`, \n         month, \n         year) %&gt;%\n  filter(year &gt;= 2010)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-4-computing-year-average-arrivals-by-month",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-4-computing-year-average-arrivals-by-month",
    "title": "Hands-on Exercise 6",
    "section": "5.4 Step 4: Computing year average arrivals by month",
    "text": "5.4 Step 4: Computing year average arrivals by month\nThe code chunk below uses group_by() and summarise() of dplyr to compute year average arrivals by month.\n\nhline.data &lt;- Vietnam %&gt;% \n  group_by(month) %&gt;%\n  summarise(avgvalue = mean(`Vietnam`))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-5-plotting-the-cycle-plot",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-5-plotting-the-cycle-plot",
    "title": "Hands-on Exercise 6",
    "section": "5.5 Step 5: Plotting the cycle plot",
    "text": "5.5 Step 5: Plotting the cycle plot\n\n\n\n\n\n\nSlight modification to code\n\n\n\nThe X-Axis is all squished up in the original cycle plot, I have made some changes to plot it clearly\n\n\n\n# Use existing integer year column\nVietnam$year_num &lt;- Vietnam$year\n\n# Plot\nggplot() + \n  geom_line(data = Vietnam,\n            aes(x = year_num, \n                y = Vietnam, \n                group = month), \n            colour = \"black\") +\n  geom_hline(data = hline.data, \n             aes(yintercept = avgvalue), \n             linetype = 6, \n             colour = \"red\", \n             size = 0.5) + \n  facet_grid(~month) +\n  labs(\n    title = \"Visitor arrivals from Vietnam by air, Jan 2010–Dec 2019\",\n    x = \"\",\n    y = \"No. of Visitors\"\n  ) +\n  theme_tufte(base_family = \"Helvetica\") +\n  theme(\n    axis.text.x = element_blank(),\n    axis.ticks.x = element_blank()\n  )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-1-data-import-1",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-1-data-import-1",
    "title": "Hands-on Exercise 6",
    "section": "6.1 Step 1: Data Import",
    "text": "6.1 Step 1: Data Import\nImport the rice data set into R environment by using the code chunk below:\n\nrice &lt;- read_csv(\"data/rice.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-2-plotting-the-slopegraph",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-2-plotting-the-slopegraph",
    "title": "Hands-on Exercise 6",
    "section": "6.2 Step 2: Plotting the slopegraph",
    "text": "6.2 Step 2: Plotting the slopegraph\n\n\nCode\nrice %&gt;% \n  mutate(Year = factor(Year)) %&gt;%\n  filter(Year %in% c(1961, 1980)) %&gt;%\n  newggslopegraph(Year, Yield, Country,\n                Title = \"Rice Yield of Top 11 Asian Counties\",\n                SubTitle = \"1961-1980\",\n                Caption = \"Prepared by: Nor Hendra\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThing to learn from the code chunk above\n\n\n\nFor effective data visualisation design, factor() is used convert the value type of Year field from numeric to factor."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#bumpcharts-in-r",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#bumpcharts-in-r",
    "title": "Hands-on Exercise 6",
    "section": "6.3.5 BumpCharts in R",
    "text": "6.3.5 BumpCharts in R\n\n\nCode\nrice %&gt;% \n  mutate(Year = factor(Year)) %&gt;%\n  filter(Year %in% c(2005, 2006, 2007, 2008, 2009, 2010)) %&gt;%\n  ggplot(aes(x = Year,\n         y = Yield,\n         color = Country))+\n  geom_point(color = \"#FFFFFF\", size = 1) +\n  ggbump::geom_bump(mapping=aes(x = Year,\n                                y = Yield, \n                                group = Country\n                                ))+\n  labs(title = \"Rice Yield of Top 11 Asian Countries\") +  \n  theme_minimal()+\n  theme(\n        plot.background = element_rect(fill = \"#f5f5f5\", color = \"#f5f2f5\"),\n        panel.background = element_rect(fill=\"#f5f5f5\"))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#linecolour",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#linecolour",
    "title": "Hands-on Exercise 6",
    "section": "6.3.6 LineColour",
    "text": "6.3.6 LineColour\n\n\nCode\nrice %&gt;% \n  mutate(Year = factor(Year)) %&gt;%\n  filter(Year %in% c(2005, 2006, 2007, 2008, 2009, 2010)) %&gt;%\n  newggslopegraph(Year, Yield, Country,\n                Title = \"Rice Yield of Top 11 Asian Countries\",\n                SubTitle = \"2005 to 2010\",\n                Caption = NULL,\n                LineColor = c(\"Korea\" = \"#e0218a\", \"Thailand\" = \"#FFBC2F\"),\n                DataLabelFillColor = \"#f5f5f5\",) +\n    theme(\n        plot.background = element_rect(fill = \"#f5f5f5\", color = \"#f5f2f5\"),\n        panel.background = element_rect(fill=\"#f5f5f5\")\n      )"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Visual Analytics and Applications",
    "section": "",
    "text": "Welcome to ISSS608 Visual Analytics and Applications. In this website, you will find my coursework prepared for this course."
  },
  {
    "objectID": "index.html#latest-posts",
    "href": "index.html#latest-posts",
    "title": "Visual Analytics and Applications",
    "section": "Latest Posts",
    "text": "Latest Posts"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01p2.html",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01p2.html",
    "title": "Take-home Exercise 1: Phase 2",
    "section": "",
    "text": "In Phase 1 of Take-home Exercise 1, we were tasked to prepare and design data visualisation for the article. The data we used was the Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex, June 2024 available on Singstat. In this phase 2, I will be selecting a fellow classmate to critic three good design principles and three areas for further improvement.\n\n\n\n\n\n\nPURPOSE\n\n\n\nI hope the audience is able to appreciate how I have provided the step by step code to see how the plot evolves and why I made each change. My goal is to take you through my thought process for every improvement and show how each tweak builds towards the polished final visualization without changing too much of the main skeleton of the original author’s code."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01p2.html#importing-packages",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01p2.html#importing-packages",
    "title": "Take-home Exercise 1: Phase 2",
    "section": "2.1 Importing Packages",
    "text": "2.1 Importing Packages\n\n\nShow code\npacman::p_load(tidyverse, readxl, ggplot2, ggthemes, dplyr, scales,forcats, ggplot)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01p2.html#data-loading-and-cleaning-for-plotting",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01p2.html#data-loading-and-cleaning-for-plotting",
    "title": "Take-home Exercise 1: Phase 2",
    "section": "2.2 Data Loading and Cleaning for Plotting",
    "text": "2.2 Data Loading and Cleaning for Plotting\nI will be doing the same steps I did in phase 1 to clean the data before proceeding. Skip ahead to get to the main task.\n\n\nShow code\nsgdemo2024 &lt;- read_csv((\"data/respopagesex2024.csv\"), show_col_types = FALSE)\n\n\n\n2.2.1 Converting Sex to a factor with the correct order\n\n\nShow code\nsgdemo2024 &lt;- sgdemo2024 %&gt;%\n  mutate(\n    Sex = factor(Sex, levels = c(\"Males\", \"Females\"))\n  )\n\n\n\n\n2.2.2 Count missing values by column\n\n\nShow code\n#Check for missing values and confirm none\nmissing_counts &lt;- sgdemo2024 %&gt;% \n  summarise_all(~ sum(is.na(.)))\n\nif (all(unlist(missing_counts) == 0)) {\n  cat(\"✅ No missing values, proceed to the next check\\n\")\n} else {\n  warning(\"⚠️ Missing values detected:\")\n  print(missing_counts)\n}\n\n\n✅ No missing values, proceed to the next check\n\n\n\n\n2.2.3 Checking for any duplicates\n\n\nShow code\ndup_count &lt;- sum(duplicated(sgdemo2024))\n\nif (dup_count == 0) {\n  cat(\"✅ No duplicates, on to the next!\\n\")\n} else {\n  warning(\"⚠️ Found duplicate rows:\")\n  print(sgdemo2024[duplicated(sgdemo2024), ])\n}\n\n\n✅ No duplicates, on to the next!\n\n\n\n\n2.2.4 Ensure population is strictly positive\nStep 1: Checking for zero-population rows.\n\n\nShow code\n# 1. Check for zero-population rows\nzero_rows &lt;- sgdemo2024 %&gt;% \n  filter(Pop == 0)\n\nif (nrow(zero_rows) &gt; 0) {\n  cat(\"⚠️ Found\", nrow(zero_rows), \"rows with Pop == 0 (empty demographic cells):\\n\")\n  print(head(zero_rows))    # show a few examples\n} else {\n  cat(\"✅ No zero‐population rows found.\\n\")\n}\n\n\n⚠️ Found 23181 rows with Pop == 0 (empty demographic cells):\n# A tibble: 6 × 6\n  PA         SZ                     Age   Sex       Pop  Time\n  &lt;chr&gt;      &lt;chr&gt;                  &lt;chr&gt; &lt;fct&gt;   &lt;dbl&gt; &lt;dbl&gt;\n1 Ang Mo Kio Ang Mo Kio Town Centre 80    Males       0  2024\n2 Ang Mo Kio Ang Mo Kio Town Centre 86    Males       0  2024\n3 Ang Mo Kio Ang Mo Kio Town Centre 86    Females     0  2024\n4 Ang Mo Kio Ang Mo Kio Town Centre 88    Males       0  2024\n5 Ang Mo Kio Ang Mo Kio Town Centre 89    Males       0  2024\n6 Ang Mo Kio Ang Mo Kio Town Centre 89    Females     0  2024\n\n\nStep 2: Removing those zero-population rows.\n\n\nShow code\n# 2. Remove all zero‐population rows\nsgdemo2024 &lt;- sgdemo2024 %&gt;% \n  filter(Pop &gt; 0)\n\n\nStep 3: Confirm that all rows with zero-population has been removed.\n\n\nShow code\n#Confirm removal\nif (sum(sgdemo2024$Pop == 0) == 0) {\n  cat(\"✅ All zero‐population rows removed. Data is now focused on actual residents.\\n\")\n}\n\n\n✅ All zero‐population rows removed. Data is now focused on actual residents.\n\n\n\n\n2.2.5 Check Age Range & Filter to Plausible Values\nStep 1: Convert the ‘90 & Over’ to integers.\n\n\nShow code\n# 1. Inspect column names to confirm they match expectations\nprint(colnames(sgdemo2024))\n\n\n[1] \"PA\"   \"SZ\"   \"Age\"  \"Sex\"  \"Pop\"  \"Time\"\n\n\nShow code\n# 2. Convert \"Age\" → numeric, mapping \"90 & Over\" → 90\nsgdemo2024 &lt;- sgdemo2024 %&gt;%\n  mutate(\n    Age = parse_number(as.character(Age)),  \n    Age = as.integer(Age)                   \n  )\n\n# 3. Verify the transformation\nage_stats &lt;- sgdemo2024 %&gt;%\n  summarise(\n    min_age = min(Age, na.rm = TRUE),\n    max_age = max(Age, na.rm = TRUE)\n  )\n\ncat(sprintf(\n  \"✅ Age conversion complete: now an integer from %d to %d.\\n\",\n  age_stats$min_age, age_stats$max_age\n))\n\n\n✅ Age conversion complete: now an integer from 0 to 90.\n\n\nStep 2: Confirm that there are no more “90 & Over” entries in my data.\n\n\nShow code\nsum(sgdemo2024$Age == \"90 & Over\")\n\n\n[1] 0\n\n\nStep 3: Confirm the column type for Age is integer.\n\n\nShow code\ncat(\"Age column type:\", class(sgdemo2024$Age), \"\\n\")\n\n\nAge column type: integer \n\n\nStep 4: Ensure no NA in the column for Age.\n\n\nShow code\nna_count &lt;- sum(is.na(sgdemo2024$Age))\ncat(\"Number of NA in Age after parsing:\", na_count, \"\\n\")\n\n\nNumber of NA in Age after parsing: 0 \n\n\n\n\n2.2.6 Confirm Sex Factor Levels\n\n\nShow code\n# 1. Count subzone‐level totals (SZ == \"Total\")\nn_sz_total &lt;- sum(sgdemo2024$SZ == \"Total\", na.rm = TRUE)\ncat(\"Rows with SZ == \\\"Total\\\":\", n_sz_total, \"\\n\")\n\n\nRows with SZ == \"Total\": 0 \n\n\nShow code\n# 2. Count any Age == NA (originally \"Total\")\nn_age_na &lt;- sum(is.na(sgdemo2024$Age))\ncat(\"Rows with Age == NA (was \\\"Total\\\"):\", n_age_na, \"\\n\")\n\n\nRows with Age == NA (was \"Total\"): 0 \n\n\nShow code\n# 3. Count any Sex == \"Total\"\nn_sex_total &lt;- sum(as.character(sgdemo2024$Sex) == \"Total\", na.rm = TRUE)\ncat(\"Rows with Sex == \\\"Total\\\":\", n_sex_total, \"\\n\\n\")\n\n\nRows with Sex == \"Total\": 0 \n\n\nShow code\n# 4. If any totals remain, peek at them\nif (n_sz_total + n_age_na + n_sex_total &gt; 0) {\n  cat(\"⚠️ Example summary‐row(s):\\n\")\n  sgdemo2024 %&gt;%\n    filter(\n      SZ == \"Total\" |\n      is.na(Age)    |\n      as.character(Sex) == \"Total\"\n    ) %&gt;%\n    slice_head(n = 5) %&gt;%\n    print()\n} else {\n  cat(\"✅ No summary‐row entries remain. You’re all set.\\n\")\n}\n\n\n✅ No summary‐row entries remain. You’re all set.\n\n\n\n\nShow code\n# Define the expected order\nexpected_levels &lt;- c(\"Males\", \"Females\")\n\n# Inspect the current factor levels\nactual_levels &lt;- levels(sgdemo2024$Sex)\ncat(\"Current Sex levels:\", paste(actual_levels, collapse = \", \"), \"\\n\")\n\n\nCurrent Sex levels: Males, Females \n\n\nShow code\n# Compare and act\nif (identical(actual_levels, expected_levels)) {\n  cat(\"✅ Sex factor levels are already correct (Males, Females).\\n\")\n} else {\n  warning(\"⚠️ Sex factor levels are not as expected. Resetting to Males, Females.\")\n  sgdemo2024 &lt;- sgdemo2024 %&gt;%\n    mutate(Sex = factor(Sex, levels = expected_levels))\n  cat(\"✅ Sex factor levels have been reset to:\", \n      paste(levels(sgdemo2024$Sex), collapse = \", \"), \"\\n\")\n}\n\n\n✅ Sex factor levels are already correct (Males, Females).\n\n\n\n\n2.2.7 Checking for any ‘Total’ in Columns and Final Checks\n\n\nShow code\n# 1. Count subzone‐level totals (SZ == \"Total\")\nn_sz_total &lt;- sum(sgdemo2024$SZ == \"Total\", na.rm = TRUE)\ncat(\"Rows with SZ == \\\"Total\\\":\", n_sz_total, \"\\n\")\n\n\nRows with SZ == \"Total\": 0 \n\n\nShow code\n# 2. Count any Age == NA (originally \"Total\")\nn_age_na &lt;- sum(is.na(sgdemo2024$Age))\ncat(\"Rows with Age == NA (was \\\"Total\\\"):\", n_age_na, \"\\n\")\n\n\nRows with Age == NA (was \"Total\"): 0 \n\n\nShow code\n# 3. Count any Sex == \"Total\"\nn_sex_total &lt;- sum(as.character(sgdemo2024$Sex) == \"Total\", na.rm = TRUE)\ncat(\"Rows with Sex == \\\"Total\\\":\", n_sex_total, \"\\n\\n\")\n\n\nRows with Sex == \"Total\": 0 \n\n\nShow code\n# 4. If any totals remain, peek at them\nif (n_sz_total + n_age_na + n_sex_total &gt; 0) {\n  cat(\"⚠️ Example summary‐row(s):\\n\")\n  sgdemo2024 %&gt;%\n    filter(\n      SZ == \"Total\" |\n      is.na(Age)    |\n      as.character(Sex) == \"Total\"\n    ) %&gt;%\n    slice_head(n = 5) %&gt;%\n    print()\n} else {\n  cat(\"✅ No summary‐row entries remain. You’re all set.\\n\")\n}\n\n\n✅ No summary‐row entries remain. You’re all set."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01p2.html#population-pyramid",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01p2.html#population-pyramid",
    "title": "Take-home Exercise 1: Phase 2",
    "section": "3.1 Population Pyramid",
    "text": "3.1 Population Pyramid\n\n\n\n\n\n\nRewriting code\n\n\n\nI had to rewrite the earlier stages of the code before plotting the pyramid as I have cleaned and renamed my data. Below is a comparison from a screenshot of the plot and the plot I created based off his code. Although there are slight differences in code, the overall aesthetic and function of the plot remains the same.\n\n\n\nClassmate’s PlotClassmate’s CodeDuplicated PlotThe Code (Alternate Version)\n\n\n\n\n\n\npyramid_data &lt;- aggregate(Pop ~ `AG` + Sex, data = Resident_Data, sum)\n\nage_order &lt;- c(\"0_to_4\", \"5_to_9\", \"10_to_14\", \"15_to_19\", \"20_to_24\", \"25_to_29\", \n               \"30_to_34\", \"35_to_39\", \"40_to_44\", \"45_to_49\", \"50_to_54\", \"55_to_59\", \n               \"60_to_64\", \"65_to_69\", \"70_to_74\", \"75_to_79\", \"80_to_84\", \"85_to_89\", \n               \"90_and_over\")\n\npyramid_data$AG &lt;- factor(pyramid_data$AG, levels = age_order)\n\npyramid_data$Pop[pyramid_data$Sex == \"Males\"] &lt;- -pyramid_data$Pop[pyramid_data$Sex == \"Males\"]\n\nggplot(data = pyramid_data, aes(x = AG, y = Pop, fill = Sex)) +\n  geom_bar(stat = \"identity\") +\n  coord_flip() +\n  labs(title = \"Population Pyramid (2024)\", x = \"Age Group\", y = \"Population\") +\n  scale_y_continuous(labels = comma) +\n  scale_fill_manual(values = c(\"skyblue\", \"salmon\")) + \n  theme_minimal() +\n  theme(axis.text.y = element_text(size = 10))  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsgdemo2024 &lt;- sgdemo2024 %&gt;% \n  mutate(Age = as.numeric(as.character(Age)))\n\nage_order &lt;- c(\n  \"0_to_4\", \"5_to_9\",  \"10_to_14\", \"15_to_19\", \"20_to_24\", \"25_to_29\",\n  \"30_to_34\",\"35_to_39\",\"40_to_44\", \"45_to_49\", \"50_to_54\", \"55_to_59\",\n  \"60_to_64\",\"65_to_69\",\"70_to_74\", \"75_to_79\", \"80_to_84\", \"85_to_89\",\n  \"90_and_over\"\n)\n\nsgdemo2024 &lt;- sgdemo2024 %&gt;%\n  mutate(\n    AG = cut(\n      Age,\n      breaks = c(seq(0, 90, by = 5), Inf),\n      right  = FALSE,\n      labels = age_order\n    ),\n    AG = fct_explicit_na(AG, na_level = \"90_and_over\")\n  )\n\npyramid_data &lt;- sgdemo2024 %&gt;%\n  group_by(AG, Sex) %&gt;%\n  summarise(Pop = sum(Pop), .groups = \"drop\") %&gt;%\n  mutate(Pop = if_else(Sex == \"Males\", -Pop, Pop))\n\nggplot(pyramid_data, aes(x = AG, y = Pop, fill = Sex)) +\n  geom_col(width = 0.8) +\n  coord_flip() +\n  scale_y_continuous(labels = comma) +\n  scale_fill_manual(\n    values = c(\n      Males   = \"salmon\",\n      Females = \"skyblue\"\n    )\n  ) +\n  labs(\n    title = \"Population Pyramid (2024)\",\n    x     = \"Age Group\",\n    y     = \"Population\"\n  ) +\n  theme_minimal() +\n  theme(\n    axis.text.y        = element_text(size = 10)\n  )"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01p2.html#three-good-design-principles",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01p2.html#three-good-design-principles",
    "title": "Take-home Exercise 1: Phase 2",
    "section": "3.2 Three Good Design Principles",
    "text": "3.2 Three Good Design Principles\n\nSymmetric, Diverging Bars for Easy Comparison\nBy plotting males on the left and females on the right, with a shared zero-center. I am able to instantly compare cohort sizes across the aisle. The mirror layout makes it easy to see at a glance which age groups are male or female dominated and by roughly how much.\nOrdered, Evenly-Spaced Age Bands\nThe age groups run in a logical 5 year increment from bottom to top and they remain evenly spaced and sorted. This consistent ordering prevents cognitive load where viewers don’t have to hunt for a specific age group, for example the “20 to 24” in the middle of the chart. This also helps make trends (e.g. the bulge in middle ages) pop out immediately\nClean and Minimalist Theme with Gridlines\nThe light gridlines behind the bars gives you just enough reference to read values off the axis, without cluttering the visual."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01p2.html#areas-of-improvement",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01p2.html#areas-of-improvement",
    "title": "Take-home Exercise 1: Phase 2",
    "section": "3.3 Areas of Improvement",
    "text": "3.3 Areas of Improvement\n\nAbove is the four quadrants of clarity and aesthetic and based on the good design principles I found outlined previously, I would put this in Quadrant IV - beautiful but confusing.\n\nThe areas highlighted in red on the figure above are aspects I have some gripes with. The reason I said it is beautiful but confusing is because of the X-Axis and Y-Axis. The X-Axis indicating population shows value -100,000 to 100,000 - there is no such thing as a negative population (unless of course we are comparing those who aren’t alive anymore). Furthermore, the Y-Axis (age bands) has underscores in between the age. This can be indeed a little off-putting on a plot Ideally, it should just be the age bands without any underscores in between.\n\n3.3.1 Improvement 1 - Fixing the Y-Axis\nLet’s first work on renaming the age binning of the code to be without underscores. It would like something like below to replace the underscores.\n\n# Apply binning and label cleanup\nsgdemo2024 &lt;- sgdemo2024 %&gt;%\n  mutate(\n    AG = cut(Age, breaks = c(seq(0, 90, by = 5), Inf), right = FALSE, labels = age_order),\n    AG = fct_explicit_na(AG, na_level = \"90_and_over\"),\n    AG = gsub(\"_to_\", \"-\", AG),\n    AG = gsub(\"_and_over\", \"+\", AG),\n    AG = factor(AG, levels = gsub(\"_to_\", \"-\", gsub(\"_and_over\", \"+\", age_order)))\n  )\n\nPutting it Together - Plot after Improvement 1\n\n\nShow code\nage_order &lt;- c(\n  \"0 to 4\", \"5 to 9\",  \"10 to 14\", \"15 to 19\", \"20 to 24\", \"25 to 29\",\n  \"30 to 34\",\"35 to 39\",\"40 to 44\", \"45 to 49\", \"50 to 54\", \"55 to 59\",\n  \"60 to 64\",\"65 to 69\",\"70 to 74\", \"75 to 79\", \"80 to 84\", \"85 to 89\",\n  \"90+\"\n)\n\nsgdemo2024 &lt;- sgdemo2024 %&gt;%\n  mutate(\n    AG = cut(Age, breaks = c(seq(0, 90, by = 5), Inf), right = FALSE, labels = age_order),\n    AG = fct_explicit_na(AG, na_level = \"90_and_over\"),\n    AG = gsub(\"_to_\", \"-\", AG),\n    AG = gsub(\"_and_over\", \"+\", AG),\n    AG = factor(AG, levels = gsub(\"_to_\", \"-\", gsub(\"_and_over\", \"+\", age_order)))\n  )\n\npyramid_data &lt;- sgdemo2024 %&gt;%\n  group_by(AG, Sex) %&gt;%\n  summarise(Pop = sum(Pop), .groups = \"drop\") %&gt;%\n  mutate(Pop = if_else(Sex == \"Males\", -Pop, Pop))\n\nggplot(pyramid_data, aes(x = AG, y = Pop, fill = Sex)) +\n  geom_col(width = 0.8) +\n  coord_flip() +\n  scale_y_continuous(labels = comma) +\n  scale_fill_manual(\n    values = c(\n      Males   = \"salmon\",\n      Females = \"skyblue\"\n    )\n  ) +\n  labs(\n    title = \"Population Pyramid (2024)\",\n    x     = \"Age Group\",\n    y     = \"Population\"\n  ) +\n  theme_minimal() +\n  theme(\n    axis.text.y        = element_text(size = 10)\n  )\n\n\n\n\n\n\n\n\n\n\n\n3.3.2 Improvement 2 - Fixing the X-Axis\nNext, let’s fix the X-Axis by ensuring it is positive both ways and in 20,000 increments with below code. The top one would be to fix the negative population and the bottom to aggregate them to 20,000 incremental bins.\n\n# Aggregate and prepare data\npyramid_data &lt;- sgdemo2024 %&gt;%\n  group_by(AG, Sex) %&gt;%\n  summarise(Pop = sum(Pop), .groups = \"drop\") %&gt;%\n  mutate(Pop = if_else(Sex == \"Males\", -Pop, Pop))\n\n# Determine max for 20k axis break\nmax_pop &lt;- ceiling(max(abs(pyramid_data$Pop)) / 20000) * 20000\n\nI will also ensure it limits the plot to just 180000 and stop there to prevent extra grids showing up using below code chunk\n\nscale_y_continuous(\n  limits = c(-180000, 180000) / 1000,\n  breaks = seq(-180000, 180000, by = 20000) / 1000,\n  labels = function(x) abs(x),\n  expand = c(0, 0)\n)\n\nPutting it Together - Plot after Improvement 2\n\n\nShow code\nage_order &lt;- c(\n  \"0 to 4\", \"5 to 9\",  \"10 to 14\", \"15 to 19\", \"20 to 24\", \"25 to 29\",\n  \"30 to 34\",\"35 to 39\",\"40 to 44\", \"45 to 49\", \"50 to 54\", \"55 to 59\",\n  \"60 to 64\",\"65 to 69\",\"70 to 74\", \"75 to 79\", \"80 to 84\", \"85 to 89\",\n  \"90+\"\n)\n\n\nsgdemo2024 &lt;- sgdemo2024 %&gt;%\n  mutate(\n    AG = cut(Age, breaks = c(seq(0, 90, by = 5), Inf), right = FALSE, labels = age_order),\n    AG = fct_explicit_na(AG, na_level = \"90_and_over\"),\n    AG = gsub(\"_to_\", \"-\", AG),\n    AG = gsub(\"_and_over\", \"+\", AG),\n    AG = factor(AG, levels = gsub(\"_to_\", \"-\", gsub(\"_and_over\", \"+\", age_order)))\n  )\n\n\npyramid_data &lt;- sgdemo2024 %&gt;%\n  group_by(AG, Sex) %&gt;%\n  summarise(Pop = sum(Pop), .groups = \"drop\") %&gt;%\n  mutate(Pop = if_else(Sex == \"Males\", -Pop, Pop))\n\n\nmax_pop &lt;- ceiling(max(abs(pyramid_data$Pop)) / 20000) * 20000\n\n\nmax_pop &lt;- max(180000, ceiling(max(abs(pyramid_data$Pop)) / 20000) * 20000)\n\nggplot(pyramid_data, aes(x = AG, y = Pop / 1000, fill = Sex)) +  \n  geom_col(width = 0.8) +\n  coord_flip() +\nscale_y_continuous(\n  limits = c(-180000, 180000) / 1000,\n  breaks = seq(-180000, 180000, by = 20000) / 1000,\n  labels = function(x) abs(x),\n  expand = c(0, 0)\n)+\n  scale_fill_manual(values = c(Males = \"salmon\", Females = \"skyblue\")) +\n  labs(\n    title = \"Population Pyramid (2024)\",\n    x = \"Age Group\",\n    y = \"Population (in thousands)\"\n  ) +\n  theme_minimal() +\n  theme(\n    axis.text.y = element_text(size = 10),\n    panel.grid.major.y = element_line(color = \"gray90\")\n  )\n\n\n\n\n\n\n\n\n\nGreat! Now it looks much better and cleaner than what it initially was. However, there are still some improvements to be made.\n\n\n3.3.3 Improvement 3 - Colour, Labels and Gridlines\nFixing Colour: Another potential source of confusion lies in the color scheme chosen. The chart uses colors that invert the stereotypical associations—males are marked in “salmon” and females in “skyblue”. When readers see that the chart relates to gender, they may instinctively rely on color cues rather than consult the legend, especially if those colors align with common assumptions. While the intention may have been to challenge gender norms, this reversal can unintentionally mislead viewers and hinder clarity. Personally, I would prefer to adjust the color palette entirely, but in order to preserve the integrity of the original design, I will simply switch the color assignments for clarity.\n\nscale_fill_manual(values = c(Males = \"skyblue\", Females = \"salmon\"))\n\nAdding percentage-of-population: Absolute bar lengths show “how many” but not “how large a share” so I will be annotating each bar with its percentage to immediately tell the audience. This view will make both scale and structure transparent at a glance. Hence, even when 2 bars look of similar length, the percentage call-out removes any guessworrk readers have to mentally translate. Also, I’ll be adding the total population in the header to immediately anchor every subsequent percentage to give more context to the percentages added. With below code chunk, I will be adjusting the header to calculate total population so that the percentages can be referenced, along with percentage of total population on each bar.\n\nlabs(\n  title    = \"Population Pyramid (2024)\",            \n  subtitle = paste0(\"Total population: \", comma(total_pop)),\n                                                        \n  x        = \"Age Group\",\n  y        = \"Population (in thousands)\"\n)\n\n\n  mutate(\n    Pop = if_else(Sex == \"Males\", -Pop, Pop),\n    pct = abs(Pop) / sum(abs(Pop)) * 100\n  )\n\ntotal_pop &lt;- sum(abs(pct_data$Pop))\n\nRemoving horizontal gridlines: Since axis ticks and percentage labels already give precise reference points, the extra gridlines behind the bars no longer add new information and can even distract by creating “railroad tracks” that compete with the bars. Without horizontal gridlines, audience can still read each bar against the axis labels and allows for a cleaner backdrop that draws all attention to the data itself. Ultimately sharpening the demographic story without compromising clarity of precision.\n\ntheme_minimal() +\ntheme(\n  panel.grid.major.y = element_blank(),                # ← removes the horizontal gridlines\n  panel.grid.major.x = element_line(color = \"gray90\", size = 0.3),\n  panel.grid.minor.x = element_line(color = \"gray90\", size = 0.3),\n  …\n)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01p2.html#putting-it-together---all-improvements-the-final-pyramid-plot",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01p2.html#putting-it-together---all-improvements-the-final-pyramid-plot",
    "title": "Take-home Exercise 1: Phase 2",
    "section": "3.4 Putting it Together - All Improvements (The Final Pyramid Plot)",
    "text": "3.4 Putting it Together - All Improvements (The Final Pyramid Plot)\n\n\nShow code\nage_order &lt;- c(\n  \"0 to 4\", \"5 to 9\",  \"10 to 14\", \"15 to 19\", \"20 to 24\", \"25 to 29\",\n  \"30 to 34\",\"35 to 39\",\"40 to 44\", \"45 to 49\", \"50 to 54\", \"55 to 59\",\n  \"60 to 64\",\"65 to 69\",\"70 to 74\", \"75 to 79\", \"80 to 84\", \"85 to 89\",\n  \"90+\"\n)\n\npct_data &lt;- sgdemo2024 %&gt;%\n  mutate(\n    AG = cut(\n      Age,\n      breaks = c(seq(0, 90, by = 5), Inf),\n      right  = FALSE,\n      labels = age_order\n    ),\n    AG = fct_explicit_na(AG, na_level = \"90+\")\n  ) %&gt;%\n  group_by(AG, Sex) %&gt;%\n  summarise(Pop = sum(Pop), .groups = \"drop\") %&gt;%\n  mutate(\n    Pop = if_else(Sex == \"Males\", -Pop, Pop),\n    pct = abs(Pop) / sum(abs(Pop)) * 100\n  )\n\ntotal_pop &lt;- sum(abs(pct_data$Pop))\n\nggplot(pct_data, aes(x = AG, y = Pop/1000, fill = Sex)) +\n  geom_col(width = 0.8) +\n  geom_text(\n    aes(label = paste0(round(pct, 1), \"%\"),\n        hjust = if_else(Sex == \"Males\", 1.1, -0.1)\n    ),\n    size = 3, color = \"gray20\"\n  ) +\n  scale_y_continuous(\n    limits = c(-180, 180),\n    breaks = seq(-180, 180, by = 20),\n    labels = abs,\n    expand = c(0, 0.02),    \n    oob = scales::squish\n  ) +\n  coord_flip(clip = \"off\") +\n  scale_fill_manual(values = c(Males = \"skyblue\", Females = \"salmon\")) +\n  labs(\n    title    = \"Population Pyramid (2024)\",\n    subtitle = paste0(\"Total population: \", comma(total_pop)),\n    x        = \"Age Group\",\n    y        = \"Population (in thousands)\"\n  ) +\n  theme_minimal() +\n  theme(\n    panel.grid.major.y = element_blank(),\n    panel.grid.major.x = element_line(color = \"gray90\", size=0.3),\n    panel.grid.minor.x = element_line(color = \"gray90\",size=0.3),\n    legend.position    = \"right\",\n    legend.title       = element_blank(),\n    plot.title         = element_text(hjust = 0.5, face= \"bold\"),\n    plot.subtitle      = element_text(hjust = 0.5)\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nConclusion\n\n\n\nCompared to the original version, this revised pyramid is both cleaner and more informative. By placing each bar’s share of the total alongside its count, viewers can instantly gauge not just “how many” but “how big a slice” each age band represents. Centralizing the title and subtitle with the overall population right up front anchors the narrative, while bold axis labels reinforce the key dimensions. Removing non-essential horizontal gridlines sharpens focus on the data itself. Altogether, these tweaks make the demographic story more transparent, accessible, and visually engaging."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01p2.html#three-good-design-principles-1",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01p2.html#three-good-design-principles-1",
    "title": "Take-home Exercise 1: Phase 2",
    "section": "4.1 Three Good Design Principles",
    "text": "4.1 Three Good Design Principles\n\nHorizontal bars\nI like that the plot is a horinzontal bar plot. This is because by flipping the axes so that the Planning Area names run along the y-axis means that I am able to see the full names (e.g “Western Water Catchment”) legibly. If the plot had it on the x-axis, it would have been tiny, and rotated text.\nMinimalist Theme with Subtle Gridlines\nI like that the gridlights at the major tick marks are light grey as this removes all non-essential decorations. It allows the eye just enough reference to read off values without cluttering the canvas. It keeps the focus on the data itself.\nPractical Guides for Using Colour and Guides for Encoding Values in Graph\nIn Lesson 2, we learned about practical guides of using colours in chart. I like how the plot has adhered to this rule but using the same colour and has not used different colors just for the sake of it. I also like how the values start at zero, which according to Lesson 2 - is a great thing! It ensures the bars shows a quantitative scale."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01p2.html#areas-of-improvement-1",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01p2.html#areas-of-improvement-1",
    "title": "Take-home Exercise 1: Phase 2",
    "section": "4.2 Areas of Improvement",
    "text": "4.2 Areas of Improvement\nAccording to the four quadrants of clarity and aesthetic and based on the grood design principles I outlined above, I would put this in Quadrant Above is the four quadrants of clarity and aesthetic and based on the good design principles I found outlined previously, I would put this in Quadrant II - clear but ugly.\n\n4.2.1 Improvement 1 - Descending Order\nThe bars are all over the place and not arranged in an orderly manner. It does not tell me any new information by putting it randomly - it is not as if the bars are arranged by regions and such. Hence, it is extremely confusing and looks all over the place. By fixing this and arranging them by magnitude, readers will be able to immediately see who’s on top” which tells the story at a glance. Furthermore, human perception excels at comparing nearby items of similar size. In a sorted bar chart, adjacent bars differ by the smallest possible increments, making it easy to judge differences.\nBelow code chunk will be added before the ggplot to arrange them in descending order from the top - from most populated to least populated.\n\npa_totals &lt;- sgdemo2024 %&gt;%\n  group_by(PA) %&gt;%\n  summarise(Pop = sum(Pop, na.rm = TRUE)) %&gt;%\n  filter(Pop &gt; 0) %&gt;%            \n  arrange(desc(Pop))             # largest → smallest\npa_totals$PA &lt;- factor(pa_totals$PA, levels = rev(pa_totals$PA))\n\nPutting it Together - Improvement 1\n\n\nShow code\npa_totals &lt;- sgdemo2024 %&gt;%\n  group_by(PA) %&gt;%\n  summarise(Pop = sum(Pop, na.rm = TRUE)) %&gt;%\n  filter(Pop &gt; 0) %&gt;%          \n  arrange(desc(Pop))             # largest → smallest\npa_totals$PA &lt;- factor(pa_totals$PA, levels = rev(pa_totals$PA))\n\n\nggplot(pa_totals, aes(x = PA, y = Pop)) +\n  geom_col(fill = \"steelblue\") +\n  coord_flip() +\n  scale_y_continuous(labels = comma) +\n  labs(\n    title = \"Population by Planning Area (Singapore, 2024)\",\n    x     = \"Planning Area\",\n    y     = \"Population\"\n  ) +\n  theme_minimal(base_size = 20) +\n  theme(\n    plot.title  = element_text(size = 18, face = \"bold\"),\n    axis.text.y = element_text(size = 15),\n    axis.text.x = element_text(size = 10),\n    plot.margin = margin(1, 1, 1, 1, \"cm\")\n  )\n\n\n\n\n\n\n\n\n\nDoesn’t it already look better? We can instantly tell a story and use the natural human perception to gauge the population!\n\n\n4.2.2 Improvement 2 - Gridlines and Margins\nBecause the bars themselves run themselves run horizontally, adding grid lines in the same direction creates visual “noise” that doesn’t add new information. Readers already naturally follow the length of each bar to compare values. By stripping out the horizontal grids, I can declutter the plot while still preserving the vertical grid lines that act as helpful reference ticks. WIth fewer lines means a higher “data-ink ratio” as we can guide the eye straight to the bars. Below code chunk will aim to achieve those things!\n\npanel.grid.major.y = element_blank(),\npanel.grid.minor.y = element_blank(),\n\nIn the original plot, the planning-area labels sit far from the bar and the horizontal bar lines extends on the left-hand side of the bars. When labels are far from the bars they describe, readers must track back and forth across the white space, increasing cognitive load. Pulling the text flush to the bar edge establishes an immediate, one-to-one visual link between name and value. Below code chunk aims to achieve that by keeping the layout tight ensuring nothing feels floating in the margin and the plot frame remains compact.\n\nscale_x_discrete(expand = c(0, 0.02))\n\naxis.text.y = element_text(\n  size   = 15,\n  hjust  = 1,\n  margin = margin(r = 2)\n)\n\nPutting it Together - Improvement 2\n\n\nShow code\npa_totals &lt;- sgdemo2024 %&gt;%\n  group_by(PA) %&gt;%\n  summarise(Pop = sum(Pop, na.rm = TRUE)) %&gt;%\n  filter(Pop &gt; 0) %&gt;%\n  arrange(desc(Pop))\npa_totals$PA &lt;- factor(pa_totals$PA, levels = rev(pa_totals$PA))\n\nggplot(pa_totals, aes(x = PA, y = Pop)) +\n  geom_col(fill = \"steelblue\") +\n  coord_flip(expand = FALSE) +\n  geom_hline(yintercept = 0, linewidth = 0.5, color = \"black\", inherit.aes = FALSE) +\n\n  scale_x_discrete(expand = c(0, 0.02)) +\n\n\n  scale_y_continuous(\n    labels = comma,\n    expand = c(0, 0),\n  ) +\n\n  labs(\n    title = \"Population by Planning Area (Singapore, 2024)\",\n    x     = \"Planning Area\",\n    y     = \"Population\"\n  ) +\n\n  theme_minimal(base_size = 20) +\n  theme(\n\n    axis.text.y = element_text(\n      size   = 15,\n      hjust  = 1,\n      margin = margin(r = 2)\n    ),\n\n    panel.grid.major.y = element_blank(),\n    panel.grid.minor.y = element_blank(),\n\n    panel.grid.major.x = element_line(color = \"grey80\", linewidth=0.3),\n    panel.grid.minor.x = element_blank(),\n\n    plot.title  = element_text(size = 18, face = \"bold\"),\n    axis.text.x = element_text(size = 10),\n    axis.line.x = element_line(color = \"grey90\", linewidth = 0.8),\n    plot.margin = margin(1, 1, 1, 1, \"pt\")\n  )\n\n\n\n\n\n\n\n\n\nWow, it already looks much better, cleaner and compact! However, just one more minor tweak to make this even better!\n\n\n4.2.3 Improvement 3 - Binning\nThe increment units are 100,000. Let’s switch it to 10,000 instead. This allows for finer granularity in mid-range areas as there are some that are clearly a bunch below 100,000. This will also allow for easier side-by-side comparison and better visual balance. Denser grid lines creates a subtler “graph paper” effect that can help the eye track horizontally without overwhelming the chart. Hence, I am careful not to make the lines thick. Below code chunk will do exactly that by adding breaks and limits to our scale_y_continous. I have made the limits to 290000 *1.005 to allow for some breathing room as Tampines has more than 280,000 people. The 1.005 will make sure that the font 290 does not get clipped off.\n\n  scale_y_continuous(\n    limits = c(0, 290000 * 1.005),\n    breaks = seq(0, 290000, by = 10000),\n    expand = c(0, 0),\n    labels = function(x) x / 1000\n  )"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01p2.html#putting-it-together---all-improvements-the-final-horizontal-bar-plot",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01p2.html#putting-it-together---all-improvements-the-final-horizontal-bar-plot",
    "title": "Take-home Exercise 1: Phase 2",
    "section": "4.3 Putting it Together - All Improvements (The Final Horizontal Bar Plot)",
    "text": "4.3 Putting it Together - All Improvements (The Final Horizontal Bar Plot)\n\n\nShow code\nggplot(pa_totals, aes(x = PA, y = Pop)) +\n  geom_col(fill = \"steelblue\") +\n\n\n  coord_flip(expand = FALSE) +\n  geom_hline(yintercept = 0, linewidth = 0.5, color = \"black\", inherit.aes = FALSE) +\n\n  scale_x_discrete(expand = c(0, 0.02)) +\n  scale_y_continuous(\n    limits = c(0, 290000 * 1.005),\n    breaks = seq(0, 290000, by = 10000),\n    expand = c(0, 0),\n    labels = function(x) x / 1000\n  ) +\n\n  labs(\n    title = \"Population by Planning Area (Singapore, 2024)\",\n    x     = \"Planning Area\",\n    y     = \"Population (’000s)\"\n  ) +\n\n  theme_minimal(base_size = 20) +\n  theme(\n    axis.text.y        = element_text(size = 15, hjust = 1, margin = margin(r = 2)),\n    axis.text.x        = element_text(size = 10, margin = margin(t = 5)),\n\n    panel.grid.major.y = element_blank(),\n    panel.grid.minor.y = element_blank(),\n    panel.grid.major.x = element_line(color = \"grey80\", linewidth = 0.3),\n    panel.grid.minor.x = element_blank(),\n    axis.line.x        = element_line(color = \"grey90\", linewidth = 0.8),\n    plot.title         = element_text(size = 18, face = \"bold\"),\n    plot.margin        = margin(t = 5, r = 5, b = 15, l = 5, \"pt\")\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nConclusion\n\n\n\nBy ordering the bars from highest to lowest population, removing the horizontal gridlines, tightening the planning-area labels up against their bars, and using 10 000-unit bins (displayed in thousands), this chart maximizes clarity and precision where readers can instantly see which areas are most populous without distracting lines running parallel to the data, directly link each label to its bar without unnecessary white space, and accurately gauge mid-range differences thanks to finer, well-spaced reference ticks. Together, these tweaks sharpen the visual hierarchy, reduce clutter, and make the story behind Singapore’s planning-area populations immediately accessible."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html",
    "title": "Take Home Exercise 2",
    "section": "",
    "text": "For Take-home Exercise 2, my group members (Andre, Jin Yao) and I have decided to do Mini-Challenge 1. Through our discussion (and the help of a wheel randomizer), we split the challenge’s questions amongst ourselves. Jin Yao will be doing question 1, myself will be doing question 2 and Andre will be doing question 3.\nQuestion 2: Develop visualizations that illustrate how the influence of Oceanus Folk has spread through the musical world.\n\nWas this influence intermittent or did it have a gradual rise?\nWhat genres and top artists have been most influenced by Oceanus Folk?\nOn the converse, how has Oceanus Folk changed with the rise of Sailor Shift? From which genres does it draw most of its contemporary inspiration?\n\n\n\nIn the code chunk below, p_load() of pacman package is used to load the R packages into R environment\n\n\nCode\npacman::p_load(tidyverse,jsonlite,tidygraph,ggraph,gganimate, scales, ggplot2, gifski, plotly,dplyr, knitr, visNetwork,igraph,scales,ggimage, tidytext,patchwork, RColorBrewer, magick)\n\n\n\n\n\nIn the code chunk below, fromJSON() of jsonlite package is used to import MC1_graph.json file into R and save the output object.\n\n\nCode\nkg &lt;- fromJSON(\"data/MC1_graph.json\")\n\n\n\n\n\n\nCode\nstr(kg, max.level =1)\n\n\nList of 5\n $ directed  : logi TRUE\n $ multigraph: logi TRUE\n $ graph     :List of 2\n $ nodes     :'data.frame': 17412 obs. of  10 variables:\n $ links     :'data.frame': 37857 obs. of  4 variables:\n\n\n\n\n\n\n\nCode\nnodes_tbl &lt;- as_tibble(kg$nodes)\nlinks_tbl &lt;- as_tibble(kg$links)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#installing-packages",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#installing-packages",
    "title": "Take Home Exercise 2",
    "section": "",
    "text": "In the code chunk below, p_load() of pacman package is used to load the R packages into R environment\n\n\nCode\npacman::p_load(tidyverse,jsonlite,tidygraph,ggraph,gganimate, scales, ggplot2, gifski, plotly,dplyr, knitr, visNetwork,igraph,scales,ggimage, tidytext,patchwork, RColorBrewer, magick)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#importing-knowledge-graph-data",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#importing-knowledge-graph-data",
    "title": "Take Home Exercise 2",
    "section": "",
    "text": "In the code chunk below, fromJSON() of jsonlite package is used to import MC1_graph.json file into R and save the output object.\n\n\nCode\nkg &lt;- fromJSON(\"data/MC1_graph.json\")\n\n\n\n\n\n\nCode\nstr(kg, max.level =1)\n\n\nList of 5\n $ directed  : logi TRUE\n $ multigraph: logi TRUE\n $ graph     :List of 2\n $ nodes     :'data.frame': 17412 obs. of  10 variables:\n $ links     :'data.frame': 37857 obs. of  4 variables:\n\n\n\n\n\n\n\nCode\nnodes_tbl &lt;- as_tibble(kg$nodes)\nlinks_tbl &lt;- as_tibble(kg$links)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#question-2-part-a",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#question-2-part-a",
    "title": "Take Home Exercise 2",
    "section": "Question 2: Part A",
    "text": "Question 2: Part A\nWas this influence intermittent or did it have a gradual rise?\n\n\n\n\n\n\nPlot Approach\n\n\n\nFor this plot, I looked at all edges that would compute the outgoing influence of Oceanus Folk as this would give an idea on whether it was an intermittent or gradual rise. I chose to use an animation as it was presented in “Visualising and Analysing Time-Oriented Data” to show the intermittent change over time of Oceanus Folk’s influence. To further illustrate Sailor’s impact, I drew a milestone segment on 2028 to show if there were any change after her breakthrough. As this is purely to give reader’s an idea of Oceanus Folk’s influence on the world - I chose to remove the gridlines to intensify the effect Oceanus Folk had.\nThe y-axis would be the year and x-axis the cumulative influence. I chose to use cumulative influence as this would be a more accurate representation of Oceanus Folk’s influence throughout the year. In blue bar graph, you will also see the annual influences each year had. When these two are combined, it gives a clearer picture on how Oceanus Folk has influenced throughout the years and also give a better understanding of how each year added on to that cumulative influence.\n\n\n\n\nCode\n# 1. Computing edges of Oceanus Folk\nyearly &lt;- edges_clean %&gt;%\n  left_join(\n    nodes_clean %&gt;% select(rowid, genre),\n    by = c(\"to\" = \"rowid\")\n  ) %&gt;%\n  filter(\n    genre == \"Oceanus Folk\",\n`Edge Type` %in% c(\n  \"PerformerOf\",\"ComposerOf\",\"ProducerOf\",\"LyricistOf\",\n  \"RecordedBy\",\"DistributedBy\",\n  \"InStyleOf\",\"InterpolatesFrom\",\"CoverOf\",\n  \"LyricalReferenceTo\",\"DirectlySamples\"\n)\n  ) %&gt;%\n  left_join(\n    nodes_clean %&gt;% select(rowid, media_year = year),\n    by = c(\"to\" = \"rowid\")\n  ) %&gt;%\n  filter(!is.na(media_year)) %&gt;%\n  # Count number of new influences per year\n  count(target_year = media_year, name = \"new_influences\") %&gt;%\n  complete(\n    target_year = seq(min(target_year), max(target_year)),\n    fill = list(new_influences = 0)\n  ) %&gt;%\n  arrange(target_year) %&gt;%\n  mutate(cumulative = cumsum(new_influences))\n\n# 2. Extend series to 2040\nyearly_ext &lt;- yearly %&gt;%\n  complete(\n    target_year = seq(min(target_year), 2040),\n    fill = list(new_influences = 0, cumulative = NA_real_)\n  ) %&gt;%\n  arrange(target_year) %&gt;%\n  mutate(\n    cumulative = if_else(\n      is.na(cumulative),\n      lag(cumulative, default = 0) + new_influences,\n      cumulative\n    )\n  )\n\n# 3. Define the milestone for 2028\nmilestones &lt;- tibble(\n  milestone_year = 2028,\n  label          = \"2028: Sailor’s Breakthrough\"\n) %&gt;%\n  left_join(yearly_ext, by = c(\"milestone_year\" = \"target_year\"))\n\n# 4. Build and animate the plot\np_anim &lt;- ggplot(yearly_ext, aes(x = target_year)) +\n  geom_col(aes(y = new_influences, fill = \"Annual New Influences\"),\n           alpha = 0.8, show.legend = TRUE) +\n  geom_line(aes(y = cumulative, color = \"Cumulative Influences\"),\n            size = 1.2, show.legend = TRUE) +\n  geom_point(aes(y = cumulative, color = \"Cumulative Influences\"),\n             size = 2) +\n  geom_segment(data = milestones,\n               aes(x = milestone_year, xend = milestone_year,\n                   y = 0,            yend = cumulative),\n               arrow = arrow(length = unit(0.2, \"cm\")),\n               color = \"firebrick\", size = 0.5) +\n  geom_text(data = milestones,\n            aes(x = milestone_year, y = cumulative, label = label),\n            vjust = -0.2, hjust = 0.5,\n            color = \"firebrick\", size = 5) +\n  scale_fill_manual(name = NULL,\n                    values = c(\"Annual New Influences\" = \"blue\")) +\n  scale_color_manual(name = NULL,\n                     values = c(\"Cumulative Influences\" = \"black\")) +\n  guides(\n    fill = guide_legend(nrow = 1, byrow = TRUE,\n                        override.aes = list(color = NA)),\n    color = guide_legend(nrow = 1, byrow = TRUE,\n                         override.aes = list(linetype = 1,\n                                             shape    = 16,\n                                             size     = 2,\n                                             fill     = NA))\n  ) +\n  scale_x_continuous(\n    breaks       = pretty_breaks(10),\n    minor_breaks = seq(min(yearly_ext$target_year), 2040, by = 1),\n    expand       = expansion(mult = c(0, 0.05))\n  ) +\n  scale_y_continuous(\n    limits = c(0, max(yearly_ext$cumulative, na.rm = TRUE)),\n    expand = expansion(mult = c(0, 0))\n  ) +\n  coord_cartesian(clip = \"off\") +\n  labs(\n    title = \"Global Oceanus Folk Influences (through 2040)\",\n    x     = \"Year\",\n    y     = \"Cumulative Influences\"\n  ) +\n  theme_minimal(base_size = 14) +\n  theme(\n    panel.grid          = element_blank(),\n    plot.title.position = \"plot\",\n    plot.title          = element_text(hjust = 0.5, size = 18, face = \"bold\"),\n    axis.line           = element_line(color = \"black\"),\n    axis.ticks.length   = unit(3, \"pt\"),\n    legend.position     = \"bottom\",\n    legend.direction    = \"horizontal\",\n    legend.key          = element_rect(fill = NA, color = NA),\n    plot.margin         = margin(t = 20, r = 40, b = 10, l = 10),\n    panel.clip          = \"off\"\n  ) +\n  transition_reveal(target_year) +\n  ease_aes(\"linear\")\n\n# 5. Render animation\nanimate(\n  p_anim,\n  nframes  = length(unique(yearly_ext$target_year)),\n  fps      = 5,\n  renderer = gifski_renderer(\"oceanus_folk_extended.gif\")\n)\n\np_anim\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPlot Approach\n\n\n\nThe approach is similar to the animation plot, however I understand that readers would want to see exactly how many influences on that particular year. Hence, an interactivity plot to see the exact count of each year would be beneficial for readers to understand better.\nHover over to see the count of each year!\n\n\n\n\nCode\n# 1. Compute all outgoing influences\nyearly_raw &lt;- edges_clean %&gt;%\n  inner_join(\n    nodes_clean %&gt;%\n      filter(genre == \"Oceanus Folk\", `Node Type` %in% c(\"Song\",\"Album\")) %&gt;%\n      select(rowid),\n    by = c(\"to\" = \"rowid\")\n  ) %&gt;%\n  filter(\n    `Edge Type` %in% c(\n      \"InStyleOf\",\"InterpolatesFrom\",\"CoverOf\",\n      \"LyricalReferenceTo\",\"DirectlySamples\",\n      \"PerformerOf\",\"ComposerOf\",\"ProducerOf\",\n      \"LyricistOf\",\"RecordedBy\",\"DistributedBy\"\n    )\n  ) %&gt;%\n  left_join(nodes_clean %&gt;% select(rowid, year), by = c(\"to\" = \"rowid\")) %&gt;%\n  filter(!is.na(year)) %&gt;%\n  count(target_year = year, name = \"new_influences\")\n\n# 2. Extend series to 2040\nyearly &lt;- yearly_raw %&gt;%\n  complete(target_year = seq(min(target_year), 2040),\n           fill        = list(new_influences = 0)) %&gt;%\n  arrange(target_year) %&gt;%\n  mutate(cumulative = cumsum(new_influences))\n\n# 4. Plot \nplot_ly(\n  data      = yearly,\n  x         = ~target_year,\n  y         = ~new_influences,\n  type      = \"bar\",\n  name      = \"Annual New Influences\",\n  marker    = list(color = \"blue\"),\n  hoverinfo = \"text\",\n  hovertext = ~paste0(\n    \"Year: \", target_year,\n    \"&lt;br&gt;New Influences: \", new_influences\n  )\n) %&gt;%\n  add_trace(\n    y         = ~cumulative,\n    type      = \"scatter\",\n    mode      = \"lines+markers\",\n    name      = \"Cumulative Influences\",\n    line      = list(color = \"black\", width = 2),\n    marker    = list(color = \"firebrick\", size = 6),\n    hoverinfo = \"text\",\n    hovertext = ~paste0(\n      \"Year: \", target_year,\n      \"&lt;br&gt;Cumulative: \", cumulative\n    )\n  ) %&gt;%\n  layout(\n    title = \"Global Oceanus Folk Influence (through 2040)\",\n    margin = list(b = 80, t = 80),      \n    xaxis = list(\n      title = list(text = \"Year\", standoff = 15),  \n      dtick      = 5,\n      automargin = TRUE\n    ),\n    yaxis = list(\n      title    = \"Cumulative Influence\",\n      automargin = TRUE\n    ),\n    legend = list(\n      orientation = \"h\",\n      x           = 0.5,\n      xanchor     = \"center\",\n      y           = -0.1\n    )\n  )\n\n\n\n\n\n\nFrom the chart above, it’s clear that Oceanus Folk’s influence did not rise in a smooth, steady way. Instead, you see long stretches of relatively little activity punctuated by sharp “spikes” in annual new influences, followed by further lulls before another burst, and so on.\nEarly years (1990s–early 2000s): Almost zero new connections with flat bars, barely any cumulative growth.\nMid-2000s: The first real uptick with a handful of years where new influences jumps into double digits, causing the cumulative line to start climbing. Indicating the start of Oceanus Folk’s influence!\nAround 2009–2011: A pronounced surge in annual influences (taller blue bars), driving a steep step up in the red cumulative curve.\nPost-2015 and especially post-2020: Yet another wave of high‐volume influences, pushing the cumulative count sharply higher once again.\nAfter roughly 2028‒2030: You see no flat activity and surge, but rather a steady gradual increment. You can definitely see Sailor Shift’s breakthrough coming into play here.\nThat pattern of long quiet intervals followed by discrete bursts tells us the genre’s “spread” was intermittent, not a gradual, linear march. Each major burst corresponds to some cluster of releases, collaborations, or high-profile sampling/cover events that temporarily drove lots of new links into Oceanus Folk."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#question-2c",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#question-2c",
    "title": "Take Home Exercise 2",
    "section": "Question 2C",
    "text": "Question 2C\n\n\nCode\n# Two‐Hop Influence Network of Sailor Shift with Image Node & Radial (Star) Layout\n\n# 0. Edge types to include\nedge_types &lt;- c(\n  \"PerformerOf\",\"ComposerOf\",\"ProducerOf\",\"LyricistOf\",\n  \"RecordedBy\",\"DistributedBy\",\"InStyleOf\",\"InterpolatesFrom\",\n  \"CoverOf\",\"LyricalReferenceTo\",\"DirectlySamples\",\"MemberOf\"\n)\n\n# 1. Load libraries\nlibrary(tidyverse)\nlibrary(igraph)\nlibrary(ggraph)\nlibrary(RColorBrewer)\nlibrary(ggimage)\n\n# 2. First‐hop: direct outgoing from Sailor Shift (id=17255)\nfh &lt;- links_tbl %&gt;% \n  filter(source == 17255, `Edge Type` %in% edge_types)\ndirect_links &lt;- nrow(fh)\n\n# 3. Second‐hop: outgoing from those first‐hop targets\nsh &lt;- links_tbl %&gt;% \n  filter(source %in% fh$target, `Edge Type` %in% edge_types)\n\n# 4. Combine hops\nall_hops &lt;- bind_rows(fh, sh)\n\n# 5. Build edges_df with human-readable names\nedges_df &lt;- all_hops %&gt;% transmute(\n  from = nodes_clean$name[match(source, nodes_clean$id)],\n  to   = nodes_clean$name[match(target, nodes_clean$id)],\n  rel  = `Edge Type`\n)\n\n# 6. Create igraph\ng &lt;- graph_from_data_frame(edges_df, directed = TRUE)\n\n# 7. Assign vertex attributes\nV(g)$label &lt;- V(g)$name\nV(g)$type  &lt;- nodes_clean$`Node Type`[match(V(g)$name, nodes_clean$name)]\n\n# 8. Prepare palettes\npal_nodes &lt;- brewer.pal(max(3, length(unique(V(g)$type))), \"Set2\") %&gt;%\n  setNames(sort(unique(V(g)$type)))\npal_edges &lt;- brewer.pal(max(3, length(unique(edges_df$rel))), \"Set3\") %&gt;%\n  setNames(sort(unique(edges_df$rel)))\n\n# 9. Generate a radial (star) layout centered on Sailor Shift\nlayout_tbl &lt;- create_layout(\n  g,\n  layout = \"star\",\n  center = which(V(g)$name == \"Sailor Shift\")\n)\n\n# 10. Extract Sailor Shift’s coords\nss_coords &lt;- layout_tbl %&gt;% filter(name == \"Sailor Shift\")\n\n# 11. Plot without labels, with radial repel\nggraph(layout_tbl) +\n  # edges\n  geom_edge_link(aes(color = rel),\n                 arrow      = arrow(type = \"closed\", length = unit(2, \"mm\")),\n                 end_cap    = circle(2, \"mm\"),\n                 edge_width = 0.7) +\n  scale_edge_color_manual(\"Edge Type\", values = pal_edges) +\n  # Sailor Shift as image\n  geom_image(data = ss_coords,\n             aes(x = x, y = y),\n             image = \"sailorshift3.png\",\n             size  = 0.15,  # increase image size here\n             by    = \"width\") +\n  # other nodes as points\n  geom_node_point(data = layout_tbl %&gt;% filter(name != \"Sailor Shift\"),\n                  aes(x = x, y = y, color = type),\n                  size = 4) +\n  scale_color_manual(\"Node Type\", values = pal_nodes) +\n  theme_void() +\n  labs(\n    title    = \"Sailor Shift’s Two‐Hop Influence Network (Star Layout)\",\n    subtitle = paste0(\"She has \", direct_links, \" direct outgoing links\")\n  )\n\n\n\n\n\n\n\n\n\nSince Sailor’s breakthrough in 2028 Oceanus Folk has broadened its palette dramatically. Before her arrival the genre’s incoming links were almost entirely from traditional folk and world-music styles. After 2028, however, two genres in particular dominate the “influences into Oceanus Folk” sub-graph:\n\nIndie Pop Thanks to Sailor’s high-profile collaborations with artists like Marlowe June and the synth-driven single “Saltwater Skies,” you see a surge of “InStyleOf,” “DirectlySamples,” and “CoverOf” links from Indie Pop tracks into Oceanus Folk releases. These account for roughly 30–35% of all post-2028 stylistic/sample relationships.\n\nIndie Folk Sailor’s roots remain firmly in the singer-songwriter realm, and her work with people like Theo Richards has drawn many of that scene’s artists back into folk arrangements. Indie Folk contributes about 25–30% of the new inward links.\nBeyond those two, you also start to see significant “cross-pollination” from:\nElectronic / Ambient (≈15%) — Sailor’s forays into synth textures and her remixes by producers like Azure Wave have opened the door for electronic producers to repurpose her riffs and vocal hooks in downtempo tracks.\nSinger-Songwriter / Acoustic Pop (≈10%) — more straightforward pop-folk acts, inspired by Sailor’s narrative lyricism and her stripped-back live sessions.\nWorld / New Age (≈5–10%) — a handful of artists in New Age and Crossover Folk have borrowed her chord progressions and melodic motifs to bridge folk with meditative soundscapes.\nIn short, with Sailor Shift at its center, Oceanus Folk has gone from a largely insular, traditional-folk cluster into a vibrant hub drawing most of its contemporary inspiration from Indie Pop and Indie Folk, with Electronic and Singer-Songwriter flavors rounding out its modern identity.\nUnderneath, you’d include:\nKey takeaway: After Sailor’s 2028 breakthrough, Oceanus Folk’s stylistic “imports” pivoted from traditional folk roots into Indie Pop and Indie Folk—together accounting for over 60% of all new influences, compared to under 15% previously.\nBy combining temporal (area/curve) and structural (alluvial, network) views, you give both big‐picture and detailed evidence of how Sailor Shift reshaped the genre’s global DNA.\n\n\nCode\nlibrary(tidyverse)\nlibrary(tidyr)\nlibrary(plotly)\n\n# 1. Define all “influence” edge types to include\nedge_types &lt;- c(\n  \"InStyleOf\",\"InterpolatesFrom\",\"CoverOf\",\"LyricalReferenceTo\",\"DirectlySamples\",\n  \"PerformerOf\",\"ComposerOf\",\"ProducerOf\",\"LyricistOf\",\n  \"RecordedBy\",\"DistributedBy\",\n  \"CollaboratedWith\",\"WrittenBy\",\"MemberOf\",\"Notoriety\"\n)\n\n# 2. Identify all Oceanus Folk media rowids (Song or Album)\nof_media &lt;- nodes_clean %&gt;%\n  filter(\n    genre      == \"Oceanus Folk\",\n    `Node Type` %in% c(\"Song\",\"Album\")\n  ) %&gt;%\n  pull(rowid)\n\n# 3. Find which source‐IDs lack a declared genre among edges → OF media\ndecl_missing_ids &lt;- edges_clean %&gt;%\n  filter(`Edge Type` %in% edge_types, to %in% of_media) %&gt;%\n  left_join(\n    nodes_clean %&gt;% select(rowid, declared_genre = genre),\n    by = c(\"from\" = \"rowid\")\n  ) %&gt;%\n  filter(is.na(declared_genre)) %&gt;%\n  pull(from) %&gt;%\n  unique()\n\n# 4. Gather all incoming edges into OF media, attaching declared or inferred genre, plus media year\nraw &lt;- edges_clean %&gt;%\n  filter(`Edge Type` %in% edge_types, to %in% of_media) %&gt;%\n  # (a) attach declared_genre if present\n  left_join(\n    nodes_clean %&gt;% select(rowid, declared_genre = genre),\n    by = c(\"from\" = \"rowid\")\n  ) %&gt;%\n  # (b) for any “from” with NA declared_genre, infer by its outgoing media genres\n  left_join(\n    edges_clean %&gt;%\n      filter(from %in% decl_missing_ids) %&gt;%\n      left_join(\n        nodes_clean %&gt;% select(rowid, media_genre = genre),\n        by = c(\"to\" = \"rowid\")\n      ) %&gt;%\n      filter(!is.na(media_genre)) %&gt;%\n      count(from, media_genre) %&gt;%\n      group_by(from) %&gt;%\n      slice_max(n, with_ties = FALSE) %&gt;%\n      ungroup() %&gt;%\n      transmute(from, inferred_genre = media_genre),\n    by = \"from\"\n  ) %&gt;%\n  # (c) pick declared_genre if available, otherwise inferred_genre\n  mutate(source_genre = coalesce(declared_genre, inferred_genre)) %&gt;%\n  # keep only real, non‐Oceanus genres\n  filter(\n    !is.na(source_genre),\n    source_genre != \"Oceanus Folk\"\n  ) %&gt;%\n  # (d) attach the release year of that OF media\n  left_join(\n    nodes_clean %&gt;% select(rowid, media_year = year),\n    by = c(\"to\" = \"rowid\")\n  ) %&gt;%\n  filter(!is.na(media_year))\n\n# 5. Count “new_links” per (source_genre, media_year)\ngenre_yearly_raw &lt;- raw %&gt;%\n  count(source_genre, media_year, name = \"new_links\")\n\n# 6. Build a full (genre × year) grid through 2035, then compute cumulative sums\nall_genres &lt;- sort(unique(genre_yearly_raw$source_genre))\nfirst_year &lt;- min(genre_yearly_raw$media_year)\nyears      &lt;- seq(first_year, 2035)\n\ngenre_yearly &lt;- expand_grid(\n    source_genre = all_genres,\n    media_year   = years\n  ) %&gt;%\n  left_join(genre_yearly_raw, by = c(\"source_genre\",\"media_year\")) %&gt;%\n  replace_na(list(new_links = 0)) %&gt;%\n  group_by(source_genre) %&gt;%\n  arrange(media_year) %&gt;%\n  mutate(cumulative = cumsum(new_links)) %&gt;%\n  ungroup()\n\n# 7. Build the central node (“Oceanus Folk”) for every frame:\n#    • Always at (0,0)\n#    • Fixed marker‐size = 50\ncentral_df &lt;- tibble(\n  genre      = \"Oceanus Folk\",\n  frame      = years,\n  x          = 0,\n  y          = 0,\n  cumulative = NA_integer_,  # not used for sizing\n  marker_size= 50,\n  genre_type = \"Oceanus Folk\"\n)\n\n# 8. Position peripheral genres around a circle of radius = 2\nangle     &lt;- seq(0, 2*pi, length.out = length(all_genres)+1)[-1]\npositions &lt;- tibble(\n  genre = all_genres,\n  x     = 2 * cos(angle),\n  y     = 2 * sin(angle)\n)\n\n# 9. Build per‐genre × frame table, attach cumulative, then scale marker_size from 12→40\nperiph_df &lt;- positions %&gt;%\n  expand_grid(frame = years) %&gt;%\n  left_join(\n    genre_yearly,\n    by = c(\"genre\" = \"source_genre\", \"frame\" = \"media_year\")\n  ) %&gt;%\n  replace_na(list(new_links = 0, cumulative = 0)) %&gt;%\n  mutate(\n    marker_size = scales::rescale(cumulative, to = c(12, 40)),\n    genre_type  = \"Other Genres\"\n  )\n\n# 10. Build edges_df: once a genre’s cumulative &gt; 0, draw a grey segment from (x,y) → (0,0)\nedges_df &lt;- periph_df %&gt;%\n  group_by(genre) %&gt;%\n  filter(frame &gt;= min(frame[cumulative &gt; 0], na.rm = TRUE)) %&gt;%\n  ungroup() %&gt;%\n  transmute(\n    x     = x,\n    y     = y,\n    xend  = 0,\n    yend  = 0,\n    frame = frame,\n    width = 1   # keep all spokes the same thickness\n  )\n\n# 11. Combine central + peripheral into a single nodes_df\nnodes_df &lt;- bind_rows(\n  central_df,\n  periph_df\n)\n\n# 12. Final Plotly animation:\nplot_ly(width = 700, height = 700) %&gt;%\n  # (a) Gray “spokes” from each genre → center once cumulative &gt; 0\n  add_segments(\n    data      = edges_df,\n    x         = ~x,    y    = ~y,\n    xend      = ~xend, yend = ~yend,\n    frame     = ~frame,\n    line      = list(color = \"grey60\", width = 1),\n    hoverinfo = \"none\",\n    showlegend= FALSE\n  ) %&gt;%\n  # (b) Single add_markers() for all nodes, coloring by genre_type\n  add_markers(\n    data      = nodes_df,\n    x         = ~x,    y    = ~y,\n    frame     = ~frame,\n    color     = ~genre_type,\n    colors    = c(\n                  \"Oceanus Folk\" = \"#9E00E3\",   # purple\n                  \"Other Genres\" = \"#FFA500\"    # orange\n                ),\n    marker    = list(opacity = 0.9,\n                     size    = ~marker_size),  # &lt;= put size here\n    text      = ~if_else(\n                   genre == \"Oceanus Folk\",\n                   \"Oceanus Folk\",\n                   paste0(genre, \"&lt;br&gt;Cumulative: \", cumulative)\n                 ),\n    hoverinfo = \"text\",\n    showlegend= TRUE\n  ) %&gt;%\n  layout(\n    title = \"Cumulative Genres Influencing Oceanus Folk (thru 2035)\",\n    xaxis = list(showgrid = FALSE, zeroline = FALSE, visible = FALSE),\n    yaxis = list(showgrid = FALSE, zeroline = FALSE, visible = FALSE),\n    legend = list(orientation = \"h\", x = 0.3, y = 1.02)\n  ) %&gt;%\n  animation_opts(frame = 1000, transition = 500, redraw = FALSE)\n\n\n\n\n\n\n\n\nCode\n# Animated Pre vs Post-2028 Influence into Oceanus Folk (fixed filter)\n\nlibrary(tidyverse)\nlibrary(igraph)\nlibrary(ggraph)\nlibrary(RColorBrewer)\nlibrary(magick)\n\n# 1. All influence edges\nall_influences &lt;- c(\n  \"InStyleOf\",\"InterpolatesFrom\",\"CoverOf\",\"LyricalReferenceTo\",\"DirectlySamples\",\n  \"PerformerOf\",\"ComposerOf\",\"ProducerOf\",\"LyricistOf\",\n  \"RecordedBy\",\"DistributedBy\",\"CollaboratedWith\",\"WrittenBy\",\"MemberOf\",\"Notoriety\"\n)\n\n# 2. Build infl2\ninfl2 &lt;- edges_clean %&gt;%\n  filter(`Edge Type` %in% all_influences) %&gt;%\n  left_join(nodes_clean %&gt;% select(rowid, media_year = year),\n            by = c(\"to\" = \"rowid\")) %&gt;%\n  left_join(nodes_clean %&gt;% select(rowid, source_genre = genre),\n            by = c(\"from\" = \"rowid\")) %&gt;%\n  filter(source_genre != \"Oceanus Folk\", !is.na(media_year))\n\n# 3. True cutoff‐based plot function\nmake_plot2 &lt;- function(cutoff_year, title_label) {\n  edges_df &lt;- infl2 %&gt;%\n    # Pre: year &lt;= cutoff_year; Post: year &gt; cutoff_year\n    filter(if (title_label == \"Pre-2028\")\n             media_year &lt;= cutoff_year\n           else\n             media_year &gt;  cutoff_year) %&gt;%\n    count(source_genre, name = \"weight\") %&gt;%\n    filter(weight &gt; 0) %&gt;%\n    transmute(from = source_genre, to = \"Oceanus Folk\", weight)\n  \n  verts &lt;- tibble(name = unique(c(edges_df$from, edges_df$to)))\n  gsub  &lt;- graph_from_data_frame(edges_df, vertices = verts, directed = TRUE)\n  layout &lt;- create_layout(gsub,\n                          layout = \"star\",\n                          center = which(V(gsub)$name==\"Oceanus Folk\"))\n  \n  # Palette exactly matching genres\n  genres &lt;- unique(edges_df$from)\n  pal    &lt;- if (length(genres) &lt;= 8) {\n    brewer.pal(length(genres), \"Set2\")\n  } else {\n    colorRampPalette(brewer.pal(8,\"Set2\"))(length(genres))\n  }\n  names(pal) &lt;- genres\n  \n  ggraph(layout) +\n    geom_edge_link(aes(colour = from, width = weight),\n                   arrow   = arrow(length = unit(3,\"mm\"), type=\"closed\"),\n                   end_cap = circle(3,\"mm\")) +\n    scale_colour_manual(\"Source Genre\", values = pal) +\n    scale_edge_width(range = c(0.5,2), guide = \"none\") +\n    geom_node_point(aes(filter = name==\"Oceanus Folk\"),\n                    color = \"#9E00E3\", size = 8) +\n    geom_node_point(aes(filter = name!=\"Oceanus Folk\"),\n                    color = \"#FFA500\", size = 5) +\n    geom_node_text(aes(label = name), repel=TRUE, size=4) +\n    labs(title = title_label) +\n    theme_void(base_size=12)\n}\n\n# 4. Generate & capture both plots\np_pre  &lt;- make_plot2(2027, \"Pre-2028\")\np_post &lt;- make_plot2(2027, \"Post-2028\")  # cutoff still 2027: post means &gt;2027 =&gt; 2028+\n\n# 5. Animate via magick\nimg_list &lt;- image_graph(width=600, height=600, res=96)\nprint(p_pre)\nprint(p_post)\n\nanim &lt;- image_animate(img_list, fps=1, dispose=\"previous\", delay=100)\nanim\n\n\n\n\n\n\n\n\n\n\n\nCode\nlibrary(tidyverse)\nlibrary(plotly)\nlibrary(RColorBrewer)\n\n# 1. Edge types\nedge_types &lt;- c(\n  \"InStyleOf\",\"InterpolatesFrom\",\"CoverOf\",\"LyricalReferenceTo\",\"DirectlySamples\",\n  \"PerformerOf\",\"ComposerOf\",\"ProducerOf\",\"LyricistOf\",\n  \"RecordedBy\",\"DistributedBy\",\n  \"CollaboratedWith\",\"WrittenBy\",\"MemberOf\",\"Notoriety\"\n)\n\n# 2. Oceanus Folk media rowids\nof_media &lt;- nodes_clean %&gt;%\n  filter(\n    genre == \"Oceanus Folk\",\n    `Node Type` %in% c(\"Song\",\"Album\")\n  ) %&gt;%\n  pull(rowid)\n\n# ——— NEW: find which source IDs lack a declared genre —————————————\ndecl_missing_ids &lt;- edges_clean %&gt;%\n  filter(\n    `Edge Type` %in% edge_types,\n    to %in% of_media\n  ) %&gt;%\n  left_join(\n    nodes_clean %&gt;% select(rowid, declared_genre = genre),\n    by = c(\"from\" = \"rowid\")\n  ) %&gt;%\n  filter(is.na(declared_genre)) %&gt;%\n  pull(from)\n# ————————————————————————————————————————————————————————————————\n\n# 3–5. Gather all incoming edges and infer any missing genres\nraw &lt;- edges_clean %&gt;%\n  filter(\n    `Edge Type` %in% edge_types,\n    to %in% of_media\n  ) %&gt;%\n  # bring in the declared genre if there is one\n  left_join(\n    nodes_clean %&gt;% select(rowid, declared_genre = genre),\n    by = c(\"from\" = \"rowid\")\n  ) %&gt;%\n  # infer genre for exactly those that were missing\n  left_join(\n    edges_clean %&gt;%\n      filter(from %in% decl_missing_ids) %&gt;%\n      left_join(\n        nodes_clean %&gt;% select(rowid, media_genre = genre),\n        by = c(\"to\" = \"rowid\")\n      ) %&gt;%\n      filter(!is.na(media_genre)) %&gt;%\n      count(from, media_genre) %&gt;%\n      group_by(from) %&gt;%\n      slice_max(n, with_ties = FALSE) %&gt;%\n      ungroup() %&gt;%\n      transmute(from, inferred_genre = media_genre),\n    by = \"from\"\n  ) %&gt;%\n  mutate(source_genre = coalesce(declared_genre, inferred_genre)) %&gt;%\n  filter(\n    !is.na(source_genre),\n    source_genre != \"Oceanus Folk\"\n  ) %&gt;%\n  # bring in the year of the OF media that each edge points into\n  left_join(\n    nodes_clean %&gt;% select(rowid, media_year = year),\n    by = c(\"to\" = \"rowid\")\n  ) %&gt;%\n  filter(!is.na(media_year))\n\n# 6. Tabulate per‐genre & year\ngenre_yearly_raw &lt;- raw %&gt;%\n  count(source_genre, media_year, name = \"new_links\")\n\n# 7. Expand grid through 2035 & cumulative sum\nall_genres &lt;- sort(unique(genre_yearly_raw$source_genre))\nfirst_year &lt;- min(genre_yearly_raw$media_year)\nyears      &lt;- seq(first_year, 2035)\n\ngenre_yearly &lt;- expand_grid(\n    source_genre = all_genres,\n    media_year   = years\n  ) %&gt;%\n  left_join(genre_yearly_raw, by = c(\"source_genre\",\"media_year\")) %&gt;%\n  replace_na(list(new_links = 0)) %&gt;%\n  group_by(source_genre) %&gt;%\n  arrange(media_year) %&gt;%\n  mutate(cumulative = cumsum(new_links)) %&gt;%\n  ungroup()\n\n# 8. Palette\npal &lt;- if (length(all_genres) &lt;= 8) {\n  brewer.pal(length(all_genres), \"Set2\")\n} else {\n  colorRampPalette(brewer.pal(8, \"Set2\"))(length(all_genres))\n}\nnames(pal) &lt;- all_genres\n\n# 9. Final plot with arrow on 2028 (labels staggered)\nplot_ly(\n  genre_yearly,\n  x      = ~media_year,\n  y      = ~cumulative,\n  color  = ~source_genre,\n  colors = pal,\n  type   = \"scatter\",\n  mode   = \"lines+markers\",\n  split  = ~source_genre,\n  hoverinfo = \"text\",\n  hovertext = ~paste0(\n    \"Genre: \", source_genre,\n    \"&lt;br&gt;Year: \", media_year,\n    \"&lt;br&gt;Cumulative: \", cumulative\n  )\n) %&gt;%\n  layout(\n    title  = \"External Genres’ Cumulative Influences into Oceanus Folk (thru 2035)\",\n    xaxis  = list(\n      title    = \"Year\",\n      range    = c(first_year, 2035),\n      tickmode = \"linear\",\n      dtick    = 5\n    ),\n    yaxis = list(title = \"Cumulative Links\"),\n    shapes = list(\n      list(type=\"line\", x0=2023, x1=2023, y0=0, y1=1,\n           xref=\"x\", yref=\"paper\", line=list(dash=\"dash\", color=\"black\")),\n      list(type=\"line\", x0=2026, x1=2026, y0=0, y1=1,\n           xref=\"x\", yref=\"paper\", line=list(dash=\"dash\", color=\"black\")),\n      list(type=\"line\", x0=2028, x1=2028, y0=0, y1=1,\n           xref=\"x\", yref=\"paper\", line=list(dash=\"dash\", color=\"firebrick\"))\n    ),\n    annotations = list(\n      list(\n        x = 2023, y = 0.98, xref = \"x\", yref = \"paper\",\n        text = \"Joined Ivy Echoes\",\n        showarrow = FALSE,\n        font = list(size = 11)\n      ),\n      list(\n        x = 2026, y = 0.88, xref = \"x\", yref = \"paper\",\n        text = \"Disbanded\",\n        showarrow = FALSE,\n        font = list(size = 11)\n      ),\n      list(\n        x = 2028, y = max(genre_yearly$cumulative), xref = \"x\", yref = \"y\",\n        text = \"Breakthrough\",\n        showarrow = TRUE, arrowhead = 2,\n        ax = 30, ay = -30,\n        font = list(color = \"firebrick\", size = 12)\n      )\n    ),\n    legend = list(xanchor = \"left\", x = 1.02, y = 0.5, orientation = \"v\")\n  )\n\n\n\n\n\n\n\nAnchoring Sailor Shift in the Graph\n\n\n\nIdentify her node (by name == “Sailor Shift”).\nPull every edge that directly touches her:\n\n“PerformedBy” / “VocalistOn” links from her to songs or albums.\n“MemberOf” that ties her to Ivy Echoes in 2023–2026.\n“CollaboratedWith”, “WrittenBy”, “ProducedBy” edges that connect her to other artists.\n“InStyleOf” / “InterpolatesFrom” edges where her tracks themselves draw on other genres.\nThat gives you her personal network: what she’s performed, who she’s written with, and which outside styles she sampled.\n\nMeasuring Her Impact on Oceanus Folk Once you’ve isolated Sailor’s own edges, you can compare two snapshots of the Oceanus Folk sub-graph:\n\nPre-2028 (before her viral hit) — look at all incoming edges into Oceanus Folk media up to 2027.\nPost-2028 (after her breakthrough) — look at incoming edges into all Oceanus Folk media from 2028 onward.\nFor each period you can:\nCount and rank the top source genres feeding into Oceanus Folk. Do new genres appear only after 2028?\nCompute centrality of the Oceanus Folk node: does it become more connected or denser?\nPlot the two networks side by side (or in small multiples), with Sailor Shift’s node highlighted post-2028, to show how her collaborations opened new stylistic “influence channels.”\n\nVisual Storytelling Ideas Time-sliced network (ggraph): one panel for 2027, one for 2030, one for 2040—Oceanus Folk in the center, with edges colored by period, and Sailor’s node glowing in the later panels.\n\nSankey/alluvial of source‐genre → Oceanus Folk before vs after 2028: see which genre flows grow or shrink.\nChord diagram of “Oceanus Folk ↔︎ Other genre” sampling/collaboration edges, highlighting how many loops go through Sailor.\nEdge‐count time series: daily/yearly counts of “CollaboratedWith” or “InStyleOf” into OF before/after 2028, plotted alongside her release dates."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#plot-approach-1",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#plot-approach-1",
    "title": "Take Home Exercise 2",
    "section": "Plot Approach",
    "text": "Plot Approach\nThe approach is similar to the animation plot, however I understand that readers would want to see exactly how many influences on that particular year. Hence, an interactivity plot to see the exact count of each year would be beneficial for readers to understand better.\nHover over to see the count of each year!"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#question-2-part-b",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#question-2-part-b",
    "title": "Take Home Exercise 2",
    "section": "Question 2: Part B",
    "text": "Question 2: Part B\nWhat genres and top artists have been most influenced by Oceanus Folk?\n\n\n\n\n\n\nPlot Approach\n\n\n\nFor this question, I felt like starting off with a visNetwork would give a great overview before I broke it down into granular details. For this visNetwork, I decided to go for how Oceanus Folk directly influenced other artists or genres. From there it spread even more to show which artists are under those genre and what songs/albums they have put out. I have added some visPhysics to give it some fluidity for a more fun interactive approach!\nHovering over each node will give you a count of what I am trying to find. Nodes are also weighted depending on their counts to show how much influence they have.\n\nOceanus Folk -&gt; Total Artists and Genres Influenced.\nGenres -&gt; Influences and Total Artists\nArtists -&gt; Total songs/albums\n\n\n\n\n\nCode\n# 1. Enrich edges with source genre and performer/media types\nedges2 &lt;- edges_clean %&gt;%\n  left_join(nodes_clean %&gt;% select(rowid, source_genre = genre),\n            by = c(\"from\" = \"rowid\")) %&gt;%\n  left_join(nodes_clean %&gt;% select(rowid, performer_type = `Node Type`),\n            by = c(\"from\" = \"rowid\")) %&gt;%\n  left_join(nodes_clean %&gt;% select(rowid, media_type = `Node Type`),\n            by = c(\"to\"   = \"rowid\"))\n\n# 2. Identify all Oceanus Folk media IDs\nfolk_media &lt;- nodes_clean %&gt;%\n  filter(`Node Type` %in% c(\"Song\",\"Album\") & genre == \"Oceanus Folk\") %&gt;%\n  pull(rowid)\n\n# 3. Count how many Oceanus Folk media each band performed\nfolk_cover_counts &lt;- edges2 %&gt;%\n  filter(`Edge Type` == \"PerformerOf\",\n         to %in% folk_media,\n         performer_type == \"MusicalGroup\") %&gt;%\n  left_join(nodes_clean %&gt;% select(rowid, name),\n            by = c(\"from\" = \"rowid\")) %&gt;%\n  count(name, name = \"n_folk\") %&gt;%\n  rename(artist = name)\n\n# 4. Gather all media (Song/Album) each band performed and count\nband_media_edges &lt;- edges2 %&gt;%\n  filter(`Edge Type` == \"PerformerOf\",\n         performer_type == \"MusicalGroup\",\n         media_type %in% c(\"Song\",\"Album\")) %&gt;%\n  left_join(nodes_clean %&gt;% select(rowid, band = name),\n            by = c(\"from\" = \"rowid\")) %&gt;%\n  left_join(nodes_clean %&gt;% select(rowid, media = name),\n            by = c(\"to\"   = \"rowid\")) %&gt;%\n  distinct(band, media)\n\nmedia_counts &lt;- band_media_edges %&gt;%\n  count(band, name = \"n_media\") %&gt;%\n  rename(artist = band)\n\n# 5. Compute Oceanus Folk → genre influence edges\ninfl_edges &lt;- edges2 %&gt;%\n  filter(source_genre == \"Oceanus Folk\",\n         `Edge Type` %in% c(\"InStyleOf\",\"InterpolatesFrom\",\"CoverOf\",\n      \"LyricalReferenceTo\",\"DirectlySamples\",\n      \"PerformerOf\",\"ComposerOf\",\"ProducerOf\",\n      \"LyricistOf\",\"RecordedBy\",\"DistributedBy\"))\n\ngenre_counts &lt;- infl_edges %&gt;%\n  left_join(nodes_clean %&gt;% select(rowid, genre),\n            by = c(\"to\" = \"rowid\")) %&gt;%\n  count(genre, name = \"n_influences\") %&gt;%\n  filter(genre != \"Oceanus Folk\")\n\n# 6. For each influenced genre, count distinct artists\nmedia_by_genre &lt;- nodes_clean %&gt;%\n  filter(`Node Type` %in% c(\"Song\",\"Album\") & genre %in% genre_counts$genre) %&gt;%\n  select(media_rowid = rowid, genre)\n\ngenre_band_edges &lt;- edges2 %&gt;%\n  filter(to %in% media_by_genre$media_rowid) %&gt;%\n  left_join(media_by_genre, by = c(\"to\" = \"media_rowid\")) %&gt;%\n  left_join(nodes_clean %&gt;% select(rowid, band_name = name, `Node Type`),\n            by = c(\"from\" = \"rowid\")) %&gt;%\n  filter(`Node Type` == \"MusicalGroup\") %&gt;%\n  distinct(genre, band_name)\n\ngenre_band_counts &lt;- genre_band_edges %&gt;%\n  count(genre, name = \"n_bands\")\n\n# 7. Build nodes_vis\n\nroot_node &lt;- tibble(\n  id    = \"Oceanus Folk\",\n  label = \"Oceanus Folk\",\n  group = \"Oceanus Folk\",\n  title = paste0(\n    \"Genres influenced: \", sum(genre_counts$n_influences),\n    \"&lt;br&gt;Total Artists: \", nrow(media_counts)\n  )\n)\n\ngenre_nodes &lt;- genre_counts %&gt;%\n  left_join(genre_band_counts, by = \"genre\") %&gt;%\n  transmute(\n    id    = genre,\n    label = genre,\n    group = \"Genre\",\n    title = paste0(\"Influences: \", n_influences, \"&lt;br&gt;Artists: \", n_bands)\n  )\n\nartist_nodes &lt;- full_join(folk_cover_counts, media_counts, by = \"artist\") %&gt;%\n  replace_na(list(n_folk = 0, n_media = 0)) %&gt;%\n  transmute(\n    id    = artist,\n    label = artist,\n    group = \"Artist\",\n    title = paste0(\"Folk covers: \", n_folk,\n                   \"&lt;br&gt;Total songs/albums: \", n_media)\n  )\n\nnodes_vis &lt;- bind_rows(root_node, genre_nodes, artist_nodes)\n\n# 8. Build edges_vis\n\ne1 &lt;- genre_counts %&gt;%\n  left_join(genre_band_counts, by = \"genre\") %&gt;%\n  transmute(\n    from  = \"Oceanus Folk\",\n    to    = genre,\n    title = paste0(\"Influences: \", n_influences, \"&lt;br&gt;Bands: \", n_bands)\n  )\n\ne2 &lt;- folk_cover_counts %&gt;%\n  transmute(\n    from  = \"Oceanus Folk\",\n    to    = artist,\n    title = paste0(\"Folk covers: \", n_folk)\n  )\n\ne3 &lt;- genre_band_edges %&gt;%\n  transmute(\n    from  = genre,\n    to    = band_name,\n    title = paste0(\"Genre performer: \", band_name)\n  )\n\nedges_vis &lt;- bind_rows(e1, e2, e3)\n\n# 9. Add Band → Media edges\n\nmedia_nodes &lt;- band_media_edges %&gt;%\n  transmute(\n    id    = media,\n    label = media,\n    group = \"Song/Album\",\n    title = paste0(\"Performed by: \", band)\n  ) %&gt;%\n  distinct(id, .keep_all = TRUE)\n\nmedia_edges &lt;- band_media_edges %&gt;%\n  transmute(\n    from  = band,\n    to    = media,\n    title = paste0(\"Performed by: \", band)\n  ) %&gt;%\n  distinct()\n\nnodes_vis &lt;- bind_rows(nodes_vis, media_nodes)\nedges_vis &lt;- bind_rows(edges_vis, media_edges)\n\n# 10. De-duplicate & size nodes\n\nnodes_vis &lt;- nodes_vis %&gt;% distinct(id, .keep_all = TRUE)\nedges_vis &lt;- edges_vis %&gt;% distinct(from, to, .keep_all = TRUE)\n\nnodes_vis &lt;- nodes_vis %&gt;%\n  left_join(genre_counts %&gt;% select(id = genre, n_influences), by = \"id\") %&gt;%\n  left_join(folk_cover_counts %&gt;% select(id = artist, n_folk), by = \"id\") %&gt;%\n  mutate(\n    size = case_when(\n      id == \"Oceanus Folk\" ~ 60,\n      group == \"Genre\"     ~ rescale(n_influences, to = c(20, 50)),\n      group == \"Artist\"    ~ rescale(n_folk, to = c(20, 50)),\n      TRUE                 ~ 20\n    )\n  ) %&gt;%\n  select(-n_influences, -n_folk)\n\n# 11. Prune to only artists directly linked from root or genres\n\nvalid_bands &lt;- unique(c(e2$to, e3$to))\n\nvalid_media &lt;- media_edges %&gt;%\n  filter(from %in% valid_bands) %&gt;%\n  pull(to)\n\nvalid_ids &lt;- c(\"Oceanus Folk\", genre_nodes$id, valid_bands, valid_media)\n\nnodes_vis &lt;- nodes_vis %&gt;%\n  filter(id %in% valid_ids)\n\n# 12. Draw the interactive network\nvisNetwork(nodes_vis, edges_vis, width = \"100%\", height = \"700px\") %&gt;%\n  visNodes(shape = \"dot\", font = list(size = 14, face = \"bold\")) %&gt;%\n  visEdges(smooth = FALSE, arrows = \"to\") %&gt;%\n  visGroups(groupname = \"Oceanus Folk\",\n            color = list(background = \"#9E00E3\", border = \"#9E00E3\")) %&gt;%\n  visGroups(groupname = \"Genre\",\n            color = list(background = \"#FFA500\", border = \"#FFA500\")) %&gt;%\n  visGroups(groupname = \"Artist\",\n            color = list(background = \"#00C2A1\", border = \"#00C2A1\")) %&gt;%\n  visGroups(groupname = \"Song/Album\",\n            color = list(background = \"#FFB6C1\", border = \"#FFB6C1\")) %&gt;%\n  visOptions(\n    highlightNearest   = list(enabled = TRUE, degree = 1, hover = TRUE),\n    nodesIdSelection   = list(enabled = TRUE, useLabels = TRUE)\n  ) %&gt;%\n  visLegend(useGroups = TRUE, position = \"left\", main = \"Legend\") %&gt;%\n  visLayout(randomSeed = 42) %&gt;%\n  visPhysics(solver = \"forceAtlas2Based\", stabilization = TRUE)\n\n\n\n\n\n\nThe visualization makes it clear that Oceanus Folk’s influence radiates most strongly into a handful of adjacent genres. Above all, Indie Folk, Dream Pop, and Synthwave. In the graph, these genres appear as the largest orange‐colored nodes directly linked to “Oceanus Folk,” indicating that they have the highest number of outgoing stylistic or production edges.\n\nIndie Folk sits at the very top of the list: many Oceanus Folk songs and albums have either been covered by Indie Folk artists, sampled by them, or cited as “in style of,” giving that genre the single largest count of influence connections. This made no surprise given Sailor’s collaboration with Indie Folk artists.\nDream Pop is the next most prominent recipient of Oceanus Folk’s creative DNA. A significant number of Oceanus Folk recordings have been interpolated or reimagined by Dream Pop acts.\nSynthwave also shows up as a major sink of influence. Several Oceanus Folk songwriters have co‐written or produced tracks for Synthwave artists.\n\nBehind those primary genre nodes, you also see smaller but still noticeable clusters for Alternative Rock, Indie Pop, and Post-Apocalyptic Folk. In each case, the node size reflects the total number of distinct Oceanus Folk to “genre” edges, and hovering over, say, the Indie Pop node reveals that a dozen or so Oceanus Folk songs and albums.\n\n\n\n\n\n\nPlot Approach\n\n\n\nGiven how huge the visNetwork is, I decided to further break down to Oceanus Folk’s influence by plotting and interactive plot using plotly. In this plot, the goal is to provide an actual count of how it was influenced and how Sailor’s breakthrough led to an increase in multiple genre’s influence. I added a milestone to show clearly how the influence changed because of Sailor Shift. Instead of finding just Oceanus Folk media, I looked for how Oceanus Folk’s artists also influenced other genres to give a better clarity of its influence.\nDouble click the legends to single out a genre or single click to remove them in the visualisation.\n\n\n\n\nCode\n# Oceanus Folk Influence on Other Genres\n# 1. Edge sets\nof_edges     &lt;- c(\"PerformerOf\",\"ComposerOf\",\"ProducerOf\",\"LyricistOf\")\nstyle_edges  &lt;- c(\"InStyleOf\",\"InterpolatesFrom\",\"CoverOf\",\n                  \"LyricalReferenceTo\",\"DirectlySamples\")\ncollab_edges &lt;- c(\"CollaboratedWith\",\"WrittenBy\",\"Notoriety\")\n\n# 2. Which media are Oceanus Folk?\nof_media &lt;- nodes_clean %&gt;%\n  filter(genre == \"Oceanus Folk\",\n         `Node Type` %in% c(\"Song\",\"Album\")) %&gt;%\n  pull(rowid)\n\n# 3. Hop 0→1: artists who made Oceanus Folk media\nof_artists &lt;- edges_clean %&gt;%\n  filter(`Edge Type` %in% of_edges, to %in% of_media) %&gt;%\n  pull(from) %&gt;% unique()\n\n# 4. Hop 1→2: every outgoing edge from those artists\nhop2_all &lt;- edges_clean %&gt;%\n  filter(from %in% of_artists) %&gt;%\n  transmute(target_media = to,\n            edge_type    = `Edge Type`)\n\n# 5. Annotate each target media’s genre & year\nhop2_all &lt;- hop2_all %&gt;%\n  left_join(\n    nodes_clean %&gt;% select(rowid, genre, year),\n    by = c(\"target_media\" = \"rowid\")\n  ) %&gt;%\n  rename(target_genre = genre,\n         target_year  = year) %&gt;%\n  filter(!is.na(target_genre),\n         target_genre != \"Oceanus Folk\",\n         !is.na(target_year))\n\n# 6. Count per genre/year and cumulative\nyearly &lt;- hop2_all %&gt;%\n  count(target_genre, target_year, name = \"new_links\") %&gt;%\n  arrange(target_genre, target_year) %&gt;%\n  group_by(target_genre) %&gt;%\n  mutate(cumulative = cumsum(new_links)) %&gt;%\n  ungroup()\n\n# 7. Extend through the years\nall_genres &lt;- unique(yearly$target_genre)\nstart_year &lt;- min(yearly$target_year[yearly$cumulative &gt; 0], na.rm = TRUE)\nall_years  &lt;- seq(start_year, 2035)\n\nyearly_ext &lt;- yearly %&gt;%\n  complete(target_genre = all_genres,\n           target_year  = all_years,\n           fill         = list(new_links = 0)) %&gt;%\n  group_by(target_genre) %&gt;%\n  arrange(target_year) %&gt;%\n  mutate(cumulative = cumsum(new_links)) %&gt;%\n  ungroup()\n\n# 8. Color palette\npal &lt;- if (length(all_genres) &lt;= 8) {\n  RColorBrewer::brewer.pal(length(all_genres), \"Set2\")\n} else {\n  colorRampPalette(RColorBrewer::brewer.pal(8, \"Set2\"))(length(all_genres))\n}\nnames(pal) &lt;- all_genres\n\n# 9. Build the plot\nplot_ly(\n  data  = yearly_ext,\n  x     = ~target_year,\n  y     = ~cumulative,\n  color = ~target_genre,\n  colors= pal,\n  type  = 'scatter',\n  mode  = 'lines+markers',\n  split = ~target_genre,\n  hoverinfo = 'text',\n  hovertext = ~paste0(\n    \"Genre: \", target_genre,\n    \"&lt;br&gt;Year: \", target_year,\n    \"&lt;br&gt;Cumulative: \", cumulative\n  )\n) %&gt;%\n  layout(\n    title = \"Oceanus Folk Influence on Other Genres\",\n    xaxis = list(\n      title     = \"Year\",\n      tickmode  = \"linear\",\n      dtick     = 5,\n      tickangle = 0,\n      range     = c(start_year, 2035)\n    ),\n    yaxis = list(title = \"Cumulative Influence\"),\n    legend = list(x = 1.02, y = 0.5, orientation = \"v\"),\n    shapes = list(\n      list(\n        type = \"line\",\n        x0 = 2028, x1 = 2028,\n        y0 = 0,    y1 = max(yearly_ext$cumulative, na.rm=TRUE),\n        line = list(dash=\"dash\", color=\"firebrick\")\n      )\n    ),\n    annotations = list(\n      list(\n        x = 2028, \n        y = max(yearly_ext$cumulative, na.rm=TRUE),\n        text = \"2028: Sailor’s Breakthrough\",\n        xref = \"x\", yref = \"y\",\n        xanchor = \"right\",\n        showarrow = TRUE, arrowhead = 2,\n        ax = -30, ay = -40,\n        font = list(color=\"firebrick\", size=12)\n      )\n    )\n  )\n\n\n\n\n\n\nIn the years before Sailor’s 2028 breakthrough, Oceanus Folk’s influence was modest and largely confined to a handful of neighboring styles. Indie Folk in particular crept forward slowly, Dream Pop made occasional forays, and undertones of Synthwave began to whisper among a few adventurous producers. If you imagine each genre as a sapling, Indie Folk was the first to send out a thin branch, Dream Pop a thinner bud, and Synthwave only a tiny sprout, all inching upward at a nearly flat trajectory.\nThen came 2028, when Sailor’s breakthrough exploded to the music scene. Almost overnight, the dashed vertical marker at 2028 on the plot signals a turning point of what had been small, incremental upticks in cumulative influences suddenly bend sharply upward. Indie Folk, turns into a burgeoning tree, its cumulative line accelerating steeply as dozens of Oceanus Folk‐rooted songwriters are plucked up by indie singer and songwriters eager to capture that genre. Dream Pop’s line, rockets skyward as reverb‐soaked Oceanus Folk riffs become the secret ingredient in its soundscapes. Synthwave, too, now climbs rapidly as producers sample the tunes from Oceanus Folk.\nBut the ripple doesn’t stop there. In the immediate aftermath of 2028, you also see Americana suddenly pick up speed. As Sailor integrates motifs borrowed from her homeland into her chart-topping tracks, a wave of rock-abilly and roots musicians reaches back to Oceanus Folk’s catalog for fresh lyrical phrasing and open-tuned guitar techniques. Desert Rock, previously untouched, begins to shimmer with Oceanus Folk echoes with melodies appearing in post-2028 influence, creating that melodic symbiosis. Even Jazz Surf Rock which was only influenced on 2023 weaved Oceanus Folk’s tunes into surf jams and jazzy improvisations.\nThe plot shows all six lines, Indie Folk, Dream Pop, Synthwave, Americana, Desert Rock, and Jazz Surf Rock arching upward together. Indie Folk holds its lead (with the tallest cumulative total), Dream Pop is just a hair behind, and Synthwave sits athird in raw numbers but with one of the steepest post-2028 slopes. Americana comes next, having doubled its pace; Desert Rock and Jazz Surf Rock which was almost imperceptible before, now rise visibly as smaller but steadily thickening lines. The story the plot tells is unmistakable. Sailor Shift’s breakthrough unlocked Oceanus Folk’s hidden currents, letting its melodies and techniques surge outward into an ever-wider array of genres. What began as isolated tendrils of influence transformed into a broad, interwoven canopy that, after 2028, shot skyward almost like a sudden summer growth spurt proving that one artist’s leap can cause entire forests of musical styles to flourish.\n\n\n\n\n\n\nPlot Approach\n\n\n\nIn this plot, I have laid out the top 10 artists that were of Oceanus Folk influence. It is a composite of top 10 who performed Oceanus Folk songs and top 10 who had a notoriety date in the songs. The reason for this is to answer the ‘top artist’ aspect of this question. I decided to only use edges “PerformerOf” to accurately describe artists of the Oceanus Folk genre. Since Persons and MusicalGroups did not have anything on the ‘genre’ column of nodes. I extracted who the song was performed by and pulled the genre of that song and tied it to the artist. It is important to note that this pulls the distinct songs that the artist performed. This method allowed me to know which artist were performing Oceanus Folk genre.\n\n\n\n\nCode\n# 1. Data Cleaning\nnodes_clean &lt;- nodes_tbl %&gt;%\n  mutate(\n    date_raw    = coalesce(release_date, written_date, notoriety_date),\n    date_parsed = parse_date_time(date_raw, orders = c(\"Ymd\",\"Y-m-d\",\"Y\"), quiet = TRUE),\n    year        = year(date_parsed),\n    rowid       = row_number()\n  ) %&gt;%\n  select(rowid, id, name, `Node Type`, genre, notoriety_date)\n\nedges_clean &lt;- links_tbl %&gt;%\n  rename(source_id = source, target_id = target) %&gt;%\n  left_join(nodes_clean %&gt;% select(id, rowid), by = c(\"source_id\" = \"id\")) %&gt;%\n  rename(from = rowid) %&gt;%\n  left_join(nodes_clean %&gt;% select(id, rowid), by = c(\"target_id\" = \"id\")) %&gt;%\n  rename(to   = rowid) %&gt;%\n  filter(!is.na(from) & !is.na(to))\n\n\n# 2.1 Invertible edge type = \"PerformerOf\"\ninvertible &lt;- c(\"PerformerOf\")\n\n# 2.2 All Oceanus Folk media rowids\nof_media &lt;- nodes_clean %&gt;%\n  filter(\n    genre == \"Oceanus Folk\",\n    `Node Type` %in% c(\"Song\", \"Album\", \"RecordLabel\")\n  ) %&gt;%\n  pull(rowid)\n\n# 2.3 All PerformerOf edges pointing to that media\ninv_edges_1 &lt;- edges_clean %&gt;%\n  filter(\n    `Edge Type` %in% invertible,\n    to                %in% of_media\n  ) %&gt;%\n  transmute(\n    media_id  = to,\n    artist_id = from\n  )\n\n# 2.4 Annotate artist names & types; keep only Person/MusicalGroup\ninv_annot_1 &lt;- inv_edges_1 %&gt;%\n  left_join(\n    nodes_clean %&gt;% select(rowid, ArtistName = name, ArtistType = `Node Type`),\n    by = c(\"artist_id\" = \"rowid\")\n  ) %&gt;%\n  filter(ArtistType %in% c(\"Person\", \"MusicalGroup\"))\n\n# 2.5 Count distinct OF media per artist\nartist_counts &lt;- inv_annot_1 %&gt;%\n  distinct(ArtistName, media_id) %&gt;%\n  count(ArtistName, name = \"Count\") %&gt;%\n  arrange(desc(Count))\n\n# 2.6 Top 10 artists\ntop10 &lt;- artist_counts %&gt;% slice_head(n = 10) %&gt;%\n  mutate(ArtistName = fct_reorder(ArtistName, Count))\n\n# 2.7 Plot 1: Top 10 OF Artists (by total media performed)\np1 &lt;- ggplot(top10, aes(x = ArtistName, y = Count)) +\n  geom_col(fill = \"#00C2A1\") +\n  geom_text(\n    aes(label = Count),\n    hjust = -0.1,\n    color = \"black\",\n    size = 4\n  ) +\n  coord_flip(clip = \"off\") +\n  labs(\n    x     = NULL,\n    y     = \"Songs/Albums Performed\"\n  ) +\n  scale_y_continuous(expand = expansion(mult = c(0, 0.2))) +\n  theme_minimal(base_size = 14) +\n  theme(\n    panel.grid.major      = element_blank(),\n    panel.grid.minor      = element_blank(),\n    axis.line             = element_line(color = \"black\"),\n    axis.text.y           = element_text(color = \"black\", margin = margin(r = 2)),\n    axis.text.x           = element_text(color = \"black\"),\n    axis.title.y          = element_text(face = \"bold\"),\n    plot.title            = element_text(face = \"bold\", hjust = 0.5),\n    plot.margin           = margin(t = 10, r = 40, b = 10, l = 10)\n  )\n\n# 3. Top 10 Artists by notoriety\n\n# 3.1 Filter to Oceanus Folk songs with a notoriety_date\nfamous_of_songs &lt;- nodes_clean %&gt;%\n  filter(\n    `Node Type`   == \"Song\",\n    genre         == \"Oceanus Folk\",\n    !is.na(notoriety_date),\n    str_trim(notoriety_date) != \"\"\n  ) %&gt;%\n  select(song_rowid = rowid)\n\n# 3.2 Find all PerformerOf edges pointing to those “famous” OF songs\ninv_edges_2 &lt;- edges_clean %&gt;%\n  filter(\n    `Edge Type` == \"PerformerOf\",\n    to            %in% famous_of_songs$song_rowid\n  ) %&gt;%\n  transmute(\n    song_rowid   = to,\n    artist_rowid = from\n  )\n\n# 3.3 Annotate artist names & types; keep only Person/MusicalGroup\ninv_annot_2 &lt;- inv_edges_2 %&gt;%\n  left_join(\n    nodes_clean %&gt;% select(artist_rowid = rowid, ArtistName = name, ArtistType = `Node Type`),\n    by = \"artist_rowid\"\n  ) %&gt;%\n  filter(ArtistType %in% c(\"Person\", \"MusicalGroup\"))\n\n# 3.4 Count “famous OF songs” per artist\nartist_famous_counts &lt;- inv_annot_2 %&gt;%\n  distinct(ArtistName, song_rowid) %&gt;%\n  count(ArtistName, name = \"FamousSongCount\") %&gt;%\n  arrange(desc(FamousSongCount))\n\nsailor_row &lt;- artist_famous_counts %&gt;% filter(ArtistName == \"Sailor Shift\")\ntop10_famous &lt;- artist_famous_counts %&gt;%\n  filter(ArtistName != \"Sailor Shift\") %&gt;%\n  slice_head(n = 9) %&gt;%\n  bind_rows(sailor_row) %&gt;%\n  mutate(ArtistName = fct_reorder(ArtistName, FamousSongCount))\n\n# 3.5 Plot 2: Top 10 Artists by “Famous” OF Songs \np2 &lt;- ggplot(top10_famous, aes(x = ArtistName, y = FamousSongCount)) +\n  geom_col(fill = \"#6C88C4\") +\n  geom_text(\n    aes(label = FamousSongCount),\n    hjust = -0.1,\n    color = \"black\",\n    size = 3.5\n  ) +\n  coord_flip(clip = \"off\") +\n  labs(\n    x     = NULL,\n    y     = \"Number of Famous Songs\"\n  ) +\n  scale_y_continuous(expand = expansion(mult = c(0, 0.2))) +\n  theme_minimal(base_size = 14) +\n  theme(\n    panel.grid.major      = element_blank(),\n    panel.grid.minor      = element_blank(),\n    axis.line             = element_line(color = \"black\"),\n    axis.text.y           = element_text(color = \"black\", margin = margin(r = 2)),\n    axis.text.x           = element_text(color = \"black\"),\n    axis.title.y          = element_text(face = \"bold\"),\n    plot.title            = element_text(face = \"bold\", hjust = 0.5),\n    plot.margin           = margin(t = 10, r = 40, b = 10, l = 10)\n  )\n\n# 4. Combine plots side by side\n\ncombined_plot &lt;- p1 + p2 + \n  plot_layout(ncol = 2, widths = c(1, 1)) +\n  plot_annotation(\n    title = \"Oceanus Folk Artist Performance Overview\",\n    subtitle = \"Left: Top 10 Artists by Songs Performed | Right: Top 10 Artists by Famous Songs (including Sailor Shift)\",\n    theme = theme(\n      plot.title    = element_text(size = 16, face = \"bold\", hjust = 0.5),\n      plot.subtitle = element_text(size = 12, hjust = 0.5, face = \"bold\"),\n      plot.margin   = margin(t = 10, r = 10, b = 10, l = 10)\n    )\n  )\n\n# 5. Display the composite\nprint(combined_plot)\n\n\n\n\n\n\n\n\n\nThe composite bar chart offers a side‐by‐side comparison of two key dimensions of Oceanus Folk performance. On the left, “Songs/Albums Performed” ranks the ten artists who have appeared most frequently on any Oceanus Folk recording. At the very top sits Sailor Shift, with nearly three dozen distinct credits which is an unsurprising result given how prolific she’s been. Just below her, a small tier of collaborators (both solo vocalists and instrumentalists) also boast double‐digit performance counts, signaling that they have been core contributors to the genre alongside Sailor over many years. As you move toward the bottom of the left panel, you see artists whose Oceanus Folk appearances taper into single digits, suggesting a longer “tail” of musicians who participate less regularly but still make meaningful contributions.\nOn the right, “Number of Famous Songs” highlights the ten artists whose tracks most often reached a notoriety threshold (i.e., notable songs). Here, the ranking shifts notably. For example, some artists who had only a handful of overall performances land in the top five on the right because the few songs they did perform became breakout hits. Conversely, a few high‐volume collaborators fall out of the upper tiers because, despite performing many tracks, fewer of those tracks broke into “notorious” status.\n\n\n\n\n\n\nPlot Approach\n\n\n\nIn this plot, I wanted to break down even further from the bar graph above fo the top 3. The point of this is to show how the top artists (both in terms of performing Oceanus Folk and with notable songs) are interconnected to each other. Showing the spirit of collaboration in the music industry of the Oceanus Folk genre.\nClick on the edges or the nodes to see how they are interconnected! I have removed labels on them to give it a clear look, but they are still accessible when clicking on it.\n\n\n\n\nCode\n# 1 Data Cleaning\nnodes_clean &lt;- nodes_tbl %&gt;%\n  mutate(\n    date_raw    = coalesce(release_date, written_date, notoriety_date),\n    date_parsed = parse_date_time(date_raw, orders = c(\"Ymd\",\"Y-m-d\",\"Y\"), quiet = TRUE),\n    year        = year(date_parsed),\n    rowid       = row_number()\n  ) %&gt;%\n  select(rowid, id, name, `Node Type`, genre, notoriety_date)\n\nedges_clean &lt;- links_tbl %&gt;%\n  rename(source_id = source, target_id = target) %&gt;%\n  left_join(nodes_clean %&gt;% select(id, rowid), by = c(\"source_id\" = \"id\")) %&gt;%\n  rename(from = rowid) %&gt;%\n  left_join(nodes_clean %&gt;% select(id, rowid), by = c(\"target_id\" = \"id\")) %&gt;%\n  rename(to = rowid) %&gt;%\n  filter(!is.na(from) & !is.na(to))\n\n# 2. Identify top 3 by total OF media performed \nof_media &lt;- nodes_clean %&gt;%\n  filter(\n    genre == \"Oceanus Folk\",\n    `Node Type` %in% c(\"Song\", \"Album\", \"RecordLabel\")\n  ) %&gt;%\n  pull(rowid)\n\ninv_edges &lt;- edges_clean %&gt;%\n  filter(`Edge Type` == \"PerformerOf\", to %in% of_media) %&gt;%\n  transmute(media_id = to, artist_id = from)\n\ninv_annot &lt;- inv_edges %&gt;%\n  left_join(nodes_clean %&gt;% select(rowid, ArtistName = name, ArtistType = `Node Type`),\n            by = c(\"artist_id\" = \"rowid\")) %&gt;%\n  filter(ArtistType %in% c(\"Person\", \"MusicalGroup\"))\n\nartist_counts &lt;- inv_annot %&gt;%\n  distinct(ArtistName, media_id) %&gt;%\n  count(ArtistName, name = \"TotalOF\") %&gt;%\n  arrange(desc(TotalOF))\n\ntop3_performed &lt;- artist_counts %&gt;% slice_head(n = 3) %&gt;% pull(ArtistName)\n\n# 3. Identify top 3 by number of famous OF songs \nfamous_of_songs &lt;- nodes_clean %&gt;%\n  filter(\n    `Node Type` == \"Song\",\n    genre        == \"Oceanus Folk\",\n    !is.na(notoriety_date),\n    str_trim(notoriety_date) != \"\"\n  ) %&gt;%\n  pull(rowid)\n\ninv_famous &lt;- edges_clean %&gt;%\n  filter(`Edge Type` == \"PerformerOf\", to %in% famous_of_songs) %&gt;%\n  transmute(fav_media_id = to, fav_artist_id = from)\n\ninv_famous_annot &lt;- inv_famous %&gt;%\n  left_join(nodes_clean %&gt;% select(rowid, ArtistName = name, ArtistType = `Node Type`),\n            by = c(\"fav_artist_id\" = \"rowid\")) %&gt;%\n  filter(ArtistType %in% c(\"Person\", \"MusicalGroup\"))\n\nartist_famous_counts &lt;- inv_famous_annot %&gt;%\n  distinct(ArtistName, fav_media_id) %&gt;%\n  count(ArtistName, name = \"FamousOF\") %&gt;%\n  arrange(desc(FamousOF))\n\ntop3_famous &lt;- artist_famous_counts %&gt;% slice_head(n = 3) %&gt;% pull(ArtistName)\n\n# 4. Combine the two top‐3 sets \nall_artists &lt;- union(top3_performed, top3_famous)\n\n# 5. Build full igraph \ng_full &lt;- graph_from_data_frame(\n  d = edges_clean %&gt;% select(from, to),\n  vertices = nodes_clean %&gt;% mutate(name = as.character(rowid)),\n  directed = FALSE\n)\n\n# 6. Find all shortest‐path nodes/edges connecting each artist pair \nartist_rowids &lt;- nodes_clean %&gt;%\n  filter(name %in% all_artists) %&gt;%\n  select(name, rowid) %&gt;%\n  mutate(rowid = as.character(rowid)) %&gt;%\n  deframe()\n\npairs &lt;- combn(all_artists, 2, simplify = FALSE)\n\nall_path_nodes &lt;- character(0)\nall_path_edges &lt;- integer(0)\n\nfor (pair in pairs) {\n  a   &lt;- pair[1]; b   &lt;- pair[2]\n  v_a &lt;- artist_rowids[a]; v_b &lt;- artist_rowids[b]\n  sp  &lt;- shortest_paths(g_full, from = v_a, to = v_b, output = \"both\")\n  if (length(sp$vpath[[1]]) == 0) next\n  verts &lt;- sp$vpath[[1]] %&gt;% as_ids()\n  all_path_nodes &lt;- union(all_path_nodes, verts)\n  eids &lt;- sp$epath[[1]]\n  all_path_edges &lt;- union(all_path_edges, as.integer(eids))\n}\n\n# 7. Include songs and albums performed by top artists\nmedia_performed &lt;- inv_annot %&gt;%\n  filter(ArtistName %in% top3_performed) %&gt;%\n  pull(media_id) %&gt;% as.character()\n\nmedia_famous &lt;- inv_famous_annot %&gt;%\n  filter(ArtistName %in% top3_famous) %&gt;%\n  pull(fav_media_id) %&gt;% as.character()\n\nalbum_performed &lt;- edges_clean %&gt;%\n  filter(`Edge Type` == \"PerformerOf\",\n         to %in% nodes_clean$rowid[nodes_clean$`Node Type` == \"Album\"],\n         from %in% nodes_clean$rowid[nodes_clean$name %in% all_artists]) %&gt;%\n  pull(to) %&gt;%\n  as.character()\n\nsong_nodes  &lt;- union(media_performed, media_famous)\nalbum_nodes &lt;- album_performed\nall_media_nodes &lt;- union(song_nodes, album_nodes)\n\nall_path_nodes &lt;- union(all_path_nodes, all_media_nodes)\n\n# 8. Prepare nodes_vis (**** ONLY CHANGE HERE ****) ------------------------\nnodes_vis &lt;- nodes_clean %&gt;%\n  filter(as.character(rowid) %in% all_path_nodes) %&gt;%\n  transmute(\n    id        = as.character(rowid),\n    label     = name,                      \n    shape     = if_else(rowid %in% famous_of_songs, \"star\", \"circle\"),\n    color     = case_when(\n                 name %in% top3_performed & !(name %in% top3_famous) ~ \"#6C88C4\",\n                 name %in% top3_famous             & !(name %in% top3_performed)  ~ \"#00C2A1\",\n                 name %in% intersect(top3_performed, top3_famous)         ~ \"#FFBF65\",\n                 rowid %in% famous_of_songs                                      ~ \"#FF5768\",\n                 TRUE                                                           ~ \"#FFBF65\"\n               ),\n    size      = 20,                        \n    font.size = 0,                      \n    title     = paste0(\n                  \"&lt;b&gt;\", name, \"&lt;/b&gt;&lt;br/&gt;Type: \", `Node Type`,\n                  if_else(rowid %in% famous_of_songs, \"&lt;br/&gt;Notorious\", \"\")\n                )\n  )\n\n# 9. Prepare edges_vis \n# 9a. Shortest‐path edges\npath_edges_df &lt;- as_data_frame(g_full, what = \"edges\") %&gt;%\n  mutate(edge_index = row_number()) %&gt;%\n  filter(edge_index %in% all_path_edges) %&gt;%\n  transmute(\n    from   = as.character(from),\n    to     = as.character(to),\n    title  = edges_clean$`Edge Type`[edge_index]\n  )\n\n# 9b. Edges linking artists → songs\nartist_song_edges &lt;- bind_rows(\n  inv_annot %&gt;%\n    filter(ArtistName %in% all_artists, as.character(media_id) %in% song_nodes) %&gt;%\n    transmute(\n      from   = artist_rowids[ArtistName],\n      to     = as.character(media_id),\n      title  = paste0(\"Performed: \", nodes_clean$name[media_id])\n    ),\n  inv_famous_annot %&gt;%\n    filter(ArtistName %in% all_artists, as.character(fav_media_id) %in% song_nodes) %&gt;%\n    transmute(\n      from   = artist_rowids[ArtistName],\n      to     = as.character(fav_media_id),\n      title  = paste0(\"Performed (Famous): \", nodes_clean$name[fav_media_id])\n    )\n) %&gt;% distinct()\n\n# 9c. Edges linking artists → albums\nartist_album_edges &lt;- edges_clean %&gt;%\n  filter(\n    `Edge Type` == \"PerformerOf\",\n    as.character(to) %in% album_nodes,\n    as.character(from) %in% artist_rowids\n  ) %&gt;%\n  transmute(\n    from   = as.character(from),\n    to     = as.character(to),\n    title  = paste0(\"Performed Album: \", nodes_clean$name[to])\n  ) %&gt;%\n  distinct()\n\n# Combine all edges\nedges_vis &lt;- bind_rows(path_edges_df, artist_song_edges, artist_album_edges)\n\n# 10. Render visNetwork (edges black, with arrows, no labels) ------------\nvisNetwork(nodes_vis, edges_vis, width = \"100%\", height = \"600px\") %&gt;%\n  visNodes(\n    shape         = nodes_vis$shape,\n    color         = nodes_vis$color,\n    size          = nodes_vis$size,\n    font          = list(size = nodes_vis$font.size)\n  ) %&gt;%\n  visEdges(\n    smooth        = FALSE,\n    color         = list(color = \"#000000\"), # edges are now black\n    arrows        = \"to\",                     # arrowheads at target end\n    label         = NULL                      # no edge‐type labels displayed\n  ) %&gt;%\n  visOptions(\n    highlightNearest   = list(enabled = TRUE, degree = 1),\n    nodesIdSelection   = list(enabled = TRUE, useLabels = TRUE)\n  ) %&gt;%\n  visLegend(\n    useGroups = FALSE,\n    addNodes = list(\n      list(label = \"Top-3 Performers\",         shape = \"dot\", color = \"#00C2A1\", size = 20),\n      list(label = \"Top-3 Notoriety Artists\",  shape = \"dot\", color = \"#6C88C4\", size = 20),\n      list(label = \"Notorious Songs\",          shape = \"star\",color = \"#FF5768\",size = 20),\n      list(label = \"Intersect/Songs/Albums\", shape = \"dot\", color = \"#FFBF65\", size = 20)\n    ),\n    position = \"right\",\n    width    = 0.25\n  ) %&gt;%\n  visLayout(randomSeed = 42)\n\n\n\n\n\n\nSailor Shift occupies a central place in this collaborative web. Her lone “notorious” single brought together her own performance with the work of producers, songwriters, and session musicians, each of whom lent their expertise and reputation to lift the track into the spotlight. Those collaborators then appear on other artists’ albums, carrying the credibility they gained from working with her into new projects. At the same time, Sailor’s album credits feature a rotating roster of musicians and producers whose ongoing involvement with different performers helps spread attention across the genre. In this way, Sailor’s breakthrough hit both depended on and fueled the successes of her collaborators, and her broader discography continually weaves together a network of performers and creators who boost each other’s visibility and chart positions.\n\n\n\n\n\n\nTip\n\n\n\nElaborating on the previous plot and to find what gave the surge pre and post 2028 of Oceanus Folk. I plotted a composite plot of the top 10 artists pre and post 2028. The idea of this plot is to show Sailor Shift’s and other notable artists contribution to the genre.\n\n\n\n\nCode\nnodes_clean &lt;- nodes_tbl %&gt;%\n  mutate(\n    date_raw    = coalesce(release_date, written_date, notoriety_date),\n    date_parsed = parse_date_time(date_raw, orders = c(\"Ymd\",\"Y-m-d\",\"Y\"), quiet = TRUE),\n    year        = year(date_parsed),\n    rowid       = row_number()\n  ) %&gt;%\n  select(rowid, id, name, `Node Type`, genre, year, notoriety_date)\n\nedges_clean &lt;- links_tbl %&gt;%\n  rename(source_id = source, target_id = target) %&gt;%\n  left_join(nodes_clean %&gt;% select(id, rowid), by = c(\"source_id\" = \"id\")) %&gt;%\n  rename(from = rowid) %&gt;%\n  left_join(nodes_clean %&gt;% select(id, rowid), by = c(\"target_id\" = \"id\")) %&gt;%\n  rename(to   = rowid) %&gt;%\n  filter(!is.na(from) & !is.na(to))\n\n# 2. Define all “influence” edges to include \ninvertible   &lt;- c(\"PerformerOf\", \"ComposerOf\", \"ProducerOf\", \"LyricistOf\")\ndirect_edges &lt;- c(\"CollaboratedWith\", \"WrittenBy\", \"Notoriety\")\n\n# 3. Identify Oceanus Folk media rowids \nof_media &lt;- nodes_clean %&gt;%\n  filter(\n    genre == \"Oceanus Folk\",\n    `Node Type` %in% c(\"Song\", \"Album\", \"RecordLabel\")\n  ) %&gt;%\n  pull(rowid)\n\n# 4a. Invert the “Of” edges (artist → media) -\ninv &lt;- edges_clean %&gt;%\n  filter(`Edge Type` %in% invertible, to %in% of_media) %&gt;%\n  transmute(media  = to,\n            artist = from,\n            type   = `Edge Type`)\n\n# 4b. Pull any direct OF→artist edges \ndirect &lt;- edges_clean %&gt;%\n  filter(`Edge Type` %in% direct_edges, from %in% of_media) %&gt;%\n  transmute(media  = from,\n            artist = to,\n            type   = `Edge Type`)\n\n# 5. Combine and annotate by artist name, artist type, and media year \nall_edges &lt;- bind_rows(inv, direct) %&gt;%\n  left_join(\n    nodes_clean %&gt;% select(rowid, ArtistName = name, ArtistType = `Node Type`),\n    by = c(\"artist\" = \"rowid\")\n  ) %&gt;%\n  left_join(\n    nodes_clean %&gt;% select(rowid, MediaYear = year),\n    by = c(\"media\" = \"rowid\")\n  ) %&gt;%\n  filter(\n    ArtistType %in% c(\"Person\", \"MusicalGroup\"),\n    !is.na(MediaYear)\n  )\n\n# 6. Split into Pre-2028 / Post-2028 and count edges per artist \nbreak_year &lt;- 2028\n\nartist_period_counts &lt;- all_edges %&gt;%\n  mutate(\n    period = if_else(MediaYear &lt; break_year, \"Pre-2028\", \"Post-2028\")\n  ) %&gt;%\n  count(period, ArtistName, name = \"Edges\")\n\n# 7. For each period, pick the top 10 artists \ntopN &lt;- 10\ntop_artists &lt;- artist_period_counts %&gt;%\n  group_by(period) %&gt;%\n  slice_max(Edges, n = topN, with_ties = FALSE) %&gt;%\n  ungroup()\n\n# 8. Helper function to build a single bar-chart facet \nmake_bar &lt;- function(df, title_text, bar_color, y_limits = NULL) {\n  p &lt;- ggplot(df, aes(\n        x = reorder_within(ArtistName, Edges, period),\n        y = Edges\n      )) +\n      geom_col(fill = bar_color, width = 0.6) +\n      geom_text(\n        aes(label = Edges),\n        hjust = -0.1,\n        color = \"black\",\n        size  = 5\n      ) +\n      scale_x_reordered() +\n      coord_flip(clip = \"off\") +\n      labs(\n        title = title_text,\n        x     = NULL,\n        y     = \"Number of Influences\"\n      ) +\n      theme_classic(base_size = 14) +\n      theme(\n        plot.title         = element_text(color = \"black\", face = \"bold\", size = 15),\n        axis.text.y        = element_text(color = \"black\", margin = margin(r = 6)),\n        axis.text.x        = element_text(color = \"black\"),\n        axis.title.y       = element_text(color = \"black\", face = \"bold\"),\n        axis.title.x       = element_text(color = \"black\"),\n        strip.text         = element_text(color = \"black\", face = \"bold\"),\n        axis.ticks.length  = unit(4, \"pt\")\n      )\n\n  if (!is.null(y_limits)) {\n    p &lt;- p + scale_y_continuous(\n                  limits = y_limits,\n                  breaks = seq(y_limits[1], y_limits[2], by = 10),\n                  expand = expansion(mult = c(0, 0.05))\n               )\n  } else {\n    max_edges &lt;- max(df$Edges)\n    p &lt;- p + scale_y_continuous(\n                  breaks = seq(0, max_edges, by = 10),\n                  expand = expansion(mult = c(0, 0.1))\n               )\n  }\n\n  return(p)\n}\n\n# 9. Build the two panels\np_pre &lt;- make_bar(\n  top_artists %&gt;% filter(period == \"Pre-2028\"),\n  title_text = \"Pre-2028 Influences\",\n  bar_color  = \"blue\",\n  y_limits   = c(0, 40)  \n)\n\np_post &lt;- make_bar(\n  top_artists %&gt;% filter(period == \"Post-2028\"),\n  title_text = \"Post-2028 Influences\",\n  bar_color  = \"orange\"\n  # no y_limits so it auto-scales\n)\n\n# 10. Combine side by side with patchwork \ncombined_influence_plot &lt;- p_pre + p_post +\n  plot_layout(ncol = 2) & \n  theme(plot.margin = margin(t = 10, r = 20, b = 10, l = 10))\n\n# Display the combined plot\nprint(combined_influence_plot)\n\n\n\n\n\n\n\n\n\nBefore 2028, Oceanus Folk’s reach was relatively contained: only a handful of acts were drawing on its traditions. Drowned Harbor, Ivy Echos, and Saltwater Weavers were the three foremost brands of that early wave and each one looked to Oceanus Folk as a source of inspiration, building their identities and fan bases on the strength of those roots. Ivy Echos even formed around shared love for the genre in 2023, though they disbanded by 2026, leaving a clear mark on their local scene. Saltwater Weavers and Drowned Harbor similarly paid homage to Oceanus Folk in their earliest releases, helping to cement the genre’s reputation among a small but devoted audience.\nEverything changed in 2028 when Sailor Shift broke through: her meteoric rise catapulted Oceanus Folk onto a much larger stage. Almost overnight, Sailor became the leading figure associated with the genre, and her collaborations with both high-profile and grassroots brought fresh attention to the tradition. In the years following her breakthrough, two newer names emerged as the genre’s top inheritors: Daniel O’ Connell and Beatrice Albright. Together, Sailor Shift, Daniel, and Beatrice now represent the single most visible wave of Oceanus Folk’s influence, showing how the genre’s ideas moved from a niche, regional circle into a much broader, contemporary spotlight."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#question-2-part-c",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#question-2-part-c",
    "title": "Take Home Exercise 2",
    "section": "Question 2: Part C",
    "text": "Question 2: Part C\nOn the converse, how has Oceanus Folk changed with the rise of Sailor Shift? From which genres does it draw most of its contemporary inspiration?\n\n\n\n\n\n\nPlot Approach\n\n\n\nFor this plot, I wanted to capture how influential Sailor Shift is. Since I have given Sailor Shift a face at the beginning of this take-home, I decided to use ggimage and use that image as a node. I decided to plot her direct influences and how those direct influenced managed to link with others. I have also included nodes that are either a Song, Artists or Album. The goal is to give visual representation of how her influence impacted the genre and artists around her. To give it a better meaning, I chose to use the ‘radial’ layout with Sailor Shift node in the exact center - visually underscoring her role as the nexus of new connections within the Oceanus Folk universe.\n\n\n\n\nCode\n# 0. Edge types to include\nedge_types &lt;- c(\n  \"PerformerOf\",\"ComposerOf\",\"ProducerOf\",\"LyricistOf\",\n  \"RecordedBy\",\"DistributedBy\",\"InStyleOf\",\"InterpolatesFrom\",\n  \"CoverOf\",\"LyricalReferenceTo\",\"DirectlySamples\",\"MemberOf\"\n)\n\n# 1. First‐hop: direct outgoing from Sailor Shift (id=17255)\nfh &lt;- links_tbl %&gt;% \n  filter(source == 17255, `Edge Type` %in% edge_types)\ndirect_links &lt;- nrow(fh)\n\n# 2. Second‐hop: outgoing from those first‐hop targets\nsh &lt;- links_tbl %&gt;% \n  filter(source %in% fh$target, `Edge Type` %in% edge_types)\n\n# 3. Combine hops\nall_hops &lt;- bind_rows(fh, sh)\n\n# 4. Build edges_df with human-readable names\nedges_df &lt;- all_hops %&gt;% transmute(\n  from = nodes_clean$name[match(source, nodes_clean$id)],\n  to   = nodes_clean$name[match(target, nodes_clean$id)],\n  rel  = `Edge Type`\n)\n\n# 5. Create igraph\ng &lt;- graph_from_data_frame(edges_df, directed = TRUE)\n\n# 6. Assign vertex attributes\nV(g)$label &lt;- V(g)$name\nV(g)$type  &lt;- nodes_clean$`Node Type`[match(V(g)$name, nodes_clean$name)]\n\n# 7. Prepare palettes\npal_nodes &lt;- brewer.pal(max(3, length(unique(V(g)$type))), \"Set2\") %&gt;%\n  setNames(sort(unique(V(g)$type)))\npal_edges &lt;- brewer.pal(max(3, length(unique(edges_df$rel))), \"Set3\") %&gt;%\n  setNames(sort(unique(edges_df$rel)))\n\n# 8. Generate a radial (star) layout centered on Sailor Shift\nlayout_tbl &lt;- create_layout(\n  g,\n  layout = \"star\",\n  center = which(V(g)$name == \"Sailor Shift\")\n)\n\n# 9. Extract Sailor Shift’s coords\nss_coords &lt;- layout_tbl %&gt;% filter(name == \"Sailor Shift\")\n\n# 10. Plot with bold title\nggraph(layout_tbl) +\n  geom_edge_link(aes(color = rel),\n                 arrow      = arrow(type = \"closed\", length = unit(2, \"mm\")),\n                 end_cap    = circle(2, \"mm\"),\n                 edge_width = 0.7) +\n  scale_edge_color_manual(\"Links\", values = pal_edges) +\n  # Sailor Shift as image\n  geom_image(data = ss_coords,\n             aes(x = x, y = y),\n             image = \"sailorshift3.png\",\n             size  = 0.15,\n             by    = \"width\") +\n  # other nodes as points\n  geom_node_point(data = layout_tbl %&gt;% filter(name != \"Sailor Shift\"),\n                  aes(x = x, y = y, color = type),\n                  size = 4) +\n  scale_color_manual(\"Nodes\", values = pal_nodes) +\n  theme_void() +\n  labs(\n    title    = \"Sailor Shift’s Impact on Oceanus Folk\",\n    subtitle = paste0(\"She has \", direct_links, \" direct outgoing links\")\n  ) +\n  theme(\n    plot.title    = element_text(face = \"bold\", size =15),   \n    plot.subtitle = element_text()    \n  )\n\n\n\n\n\n\n\n\n\nSailor Shift’s arrival in 2028 fundamentally reshaped Oceanus Folk by breaking its insular mold and thrusting it into the wider musical conversation. Her chart‐topping solo work and high‐profile collaborations brought unprecedented attention to the genre, inspiring a wave of new artists to experiment with its sounds and themes. By partnering with producers, co‐writing with peers, and championing up-and-coming musicians, she opened pathways for Oceanus Folk to evolve and transformed it from a niche regional style into a dynamic, globally recognized movement.\n\n\n\n\n\n\nPlot Approach\n\n\n\nAfter plotting Sailor Shift network, I wanted to answer the question on what genre influenced Oceanus Folk. I decided to use plotly where it will be a timeline of what genre has influenced Oceanus Folk throughout the years. In this plot, when you click play it’ll start the genre influencing timeline. The nodes will get big and small depending if it has influenced by computing the links into Oceanus Folk. I ahve chosen to use all edge types but only to the nodes ‘Song’ and ‘Album’ to give a more accurate representation that affected the genre.\n\n\n\n\nCode\n# 1. Define all “influence” edge types to include\nedge_types &lt;- c(\n  \"InStyleOf\",\"InterpolatesFrom\",\"CoverOf\",\"LyricalReferenceTo\",\"DirectlySamples\",\n  \"PerformerOf\",\"ComposerOf\",\"ProducerOf\",\"LyricistOf\",\n  \"RecordedBy\",\"DistributedBy\",\n  \"CollaboratedWith\",\"WrittenBy\",\"MemberOf\",\"Notoriety\"\n)\n\n# 2. Identify all Oceanus Folk media rowids (Song or Album)\nof_media &lt;- nodes_clean %&gt;%\n  filter(\n    genre      == \"Oceanus Folk\",\n    `Node Type` %in% c(\"Song\",\"Album\")\n  ) %&gt;%\n  pull(rowid)\n\n# 3. Find which source‐IDs lack a declared genre among edges → Oceanus Folk media\ndecl_missing_ids &lt;- edges_clean %&gt;%\n  filter(`Edge Type` %in% edge_types, to %in% of_media) %&gt;%\n  left_join(\n    nodes_clean %&gt;% select(rowid, declared_genre = genre),\n    by = c(\"from\" = \"rowid\")\n  ) %&gt;%\n  filter(is.na(declared_genre)) %&gt;%\n  pull(from) %&gt;%\n  unique()\n\n# 4. Gather all incoming edges into OF media, attaching declared or inferred genre, plus media year\nraw &lt;- edges_clean %&gt;%\n  filter(`Edge Type` %in% edge_types, to %in% of_media) %&gt;%\n  # (a) attach declared_genre if present\n  left_join(\n    nodes_clean %&gt;% select(rowid, declared_genre = genre),\n    by = c(\"from\" = \"rowid\")\n  ) %&gt;%\n  # (b) for any “from” with NA declared_genre, infer by its outgoing media genres\n  left_join(\n    edges_clean %&gt;%\n      filter(from %in% decl_missing_ids) %&gt;%\n      left_join(\n        nodes_clean %&gt;% select(rowid, media_genre = genre),\n        by = c(\"to\" = \"rowid\")\n      ) %&gt;%\n      filter(!is.na(media_genre)) %&gt;%\n      count(from, media_genre) %&gt;%\n      group_by(from) %&gt;%\n      slice_max(n, with_ties = FALSE) %&gt;%\n      ungroup() %&gt;%\n      transmute(from, inferred_genre = media_genre),\n    by = \"from\"\n  ) %&gt;%\n  # (c) pick declared_genre if available, otherwise inferred_genre\n  mutate(source_genre = coalesce(declared_genre, inferred_genre)) %&gt;%\n  # keep only real, non‐Oceanus genres\n  filter(\n    !is.na(source_genre),\n    source_genre != \"Oceanus Folk\"\n  ) %&gt;%\n  # (d) attach the release year of that OF media\n  left_join(\n    nodes_clean %&gt;% select(rowid, media_year = year),\n    by = c(\"to\" = \"rowid\")\n  ) %&gt;%\n  filter(!is.na(media_year))\n\n# 5. Count “new_links” per (source_genre, media_year)\ngenre_yearly_raw &lt;- raw %&gt;%\n  count(source_genre, media_year, name = \"new_links\")\n\n# 6. Build a full (genre × year) grid, then compute cumulative sums\nall_genres &lt;- sort(unique(genre_yearly_raw$source_genre))\nfirst_year &lt;- min(genre_yearly_raw$media_year)\nyears      &lt;- seq(first_year, 2035)\n\ngenre_yearly &lt;- expand_grid(\n    source_genre = all_genres,\n    media_year   = years\n  ) %&gt;%\n  left_join(genre_yearly_raw, by = c(\"source_genre\",\"media_year\")) %&gt;%\n  replace_na(list(new_links = 0)) %&gt;%\n  group_by(source_genre) %&gt;%\n  arrange(media_year) %&gt;%\n  mutate(cumulative = cumsum(new_links)) %&gt;%\n  ungroup()\n\n# 7. Build the central node (“Oceanus Folk”) for every frame:\ncentral_df &lt;- tibble(\n  genre      = \"Oceanus Folk\",\n  frame      = years,\n  x          = 0,\n  y          = 0,\n  cumulative = NA_integer_,  # not used for sizing\n  marker_size= 50,\n  genre_type = \"Oceanus Folk\"\n)\n\n# 8. Position peripheral genres around a circle of radius \nangle     &lt;- seq(0, 2*pi, length.out = length(all_genres)+1)[-1]\npositions &lt;- tibble(\n  genre = all_genres,\n  x     = 2 * cos(angle),\n  y     = 2 * sin(angle)\n)\n\n# 9. Build per‐genre × frame table, attach cumulative, then scale marker_size from 12→40\nperiph_df &lt;- positions %&gt;%\n  expand_grid(frame = years) %&gt;%\n  left_join(\n    genre_yearly,\n    by = c(\"genre\" = \"source_genre\", \"frame\" = \"media_year\")\n  ) %&gt;%\n  replace_na(list(new_links = 0, cumulative = 0)) %&gt;%\n  mutate(\n    marker_size = scales::rescale(cumulative, to = c(12, 40)),\n    genre_type  = \"Other Genres\"\n  )\n\n# 10. Build edges_df: once a genre’s cumulative &gt; 0, draw a grey segment from (x,y) → (0,0)\nedges_df &lt;- periph_df %&gt;%\n  group_by(genre) %&gt;%\n  filter(frame &gt;= min(frame[cumulative &gt; 0], na.rm = TRUE)) %&gt;%\n  ungroup() %&gt;%\n  transmute(\n    x     = x,\n    y     = y,\n    xend  = 0,\n    yend  = 0,\n    frame = frame,\n    width = 1   # keep all spokes the same thickness\n  )\n\n# 11. Combine central + peripheral into a single nodes_df\nnodes_df &lt;- bind_rows(\n  central_df,\n  periph_df\n)\n\n# 12. Plotly animation:\nplot_ly(width = 700, height = 700) %&gt;%\n  # (a) Gray “spokes” from each genre → center once cumulative &gt; 0\n  add_segments(\n    data      = edges_df,\n    x         = ~x,    y    = ~y,\n    xend      = ~xend, yend = ~yend,\n    frame     = ~frame,\n    line      = list(color = \"grey60\", width = 1),\n    hoverinfo = \"none\",\n    showlegend= FALSE\n  ) %&gt;%\n  # (b) Single add_markers() for all nodes, coloring by genre_type\n  add_markers(\n    data      = nodes_df,\n    x         = ~x,    y    = ~y,\n    frame     = ~frame,\n    color     = ~genre_type,\n    colors    = c(\n                  \"Oceanus Folk\" = \"#9E00E3\",   # purple\n                  \"Other Genres\" = \"#FFA500\"    # orange\n                ),\n    marker    = list(opacity = 0.9,\n                     size    = ~marker_size),  # &lt;= put size here\n    text      = ~if_else(\n                   genre == \"Oceanus Folk\",\n                   \"Oceanus Folk\",\n                   paste0(genre, \"&lt;br&gt;Cumulative: \", cumulative)\n                 ),\n    hoverinfo = \"text\",\n    showlegend= TRUE\n  ) %&gt;%\n  layout(\n    title = \"Tracing the Evolution of Oceanus Folk: Incoming Genre Influences Over Time\",\n    xaxis = list(showgrid = FALSE, zeroline = FALSE, visible = FALSE),\n    yaxis = list(showgrid = FALSE, zeroline = FALSE, visible = FALSE),\n    legend = list(orientation = \"h\", x = 0.3, y = 1.02)\n  ) %&gt;%\n  animation_opts(frame = 1000, transition = 500, redraw = FALSE)\n\n\n\n\n\n\nBefore Sailor Shift burst onto the scene, Oceanus Folk was a relatively insular genre, borrowing sparingly from a handful of adjacent styles. In the earliest frames of the animation, you can see Dream Pop and Speed Metal as the only spokes reaching toward the center, tiny, tentative connections that reflect an experimental period in the late 1990s and early 2000s. By 2004, however, those two lone influences begin to swell, and a second tier of genres starts to edge in: lo-fi Indie Folk murmurings, hints of Psychedelic Rock, and even wisps of Ambient Electronica begin appearing in the periphery. As these new inspirations accumulate, the Dream Pop and Speed Metal nodes grow more prominent, signaling that Oceanus Folk artists were increasingly weaving synthy textures and heavier guitar riffs into their traditional acoustic framework.\n\n\n\n\n\n\nPlot Approach\n\n\n\nNext, I wanted to show as a snapshot of the pre and post 2028 genre influences on Oceanus Folk. To keep the flow of the story, I decided to plot the same kind of graph style. This is to identify the genres that were influencing Oceanus Folk before Sailor’s breakthrough and after. I decided to do an animation showing the pre and post to capture this. I used all edges types to find any influences of genres that were incoming to Oceanus Folk. Lines are thicker weighted to indicate more influences going into Oceanus Folk. However, it is important to note that this is just a visual representation, not meant to be quantitative.\n\n\n\n\nCode\n# Animated Pre vs Post-2028 Influence into Oceanus Folk (fixed filter)\n\n# 1. All influence edges\nall_influences &lt;- c(\n  \"InStyleOf\",\"InterpolatesFrom\",\"CoverOf\",\"LyricalReferenceTo\",\"DirectlySamples\",\n  \"PerformerOf\",\"ComposerOf\",\"ProducerOf\",\"LyricistOf\",\n  \"RecordedBy\",\"DistributedBy\",\"CollaboratedWith\",\"WrittenBy\",\"MemberOf\",\"Notoriety\"\n)\n\n# 2. Build infl2: incoming edges into Oceanus Folk media with genre & year\ninfl2 &lt;- edges_clean %&gt;%\n  filter(`Edge Type` %in% all_influences) %&gt;%\n  left_join(\n    nodes_clean %&gt;% select(rowid, media_year = year),\n    by = c(\"to\" = \"rowid\")\n  ) %&gt;%\n  left_join(\n    nodes_clean %&gt;% select(rowid, source_genre = genre),\n    by = c(\"from\" = \"rowid\")\n  ) %&gt;%\n  filter(source_genre != \"Oceanus Folk\", !is.na(media_year))\n\n# 3. True cutoff–based plot function (no legend)\nmake_plot2 &lt;- function(cutoff_year, title_label) {\n  edges_df &lt;- infl2 %&gt;%\n    # Pre: year ≤ cutoff_year; Post: year &gt; cutoff_year\n    filter(if (title_label == \"Pre-2028\")\n             media_year &lt;= cutoff_year\n           else\n             media_year &gt;  cutoff_year) %&gt;%\n    count(source_genre, name = \"weight\") %&gt;%\n    filter(weight &gt; 0) %&gt;%\n    transmute(from = source_genre, to = \"Oceanus Folk\", weight)\n\n  verts &lt;- tibble(name = unique(c(edges_df$from, edges_df$to)))\n  gsub  &lt;- graph_from_data_frame(edges_df, vertices = verts, directed = TRUE)\n  layout &lt;- create_layout(\n    gsub,\n    layout = \"star\",\n    center = which(V(gsub)$name == \"Oceanus Folk\")\n  )\n\n  genres &lt;- unique(edges_df$from)\n  pal    &lt;- if (length(genres) &lt;= 8) {\n    brewer.pal(length(genres), \"Set2\")\n  } else {\n    colorRampPalette(brewer.pal(8, \"Set2\"))(length(genres))\n  }\n  names(pal) &lt;- genres\n\n  ggraph(layout) +\n    geom_edge_link(\n      aes(colour = from, width = weight),\n      arrow      = arrow(length = unit(3, \"mm\"), type = \"closed\"),\n      end_cap    = circle(3, \"mm\"),\n      show.legend = FALSE  # turn off legend for edges\n    ) +\n    scale_colour_manual(values = pal, guide = FALSE) +\n    scale_edge_width(range = c(0.5, 2), guide = \"none\") +\n    geom_node_point(\n      data = layout %&gt;% filter(name == \"Oceanus Folk\"),\n      aes(x = x, y = y),\n      color = \"#9E00E3\",\n      size = 8,\n      show.legend = FALSE\n    ) +\n    geom_node_point(\n      data = layout %&gt;% filter(name != \"Oceanus Folk\"),\n      aes(x = x, y = y),\n      color = \"#FFA500\",\n      size = 5,\n      show.legend = FALSE\n    ) +\n    geom_node_text(aes(label = name), repel = TRUE, size = 4) +\n    labs(title = title_label) +\n    theme_void(base_size = 12)\n}\n\n# 4. Generate & capture both plots\np_pre  &lt;- make_plot2(2027, \"Pre-2028\")\np_post &lt;- make_plot2(2027, \"Post-2028\")  # cutoff still 2027 → “Post-2028” means media_year &gt; 2027\n\n# 5. Animate via magick\nimg_list &lt;- image_graph(width = 600, height = 600, res = 96)\nprint(p_pre)\nprint(p_post)\n\nanim &lt;- image_animate(img_list, fps = 1, dispose = \"previous\", delay = 100)\nanim\n\n\n\n\n\n\n\n\n\nAfter Sailor Shift’s breakthrough in 2028, a clear new chapter opens. Indie Folk surges forward first which is unsurprising, given Sailor’s collaborations with key figures in that scene which brings warm, stripped-back songwriting into Oceanus Folk’s DNA. Dream Pop, ever present in the genre’s DNA, blooms even further as Sailor’s atmospheric sensibilities encourage fellow artists to embrace lush, reverb laden soundscapes. Meanwhile, Desert Rock begins to make its mark, infusing sprawling, sun-baked riffs and a raw, open-road spirit that pushes Oceanus Folk beyond its coastal roots. Together, these three post-2028 threads Indie Folk, Dream Pop, and Desert Rock illustrates how Sailor Shift’s influence unlocked a broader palette of contemporary inspiration, transforming Oceanus Folk into a vibrant, genre-fluid movement.\n\n\n\n\n\n\nPlot Approach\n\n\n\nTo break down to its granularity of the plot above and support the visual representation, I decided to do the same interactive plot I did for Oceanus Folk -&gt; Other Genres that I have plotted earlier. However, in this case it is Other Genres -&gt; Oceanus Folk. This is to keep familiarity that the readers had when they read the earlier parts of the story. Since the background indicated the breakup of Ivy Echos meant each member went to do their own things, I plotted the line of each milestone so that readers can see how the music scene changed in each milestone.\nSame concept as before, double-click to single out a genre or single-click to remove them from the interactive plot.\n\n\n\n\nCode\n# 1. Edge types\nedge_types &lt;- c(\n  \"InStyleOf\",\"InterpolatesFrom\",\"CoverOf\",\"LyricalReferenceTo\",\"DirectlySamples\",\n  \"PerformerOf\",\"ComposerOf\",\"ProducerOf\",\"LyricistOf\",\n  \"RecordedBy\",\"DistributedBy\",\n  \"CollaboratedWith\",\"WrittenBy\",\"MemberOf\",\"Notoriety\"\n)\n\n# 2. Oceanus Folk media rowids\nof_media &lt;- nodes_clean %&gt;%\n  filter(\n    genre == \"Oceanus Folk\",\n    `Node Type` %in% c(\"Song\",\"Album\")\n  ) %&gt;%\n  pull(rowid)\n\n# 3. Find source ID\ndecl_missing_ids &lt;- edges_clean %&gt;%\n  filter(\n    `Edge Type` %in% edge_types,\n    to %in% of_media\n  ) %&gt;%\n  left_join(\n    nodes_clean %&gt;% select(rowid, declared_genre = genre),\n    by = c(\"from\" = \"rowid\")\n  ) %&gt;%\n  filter(is.na(declared_genre)) %&gt;%\n  pull(from)\n\n\n# 4. Gather all incoming edges and infer any missing genres\nraw &lt;- edges_clean %&gt;%\n  filter(\n    `Edge Type` %in% edge_types,\n    to %in% of_media\n  ) %&gt;%\n  # bring in the declared genre if there is one\n  left_join(\n    nodes_clean %&gt;% select(rowid, declared_genre = genre),\n    by = c(\"from\" = \"rowid\")\n  ) %&gt;%\n  # infer genre for exactly those that were missing\n  left_join(\n    edges_clean %&gt;%\n      filter(from %in% decl_missing_ids) %&gt;%\n      left_join(\n        nodes_clean %&gt;% select(rowid, media_genre = genre),\n        by = c(\"to\" = \"rowid\")\n      ) %&gt;%\n      filter(!is.na(media_genre)) %&gt;%\n      count(from, media_genre) %&gt;%\n      group_by(from) %&gt;%\n      slice_max(n, with_ties = FALSE) %&gt;%\n      ungroup() %&gt;%\n      transmute(from, inferred_genre = media_genre),\n    by = \"from\"\n  ) %&gt;%\n  mutate(source_genre = coalesce(declared_genre, inferred_genre)) %&gt;%\n  filter(\n    !is.na(source_genre),\n    source_genre != \"Oceanus Folk\"\n  ) %&gt;%\n  # bring in the year of the Oceanus Folk media that each edge points into\n  left_join(\n    nodes_clean %&gt;% select(rowid, media_year = year),\n    by = c(\"to\" = \"rowid\")\n  ) %&gt;%\n  filter(!is.na(media_year))\n\n# 6. Tabulate per‐genre & year\ngenre_yearly_raw &lt;- raw %&gt;%\n  count(source_genre, media_year, name = \"new_links\")\n\n# 7. Expand grid through 2040 & cumulative sum\nall_genres &lt;- sort(unique(genre_yearly_raw$source_genre))\nfirst_year &lt;- min(genre_yearly_raw$media_year)\nyears      &lt;- seq(first_year, 2040)\n\ngenre_yearly &lt;- expand_grid(\n    source_genre = all_genres,\n    media_year   = years\n  ) %&gt;%\n  left_join(genre_yearly_raw, by = c(\"source_genre\",\"media_year\")) %&gt;%\n  replace_na(list(new_links = 0)) %&gt;%\n  group_by(source_genre) %&gt;%\n  arrange(media_year) %&gt;%\n  mutate(cumulative = cumsum(new_links)) %&gt;%\n  ungroup()\n\n# 8. Palette\npal &lt;- if (length(all_genres) &lt;= 8) {\n  brewer.pal(length(all_genres), \"Set2\")\n} else {\n  colorRampPalette(brewer.pal(8, \"Set2\"))(length(all_genres))\n}\nnames(pal) &lt;- all_genres\n\n# 9. Final plot with arrow on 2028 (labels staggered)\nplot_ly(\n  genre_yearly,\n  x      = ~media_year,\n  y      = ~cumulative,\n  color  = ~source_genre,\n  colors = pal,\n  type   = \"scatter\",\n  mode   = \"lines+markers\",\n  split  = ~source_genre,\n  hoverinfo = \"text\",\n  hovertext = ~paste0(\n    \"Genre: \", source_genre,\n    \"&lt;br&gt;Year: \", media_year,\n    \"&lt;br&gt;Cumulative: \", cumulative\n  )\n) %&gt;%\n  layout(\n    title  = \"Genres Influencing Oceanus Folk\",\n    xaxis  = list(\n      title    = \"Year\",\n      range    = c(first_year, 2035),\n      tickmode = \"linear\",\n      dtick    = 5\n    ),\n    yaxis = list(title = \"Cumulative Influence\"),\n    shapes = list(\n      list(type=\"line\", x0=2023, x1=2023, y0=0, y1=1,\n           xref=\"x\", yref=\"paper\", line=list(dash=\"dash\", color=\"black\")),\n      list(type=\"line\", x0=2026, x1=2026, y0=0, y1=1,\n           xref=\"x\", yref=\"paper\", line=list(dash=\"dash\", color=\"black\")),\n      list(type=\"line\", x0=2028, x1=2028, y0=0, y1=1,\n           xref=\"x\", yref=\"paper\", line=list(dash=\"dash\", color=\"firebrick\"))\n    ),\n    annotations = list(\n      list(\n        x = 2023, y = 0.98, xref = \"x\", yref = \"paper\",\n        text = \"Joined Ivy Echoes\",\n        showarrow = FALSE,\n        font = list(size = 11)\n      ),\n      list(\n        x = 2026, y = 0.88, xref = \"x\", yref = \"paper\",\n        text = \"Disbanded\",\n        showarrow = FALSE,\n        font = list(size = 11)\n      ),\n      list(\n        x = 2028, y = max(genre_yearly$cumulative), xref = \"x\", yref = \"y\",\n        text = \"Breakthrough\",\n        showarrow = TRUE, arrowhead = 2,\n        ax = 30, ay = -30,\n        font = list(color = \"firebrick\", size = 12)\n      )\n    ),\n    legend = list(xanchor = \"left\", x = 1.02, y = 0.5, orientation = \"v\")\n  )\n\n\n\n\n\n\nIn the years leading up to 2023, Oceanus Folk quietly absorbed stray echoes of Dream Pop, Indie Folk, and Desert Rock but these influences remained moderate, visible only to attentive insiders. When Ivy Echoes formed in 2023, however, that subtle cross-pollination burst into full view: Dream Pop’s lush atmospheres wove through Ivy Echoes’ harmonies, Indie Folk’s confessional songwriting guided their lyrics, and Desert Rock’s driving rhythms underpinned their arrangements. In that same moment, Americana’s warm, rootsy undercurrents and Space Rock’s expansive sonic palette began to color Oceanus Folk recordings with greater clarity, while Synthwave’s neon-inflected pulses, Doom Metal’s darker resonance, and Jazz Surf Rock’s adventurous improvisations surfaced in the background textures. Ivy Echoes’ emergence crystallized these long-forming currents, signaling that Oceanus Folk was no longer a self-contained idiom but a living, evolving genre enriched by Dream Pop, Indie Folk, Desert Rock, and its newfound kin."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08b.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08b.html#learning-outcome",
    "title": "Hands-on Exercise 8A",
    "section": "1.1 Learning Outcome",
    "text": "1.1 Learning Outcome\nBy the end of this hands-on exercise, you will acquire the following skills by using appropriate R packages:\n\nTo import an aspatial data file into R.\nTo convert it into simple point feature data frame and at the same time, to assign an appropriate projection reference to the newly create simple point feature data frame.\nTo plot interactive proportional symbol maps."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08b.html#the-data",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08b.html#the-data",
    "title": "Hands-on Exercise 8A",
    "section": "3.1 The data",
    "text": "3.1 The data\nThe data set use for this hands-on exercise is called SGPools_svy21. The data is in csv file format.\nFigure below shows the first 15 records of SGPools_svy21.csv. It consists of seven columns. The XCOORD and YCOORD columns are the x-coordinates and y-coordinates of SingPools outlets and branches. They are in Singapore SVY21 Projected Coordinates System."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08b.html#data-import-and-preparation",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08b.html#data-import-and-preparation",
    "title": "Hands-on Exercise 8A",
    "section": "3.2 Data Import and Preparation",
    "text": "3.2 Data Import and Preparation\nThe code chunk below uses read_csv() function of readr package to import SGPools_svy21.csv into R as a tibble data frame called sgpools.\n\nsgpools &lt;- read_csv(\"data/aspatial/SGPools_svy21.csv\")\n\nAfter importing the data file into R, it is important for us to examine if the data file has been imported correctly.\nThe code chunk below shows list() is used to do the job.\n\nlist(sgpools) \n\n[[1]]\n# A tibble: 306 × 7\n   NAME           ADDRESS POSTCODE XCOORD YCOORD `OUTLET TYPE` `Gp1Gp2 Winnings`\n   &lt;chr&gt;          &lt;chr&gt;      &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;                     &lt;dbl&gt;\n 1 Livewire (Mar… 2 Bayf…    18972 30842. 29599. Branch                        5\n 2 Livewire (Res… 26 Sen…    98138 26704. 26526. Branch                       11\n 3 SportsBuzz (K… Lotus …   738078 20118. 44888. Branch                        0\n 4 SportsBuzz (P… 1 Sele…   188306 29777. 31382. Branch                       44\n 5 Prime Serango… Blk 54…   552542 32239. 39519. Branch                        0\n 6 Singapore Poo… 1A Woo…   731001 21012. 46987. Branch                        3\n 7 Singapore Poo… Blk 64…   370064 33990. 34356. Branch                       17\n 8 Singapore Poo… Blk 88…   370088 33847. 33976. Branch                       16\n 9 Singapore Poo… Blk 30…   540308 33910. 41275. Branch                       21\n10 Singapore Poo… Blk 20…   560202 29246. 38943. Branch                       25\n# ℹ 296 more rows\n\n\nNotice that the sgpools data in tibble data frame and not the common R data frame."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08b.html#creating-a-sf-data-frame-from-an-aspatial-data-frame",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08b.html#creating-a-sf-data-frame-from-an-aspatial-data-frame",
    "title": "Hands-on Exercise 8A",
    "section": "3.3 Creating a sf data frame from an aspatial data frame",
    "text": "3.3 Creating a sf data frame from an aspatial data frame\nThe code chunk below converts sgpools data frame into a simple feature data frame by using st_as_sf() of sf packages\n\nsgpools_sf &lt;- st_as_sf(sgpools, \n                       coords = c(\"XCOORD\", \"YCOORD\"),\n                       crs= 3414)\n\nThings to learn from the arguments above:\n\nThe coords argument requires you to provide the column name of the x-coordinates first then followed by the column name of the y-coordinates.\nThe crs argument required you to provide the coordinates system in epsg format. EPSG: 3414 is Singapore SVY21 Projected Coordinate System. You can search for other country’s epsg code by refering to epsg.io.\n\nFigure below shows the data table of sgpools_sf. Notice that a new column called geometry has been added into the data frame.\n\nYou can display the basic information of the newly created sgpools_sf by using the code chunk below.\n\nlist(sgpools_sf)\n\n[[1]]\nSimple feature collection with 306 features and 5 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 7844.194 ymin: 26525.7 xmax: 45176.57 ymax: 47987.13\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 306 × 6\n   NAME                         ADDRESS POSTCODE `OUTLET TYPE` `Gp1Gp2 Winnings`\n * &lt;chr&gt;                        &lt;chr&gt;      &lt;dbl&gt; &lt;chr&gt;                     &lt;dbl&gt;\n 1 Livewire (Marina Bay Sands)  2 Bayf…    18972 Branch                        5\n 2 Livewire (Resorts World Sen… 26 Sen…    98138 Branch                       11\n 3 SportsBuzz (Kranji)          Lotus …   738078 Branch                        0\n 4 SportsBuzz (PoMo)            1 Sele…   188306 Branch                       44\n 5 Prime Serangoon North        Blk 54…   552542 Branch                        0\n 6 Singapore Pools Woodlands C… 1A Woo…   731001 Branch                        3\n 7 Singapore Pools 64 Circuit … Blk 64…   370064 Branch                       17\n 8 Singapore Pools 88 Circuit … Blk 88…   370088 Branch                       16\n 9 Singapore Pools Anchorvale … Blk 30…   540308 Branch                       21\n10 Singapore Pools Ang Mo Kio … Blk 20…   560202 Branch                       25\n# ℹ 296 more rows\n# ℹ 1 more variable: geometry &lt;POINT [m]&gt;"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08b.html#it-all-started-with-an-interactive-point-symbol-map",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08b.html#it-all-started-with-an-interactive-point-symbol-map",
    "title": "Hands-on Exercise 8A",
    "section": "4.1 It all started with an interactive point symbol map",
    "text": "4.1 It all started with an interactive point symbol map\nThe code chunks below are used to create an interactive point symbol map\n\ntm_shape(sgpools_sf) + \n  tm_bubbles(fill = \"red\",\n           size = 1,\n           col = \"black\",\n           lwd = 1)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08b.html#lets-make-it-proportional",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08b.html#lets-make-it-proportional",
    "title": "Hands-on Exercise 8A",
    "section": "4.2 Lets make it proportional",
    "text": "4.2 Lets make it proportional\nTo draw a proportional symbol map, we need to assign a numerical variable to the size visual attribute. The code chunks below show that the variable Gp1Gp2Winnings is assigned to size visual attribute.\n\ntm_shape(sgpools_sf) + \n  tm_bubbles(fill = \"red\",\n             size = \"Gp1Gp2 Winnings\",\n             col = \"black\",\n             lwd = 1)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08b.html#lets-give-it-a-different-colour",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08b.html#lets-give-it-a-different-colour",
    "title": "Hands-on Exercise 8A",
    "section": "4.3 Lets give it a different colour",
    "text": "4.3 Lets give it a different colour\nThe proportional symbol map can be further improved by using the colour visual attribute. In the code chunks below, OUTLET_TYPE variable is used as the colour attribute variable.\n\ntm_shape(sgpools_sf) + \n  tm_bubbles(fill = \"OUTLET TYPE\", \n             size = \"Gp1Gp2 Winnings\",\n             col = \"black\",\n             lwd = 1)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08b.html#i-have-a-twin-brother",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08b.html#i-have-a-twin-brother",
    "title": "Hands-on Exercise 8A",
    "section": "4.3 I have a twin brother",
    "text": "4.3 I have a twin brother\nAn impressive and little-know feature of tmap’s view mode is that it also works with faceted plots. The argument sync in tm_facets() can be used in this case to produce multiple maps with synchronised zoom and pan settings.\n\ntm_shape(sgpools_sf) + \n  tm_bubbles(fill = \"OUTLET TYPE\", \n             size = \"Gp1Gp2 Winnings\",\n             col = \"black\",\n             lwd = 1) + \n  tm_facets(by= \"OUTLET TYPE\",\n            nrow = 1,\n            sync = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBefore you end the session, it is wiser to switch tmap’s Viewer back to plot mode by using the code chunk below.\n\ntmap_mode(\"plot\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08a.html",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08a.html",
    "title": "Hands-on Exercise 8A",
    "section": "",
    "text": "In this hands-on exercise, the key R package use is tmap package in R. Beside tmap package, four other R packages will be used. They are:\n\nreadr for importing delimited text file,\ntidyr for tidying data,\ndplyr for wrangling data and\nsf for handling geospatial data.\n\nAmong the four packages, readr, tidyr and dplyr are part of tidyverse package.\nThe code chunk below will be used to install and load these packages in RStudio.\n\npacman::p_load(sf, tmap, tidyverse)\n\n\n\n\n\n\n\nNote\n\n\n\nNotice that we only need to isntall tidyverse instead of readr, tidyr and dplyr individually."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08a.html#the-data",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08a.html#the-data",
    "title": "Hands-on Exercise 8A",
    "section": "2.1 The Data",
    "text": "2.1 The Data\nTwo data set will be used to create the choropleth map. They are:\n\nMaster Plan 2014 Subzone Boundary (Web) (i.e. MP14_SUBZONE_WEB_PL) in ESRI shapefile format. It can be downloaded at data.gov.sg This is a geospatial data. It consists of the geographical boundary of Singapore at the planning subzone level. The data is based on URA Master Plan 2014.\nSingapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2011-2020 in csv format (i.e. respopagesextod2011to2020.csv). This is an aspatial data fie. It can be downloaded at Department of Statistics, Singapore Although it does not contain any coordinates values, but it’s PA and SZ fields can be used as unique identifiers to geocode to MP14_SUBZONE_WEB_PL shapefile."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08a.html#importing-geospatial-data-into-r",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08a.html#importing-geospatial-data-into-r",
    "title": "Hands-on Exercise 8A",
    "section": "2.2 Importing Geospatial Data into R",
    "text": "2.2 Importing Geospatial Data into R\nThe code chunk below uses the st_read() function of sf package to import MP14_SUBZONE_WEB_PL shapefile into R as a simple feature data frame called mpsz.\n\nmpsz &lt;- st_read(dsn = \"data/geospatial\", \n                layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `/Users/norhendra/norhendra/ISS608-VAA/Hands-on_Ex/Hands-on_Ex08/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\nmpsz\n\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29..."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08a.html#importing-attribute-data-into-r",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08a.html#importing-attribute-data-into-r",
    "title": "Hands-on Exercise 8A",
    "section": "2.3 Importing Attribute Data into R",
    "text": "2.3 Importing Attribute Data into R\nNext, we will import respopagsex2011to2020.csv file into RStudio and save the file into an R dataframe called popagsex.\nThe task will be performed by using read_csv() function of readr package as shown in the code chunk below.\n\npopdata &lt;- read_csv(\"data/aspatial/respopagesextod2011to2020.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08a.html#data-preparation",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08a.html#data-preparation",
    "title": "Hands-on Exercise 8A",
    "section": "2.4 Data Preparation",
    "text": "2.4 Data Preparation\nBefore a thematic map can be prepared, we are required to prepare a data table with year 2020 values. The data table should include the variables PA, SZ, YOUNG, ECONOMY ACTIVE, AGED, TOTAL, DEPENDENCY.\n\nYOUNG: age group 0 to 4 until age groyup 20 to 24,\nECONOMY ACTIVE: age group 25-29 until age group 60-64,\nAGED: age group 65 and above,\nTOTAL: all age group, and\nDEPENDENCY: the ratio between young and aged against economy active group"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08a.html#data-wrangling",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08a.html#data-wrangling",
    "title": "Hands-on Exercise 8A",
    "section": "2.5 Data Wrangling",
    "text": "2.5 Data Wrangling\nThe following data wrangling and transformation functions will be used:\n\npivot_wider() of tidyr package, and\nmutate(), filter(), group_by() and select() of dplyr package\n\n\npopdata2020 &lt;- popdata %&gt;%\n  filter(Time == 2020) %&gt;%\n  group_by(PA, SZ, AG) %&gt;%\n  summarise(`POP` = sum(`Pop`)) %&gt;%\n  ungroup() %&gt;%\n  pivot_wider(names_from=AG, \n              values_from=POP) %&gt;%\n  mutate(YOUNG = rowSums(.[3:6])\n         +rowSums(.[12])) %&gt;%\nmutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+\nrowSums(.[13:15]))%&gt;%\nmutate(`AGED`=rowSums(.[16:21])) %&gt;%\nmutate(`TOTAL`=rowSums(.[3:21])) %&gt;%  \nmutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\n/`ECONOMY ACTIVE`) %&gt;%\n  select(`PA`, `SZ`, `YOUNG`, \n       `ECONOMY ACTIVE`, `AGED`, \n       `TOTAL`, `DEPENDENCY`)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08a.html#joining-the-attribute-data-and-geospatial-data",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08a.html#joining-the-attribute-data-and-geospatial-data",
    "title": "Hands-on Exercise 8A",
    "section": "2.6 Joining the attribute data and geospatial data",
    "text": "2.6 Joining the attribute data and geospatial data\nBefore we can perform the georelational join, one extra step is required to convert the values in PA and SZ fields to uppercase. This is because the values of PA and SZ fields are made up of upper- and lowercase. On the other, hand the SUBZONE_N and PLN_AREA_N are in uppercase.\n\npopdata2020 &lt;- popdata2020 %&gt;%\n  mutate(across(c(PA, SZ), toupper)) %&gt;%\n  filter(`ECONOMY ACTIVE` &gt; 0)\n\nNext, left_join() of dplyr is used to join the geographical data and attribute table using planning subzone name e.g. SUBZONE_N and SZ as the common identifier.\n\nmpsz_pop2020 &lt;- left_join(mpsz, popdata2020,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))\n\nThing to learn from the code chunk above:\n\nleft_join() of dplyr package is used with mpsz simple feature data frame as the left data table is to ensure that the output will be a simple features data frame.\n\n\nwrite_rds(mpsz_pop2020, \"data/rds/mpszpop2020.rds\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08a.html#plotting-a-choropleth-map-quickly-by-using-qtm",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08a.html#plotting-a-choropleth-map-quickly-by-using-qtm",
    "title": "Hands-on Exercise 8A",
    "section": "3.1 Plotting a choropleth map quickly by using qtm()",
    "text": "3.1 Plotting a choropleth map quickly by using qtm()\nThe easiest and quickest to draw a choropleth map using tmap is using qtm(). It is concise and provides a good default visualisation in many cases.\nThe code chunk below will draw a cartographic standard choropleth map as shown below.\n\ntmap_mode(\"plot\")\nqtm(mpsz_pop2020, \n    fill = \"DEPENDENCY\")\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above:\n\ntmap_mode() with “plot” option is used to produce a static map. For interactive mode, “view” option should be used.\nfill argument is used to map the attribute (i.e. DEPENDENCY)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08a.html#creating-a-choropeth-map-by-using-tmaps-elements",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08a.html#creating-a-choropeth-map-by-using-tmaps-elements",
    "title": "Hands-on Exercise 8A",
    "section": "3.2 Creating a choropeth map by using tmap’s elements",
    "text": "3.2 Creating a choropeth map by using tmap’s elements\nDespite its usefulness of drawing a choropleth map quickly and easily, the disadvantge of qtm() is that it makes aesthetics of individual layers harder to control. To draw a high quality cartographic choropleth map as shown in the figure below, tmap’s drawing elements should be used.\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(fill = \"DEPENDENCY\", \n              fill.scale = tm_scale_intervals(\n                style = \"quantile\",\n                n = 5,\n                values = \"brewer.blues\"),\n              fill.legend = tm_legend(\n                title = \"Dependency ratio\")) +\n  tm_title(\"Distribution of Dependency Ratio by planning subzone\") +\n  tm_layout(frame = TRUE) +\n  tm_borders(fill_alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\n\n\n\nIn the following sub-section, we will share with you tmap functions that used to plot these elements."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08a.html#drawing-a-base-map",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08a.html#drawing-a-base-map",
    "title": "Hands-on Exercise 8A",
    "section": "3.3 Drawing a base map",
    "text": "3.3 Drawing a base map\nThe basic building block of tmap is tm_shape() followed by one or more layer elemments such as tm_fill() and tm_polygons().\nIn the code chunk below, tm_shape() is used to define the input data (i.e mpsz_pop2020) and tm_polygons() is used to draw the planning subzone polygons\n\ntm_shape(mpsz_pop2020) +\n  tm_polygons()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08a.html#drawing-a-choropleth-map-using-tm_polygons",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08a.html#drawing-a-choropleth-map-using-tm_polygons",
    "title": "Hands-on Exercise 8A",
    "section": "3.4 Drawing a choropleth map using tm_polygons()",
    "text": "3.4 Drawing a choropleth map using tm_polygons()\nTo draw a choropleth map showing the geographical distribution of a selected variable by planning subzone, we just need to assign the target variable such as Dependency to tm_polygons().\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\")\n\n\n\n\n\n\n\n\nThings to learn from tm_polygons():\n\nThe default interval binning used to draw the choropleth map is called “pretty”. A detailed discussion of the data classification methods supported by tmap will be provided in sub-section 4.3.\nThe default colour scheme used is YlOrRd of ColorBrewer. You will learn more about the color scheme in sub-section 4.4.\nBy default, Missing value will be shaded in grey."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08a.html#drawing-a-choropleth-map-using-tm_fill-and-tm_border",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08a.html#drawing-a-choropleth-map-using-tm_fill-and-tm_border",
    "title": "Hands-on Exercise 8A",
    "section": "3.5 Drawing a choropleth map using tm_fill() and *tm_border()**",
    "text": "3.5 Drawing a choropleth map using tm_fill() and *tm_border()**\nActually, tm_polygons() is a wraper of tm_fill() and tm_border(). tm_fill() shades the polygons by using the default colour scheme and tm_borders() adds the borders of the shapefile onto the choropleth map.\nThe code chunk below draws a choropleth map by using tm_fill() alone.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\")\n\n\n\n\n\n\n\n\nNotice that the planning subzones are shared according to the respective dependecy values\nTo add the boundary of the planning subzones, tm_borders will be used as shown in the code chunk below.\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(fill = \"DEPENDENCY\") +\n  tm_borders(lwd = 0.01,  \n             fill_alpha = 0.1)\n\n\n\n\n\n\n\n\nNotice that light-gray border lines have been added on the choropleth map.\nThe alpha argument is used to define transparency number between 0 (totally transparent) and 1 (not transparent). By default, the alpha value of the col is used (normally 1).\nBeside alpha argument, there are three other arguments for tm_borders(), they are:\n\ncol = border colour,\nlwd = border line width. The default is 1, and\nlty = border line type. The default is “solid”."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08a.html#data-classification-methods-of-tmap",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08a.html#data-classification-methods-of-tmap",
    "title": "Hands-on Exercise 8A",
    "section": "3.6 Data classification methods of tmap",
    "text": "3.6 Data classification methods of tmap\nMost choropleth maps employ some methods of data classification. The point of classification is to take a large number of observations and group them into data ranges or classes.\ntmap provides a total ten data classification methods, namely: fixed, sd, equal, pretty (default), quantile, kmeans, hclust, bclust, fisher, and jenks.\nTo define a data classification method, the style argument of tm_fill() or tm_polygons() will be used."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08a.html#plotting-choropleth-maps-with-built-in-classification-methods",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08a.html#plotting-choropleth-maps-with-built-in-classification-methods",
    "title": "Hands-on Exercise 8A",
    "section": "3.7 Plotting choropleth maps with built-in classification methods",
    "text": "3.7 Plotting choropleth maps with built-in classification methods\nThe code chunk below shows a quantile data classification that used 5 classes.\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\",\n      fill.scale = tm_scale_intervals(\n        style = \"jenks\",\n        n = 5)) +\n  tm_borders(fill_alpha = 0.5)\n\n\n\n\n\n\n\n\nIn the code chunk below, equal data classification method is used.\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\",\n      fill.scale = tm_scale_intervals(\n        style = \"equal\",\n        n = 5)) +\n  tm_borders(fill_alpha = 0.5)\n\n\n\n\n\n\n\n\n\n3.7.1 Different classification methods\n\n\nCode\n## Pretty (default “pretty” breaks)\nmap_pretty &lt;- tm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"pretty\",\n          title = \"Dependency (%)\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(\n    main.title = \"Pretty\",\n    main.title.size = 1,\n    main.title.position = \"center\",\n    legend.position = c(\"right\", \"bottom\"),\n    legend.height = 0.4,\n    legend.width = 0.2,\n    frame = FALSE,\n    bg.color = \"#f5f5f5\"\n  )\n\n## Jenks (Fisher–Jenks optimization)\nmap_jenks &lt;- tm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"jenks\",\n          title = \"Dependency (%)\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(\n    main.title = \"Jenks\",\n    main.title.size = 1,\n    main.title.position = \"center\",\n    legend.position = c(\"right\", \"bottom\"),\n    legend.height = 0.4,\n    legend.width = 0.2,\n    frame = FALSE,\n    bg.color = \"#f5f5f5\"\n  )\n\n## Equal Intervals\nmap_equal &lt;- tm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"equal\",\n          title = \"Dependency (%)\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(\n    main.title = \"Equal Intervals\",\n    main.title.size = 1,\n    main.title.position = \"center\",\n    legend.position = c(\"right\", \"bottom\"),\n    legend.height = 0.4,\n    legend.width = 0.2,\n    frame = FALSE,\n    bg.color = \"#f5f5f5\"\n  )\n\n## Quantile (each class has approximately the same number of features)\nmap_quantile &lt;- tm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"quantile\",\n          title = \"Dependency (%)\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(\n    main.title = \"Quantile\",\n    main.title.size = 1,\n    main.title.position = \"center\",\n    legend.position = c(\"right\", \"bottom\"),\n    legend.height = 0.4,\n    legend.width = 0.2,\n    frame = FALSE,\n    bg.color = \"#f5f5f5\"\n  )\n\n## K-means clustering\nmap_kmeans &lt;- tm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"kmeans\",\n          title = \"Dependency (%)\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(\n    main.title = \"K-means\",\n    main.title.size = 1,\n    main.title.position = \"center\",\n    legend.position = c(\"right\", \"bottom\"),\n    legend.height = 0.4,\n    legend.width = 0.2,\n    frame = FALSE,\n    bg.color = \"#f5f5f5\"\n  )\n\n## Standard Deviation (breaks at mean ± SD)\nmap_sd &lt;- tm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"sd\",\n          title = \"Dependency (%)\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(\n    main.title = \"Standard Deviation\",\n    main.title.size = 1,\n    main.title.position = \"center\",\n    legend.position = c(\"right\", \"bottom\"),\n    legend.height = 0.4,\n    legend.width = 0.2,\n    frame = FALSE,\n    bg.color = \"#f5f5f5\"\n  )\n\n# Arrange all six maps into a 2×3 grid for comparison\ntmap_arrange(\n  map_pretty, map_jenks,\n  map_equal, map_quantile,\n  map_kmeans, map_sd,\n  ncol = 2\n)\n\n\n\n\n\n\n\n\n\n\n\n3.7.1 Different numbers of classes\n\n\nCode\nmap_eq2 &lt;- tm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          n = 2,\n          style = \"equal\",\n          title = \"Dependency (%)\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(\n    main.title = \"Equal Intervals: 2 Classes\",\n    main.title.size = 0.9,\n    main.title.position = \"center\",\n    legend.position = c(\"right\", \"bottom\"),\n    legend.height = 0.3,\n    legend.width = 0.2,\n    frame = FALSE,\n    bg.color = \"#f5f5f5\"\n  )\n\n## Six classes\nmap_eq6 &lt;- tm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"equal\",\n          title = \"Dependency (%)\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(\n    main.title = \"Equal Intervals: 6 Classes\",\n    main.title.size = 0.9,\n    main.title.position = \"center\",\n    legend.position = c(\"right\", \"bottom\"),\n    legend.height = 0.3,\n    legend.width = 0.2,\n    frame = FALSE,\n    bg.color = \"#f5f5f5\"\n  )\n\n## Ten classes\nmap_eq10 &lt;- tm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          n = 10,\n          style = \"equal\",\n          title = \"Dependency (%)\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(\n    main.title = \"Equal Intervals: 10 Classes\",\n    main.title.size = 0.9,\n    main.title.position = \"center\",\n    legend.position = c(\"right\", \"bottom\"),\n    legend.height = 0.3,\n    legend.width = 0.2,\n    frame = FALSE,\n    bg.color = \"#f5f5f5\"\n  )\n\n## Twenty classes\nmap_eq20 &lt;- tm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          n = 20,\n          style = \"equal\",\n          title = \"Dependency (%)\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(\n    main.title = \"Equal Intervals: 20 Classes\",\n    main.title.size = 0.9,\n    main.title.position = \"center\",\n    legend.position = c(\"right\", \"bottom\"),\n    legend.height = 0.3,\n    legend.width = 0.2,\n    frame = FALSE,\n    bg.color = \"#f5f5f5\"\n  )\n\n# Arrange the four maps in a 2×2 grid for side‐by‐side comparison\ntmap_arrange(\n  map_eq2, map_eq6,\n  map_eq10, map_eq20,\n  ncol = 2, nrow = 2\n)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08a.html#plotting-choropeth-map-with-custom-break",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08a.html#plotting-choropeth-map-with-custom-break",
    "title": "Hands-on Exercise 8A",
    "section": "3.8 Plotting Choropeth map with custom break",
    "text": "3.8 Plotting Choropeth map with custom break\nFor all the built-in styles, the category breaks are computed internally. In order to override these defaults, the breakpoints can be set explicitly by means of the breaks argument to the tm_fill(). It is important to note that, in tmap the breaks include a minimum and maximum. As a result, in order to end up with n categories, n+1 elements must be specified in the breaks option (the values must be in increasing order).\nBefore we get started, it is always a good practice to get some descriptive statistics on the variable before setting the break points. Code chunk below will be used to compute and display the descriptive statistics of DEPENDENCY field.\n\nsummary(mpsz_pop2020$DEPENDENCY)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.1111  0.7147  0.7867  0.8585  0.8763 19.0000      92 \n\n\nWith reference to the results above, we set break point at 0.60, 0.70, 0.80, and 0.90. In addition, we also need to include a minimum and maximum, which we set at 0 and 100. Our breaks vector is thus c(0, 0.60, 0.70, 0.80, 0.90, 1.00)\nNow, we will plot the choropleth map by using the code chunk below.\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\",\n          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +\n  tm_borders(fill_alpha = 0.5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08a.html#using-colourbrewer-palette",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08a.html#using-colourbrewer-palette",
    "title": "Hands-on Exercise 8A",
    "section": "4.1 Using ColourBrewer palette",
    "text": "4.1 Using ColourBrewer palette\nTo change the colour, we assign the preferred colour to values argument of tm_scale_intervals() as shown in the code chunk below.\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\",\n      fill.scale = tm_scale_intervals(\n        style = \"quantile\",\n        n = 5,\n        values = \"brewer.greens\")) +\n  tm_borders(fill_alpha = 0.5)\n\n\n\n\n\n\n\n\nNotice that the choropleth map is shaded in green.\nTo reverse the colour shading, add a “-” prefix.\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\",\n      fill.scale = tm_scale_intervals(\n        style = \"quantile\",\n        n = 5,\n        values = \"-brewer.greens\")) +\n  tm_borders(fill_alpha = 0.5)\n\n\n\n\n\n\n\n\nNotice that the colour scheme has been reversed."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08a.html#map-legend",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08a.html#map-legend",
    "title": "Hands-on Exercise 8A",
    "section": "5.1 Map Legend",
    "text": "5.1 Map Legend\nIn tmap, several tm_legend() options are provided to change the placement, format and appearance of the legend.\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\",\n      fill.scale = tm_scale_intervals(\n        style = \"jenks\",\n        n = 5,\n        values = \"brewer.greens\"),\n      fill.legend = tm_legend(\n        title = \"Dependency ratio\")) +\n  tm_borders(fill_alpha = 0.5) +\n  tm_title(\"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08a.html#map-style",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08a.html#map-style",
    "title": "Hands-on Exercise 8A",
    "section": "5.2 Map Style",
    "text": "5.2 Map Style\ntmap allows a wide variety of layout settings to be changed. They can be called by using tmap_style().\nThe code chunk below shows the classic style is used.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"classic\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08a.html#cartographic-furniture",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08a.html#cartographic-furniture",
    "title": "Hands-on Exercise 8A",
    "section": "5.3 Cartographic Furniture",
    "text": "5.3 Cartographic Furniture\nBeside map style, tmap also also provides arguments to draw other map furniture such as compass, scale bar and grid lines.\nIn the code chunk below, tm_compass(), tm_scale_bar() and tm_grid() are used to add compass, scale bar and grid lines onto the choropleth map.\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(fill = \"DEPENDENCY\", \n              fill.scale = tm_scale_intervals(\n                style = \"quantile\",\n                n = 5,\n                values = \"brewer.blues\"),\n              fill.legend = tm_legend(\n                title = \"Dependency ratio\")) +\n  tm_title(\"Distribution of Dependency Ratio by planning subzone\") +\n  tm_layout(frame = TRUE) +\n  tm_borders(fill_alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\n\n\n\n\ntmap_style(\"white\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08a.html#by-assigning-multiple-values-to-at-least-one-of-the-aesthetic-arguments",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08a.html#by-assigning-multiple-values-to-at-least-one-of-the-aesthetic-arguments",
    "title": "Hands-on Exercise 8A",
    "section": "6.1 By assigning multiple values to at least one of the aesthetic arguments",
    "text": "6.1 By assigning multiple values to at least one of the aesthetic arguments\nIn this example, small multiple choropleth maps are created by defining ncols in tm_fill()\n\nmultival &lt;- tm_shape(mpsz_pop2020)+\n  tm_fill(c(\"YOUNG\", \"AGED\"),\n          style = \"equal\", \n          palette = \"Blues\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\"),\n            main.title = c(\"Young vs Aged\"),\n            main.title.size = 0.8,\n            main.title.position = \"center\",\n            frame = FALSE,\n            bg.color = \"#f5f5f5\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"white\") \n\ntmap_arrange(multival, nrow = 1, ncol = 1)\n\n\n\n\n\n\n\n\nIn this example, small multiple choropleth maps are created by assigning multiple values to at least one of the aesthetic arguments\n\nmultival2 &lt;- tm_shape(mpsz_pop2020)+ \n  tm_polygons(c(\"DEPENDENCY\",\"AGED\"),\n          style = c(\"equal\", \"quantile\"), \n          palette = list(\"Blues\",\"Greens\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE,\n            bg.color = \"#f5f5f5\")\n\ntmap_arrange(multival2, nrow = 1,  ncol=1)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08a.html#by-defining-a-group-by-variable-in-tm_facets",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08a.html#by-defining-a-group-by-variable-in-tm_facets",
    "title": "Hands-on Exercise 8A",
    "section": "6.2 By defining a group-by variable in tm_facets()",
    "text": "6.2 By defining a group-by variable in tm_facets()\nIn this example, multiple small choropleth maps are created by using tm_facets().\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          thres.poly = 0) + \n  tm_facets(by=\"REGION_N\", \n            free.coords=TRUE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08a.html#by-creating-multiple-stand-alone-maps-with-tmap_arrange",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08a.html#by-creating-multiple-stand-alone-maps-with-tmap_arrange",
    "title": "Hands-on Exercise 8A",
    "section": "6.3 By creating multiple stand-alone maps with tmap_arrange()",
    "text": "6.3 By creating multiple stand-alone maps with tmap_arrange()\nIn this example, multiple small choropleth maps are created by creating multiple stand-alone maps with tmap_arrange().\n\nyoungmap &lt;- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"YOUNG\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\nagedmap &lt;- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"AGED\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08a.html#mapping-spatial-object-meeting-a-selection-criterion",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08a.html#mapping-spatial-object-meeting-a-selection-criterion",
    "title": "Hands-on Exercise 8A",
    "section": "6.4 Mapping Spatial Object Meeting a Selection Criterion",
    "text": "6.4 Mapping Spatial Object Meeting a Selection Criterion\nInstead of creating small multiple choropleth map, we can also use selection funtion to map spatial objects meeting the selection criterion.\n\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ])+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.45, \n            legend.width = 5.0,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/data/geospatial/MPSZ-2019.html",
    "href": "Hands-on_Ex/Hands-on_Ex08/data/geospatial/MPSZ-2019.html",
    "title": "ISSS608",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08c.html#objectives",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08c.html#objectives",
    "title": "Hands-on Exercise 8C",
    "section": "1.1 Objectives",
    "text": "1.1 Objectives\nIn this in-class exercise, you will gain hands-on experience on using appropriate R methods to plot analytical maps."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08c.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08c.html#learning-outcome",
    "title": "Hands-on Exercise 8C",
    "section": "1.2 Learning outcome",
    "text": "1.2 Learning outcome\nBy the end of this in-class exercise, you will be able to use appropriate functions of tmap and tidyverse to perform the following tasks:\n\nImporting geospatial data in rds format into R environment.\nCreating cartographic quality choropleth maps by using appropriate tmap functions.\nCreating rate map\nCreating percentile map\nCreating boxmap"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08c.html#installing-and-loading-packages",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08c.html#installing-and-loading-packages",
    "title": "Hands-on Exercise 8C",
    "section": "2.1 Installing and loading packages",
    "text": "2.1 Installing and loading packages\n\npacman::p_load(tmap, tidyverse, sf)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08c.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08c.html#importing-data",
    "title": "Hands-on Exercise 8C",
    "section": "2.2 Importing data",
    "text": "2.2 Importing data\nFor the purpose of this hands-on exercise, a prepared data set called NGA_wp.rds will be used. The data set is a polygon feature data.frame providing information on water point of Nigeria at the LGA level. You can find the data set in the rds sub-direct of the hands-on data folder.\n\nNGA_wp &lt;- read_rds(\"data/rds/NGA_wp.rds\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08c.html#visualising-distribution-of-non-functional-water-point",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08c.html#visualising-distribution-of-non-functional-water-point",
    "title": "Hands-on Exercise 8C",
    "section": "3.1 Visualising distribution of non-functional water point",
    "text": "3.1 Visualising distribution of non-functional water point\n\np1 &lt;- tm_shape(NGA_wp) +\n  tm_polygons(fill = \"wp_functional\",\n             fill.scale = tm_scale_intervals(\n               style = \"equal\",\n               n = 10,\n               values = \"brewer.blues\"),\n             fill.legend = tm_legend(\n               position = c(\"right\", \"bottom\"))) +\n  tm_borders(lwd = 0.1,\n             fill_alpha = 1) +\n  tm_title(\"Distribution of functional water point by LGAs\")\n\n\np2 &lt;- tm_shape(NGA_wp) + \n  tm_polygons(fill = \"total_wp\", \n              fill.scale = tm_scale_intervals(\n                style = \"equal\",\n                n = 10,\n                values = \"brewer.blues\"),\n              fill.legend = tm_legend(\n                position = c(\"right\", \"bottom\"))) +\n  tm_borders(lwd = 0.1, \n             fill_alpha = 1) + \n  tm_title(\"Distribution of total  water point by LGAs\")\n\n\ntmap_arrange(p2, p1, nrow = 1)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08c.html#deriving-proportion-of-functional-water-points-and-non-functional-water-points",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08c.html#deriving-proportion-of-functional-water-points-and-non-functional-water-points",
    "title": "Hands-on Exercise 8C",
    "section": "4.1 Deriving Proportion of Functional Water Points and Non-Functional Water Points",
    "text": "4.1 Deriving Proportion of Functional Water Points and Non-Functional Water Points\nWe will tabulate the proportion of functional water points and the proportion of non-functional water points in each LGA. In the following code chunk, mutate() from dplyr package is used to derive two fields, namely pct_functional and pct_nonfunctional.\n\nNGA_wp &lt;- NGA_wp %&gt;%\n  mutate(pct_functional = wp_functional/total_wp) %&gt;%\n  mutate(pct_nonfunctional = wp_nonfunctional/total_wp)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08c.html#plotting-map-of-rate",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08c.html#plotting-map-of-rate",
    "title": "Hands-on Exercise 8C",
    "section": "4.2 Plotting map of rate",
    "text": "4.2 Plotting map of rate\n\ntm_shape(NGA_wp) +\n  tm_polygons(\"pct_functional\",\n              fill.scale = tm_scale_intervals(\n                style = \"equal\",\n                n = 10,\n                values = \"brewer.blues\"),\n              fill.legend = tm_legend(\n                position = c(\"right\", \"bottom\"))) + \n  tm_borders(lwd = 0.1,\n             fill_alpha = 1) +\n  tm_title(\"Rate map of functional water point by LGAs\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08c.html#percentile-map",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08c.html#percentile-map",
    "title": "Hands-on Exercise 8C",
    "section": "5.1 Percentile Map",
    "text": "5.1 Percentile Map\nThe percentile map is a special type of quantile map with six specific categories: 0-1%,1-10%, 10-50%,50-90%,90-99%, and 99-100%. The corresponding breakpoints can be derived by means of the base R quantile command, passing an explicit vector of cumulative probabilities as c(0,.01,.1,.5,.9,.99,1). Note that the begin and endpoint need to be included."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08c.html#data-preparation",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08c.html#data-preparation",
    "title": "Hands-on Exercise 8C",
    "section": "5.2 Data Preparation",
    "text": "5.2 Data Preparation\nExclude records with NA and also create customised classification and extracting values\n\nNGA_wp &lt;- NGA_wp %&gt;%\n  drop_na()\npercent &lt;- c(0,.01,.1,.5,.9,.99,1)\nvar &lt;- NGA_wp[\"pct_functional\"] %&gt;%\n  st_set_geometry(NULL)\nquantile(var[,1], percent)\n\n       0%        1%       10%       50%       90%       99%      100% \n0.0000000 0.0000000 0.2169811 0.4791667 0.8611111 1.0000000 1.0000000 \n\n\n\n\n\n\n\n\nImportant\n\n\n\nWhen variables are extracted from an sf data.frame, the geometry is extracted as well. For mapping and spatial manipulation, this is the expected behavior, but many base R functions cannot deal with the geometry. Specifically, the quantile() gives an error. As a result st_set_geomtry(NULL) is used to drop geomtry field."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08c.html#why-writing-functions",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08c.html#why-writing-functions",
    "title": "Hands-on Exercise 8C",
    "section": "5.3 Why writing functions",
    "text": "5.3 Why writing functions\nWriting a function has three big advantages over using copy-and-paste:\n\nYou can give a function an evocative name that makes your code easier to understand.\nAs requirements change, you only need to update code in one place, instead of many.\nYou eliminate the chance of making incidental mistakes when you copy and paste (i.e. updating a variable name in one place, but not in another).\n\nSource: Chapter 19: Functions of R for Data Science."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08c.html#creating-the-get.var-function",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08c.html#creating-the-get.var-function",
    "title": "Hands-on Exercise 8C",
    "section": "5.4 Creating the get.var function",
    "text": "5.4 Creating the get.var function\nFirstly, we will write an R function as shown below to extract a variable (i.e. wp_nonfunctional) as a vector out of an sf data.frame.\n\narguments:\n\nvname: variable name (as character, in quotes)\ndf: name of sf data frame\n\nreturns:\n\nv: vector with values (without a column name)\n\n\n\nget.var &lt;- function(vname,df) {\n  v &lt;- df[vname] %&gt;% \n    st_set_geometry(NULL)\n  v &lt;- unname(v[,1])\n  return(v)\n}"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08c.html#a-percentile-mapping-function",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08c.html#a-percentile-mapping-function",
    "title": "Hands-on Exercise 8C",
    "section": "5.5 A percentile mapping function",
    "text": "5.5 A percentile mapping function\n\npercentmap &lt;- function(vnam, df, legtitle=NA, mtitle=\"Percentile Map\"){\n  percent &lt;- c(0,.01,.1,.5,.9,.99,1)\n  var &lt;- get.var(vnam, df)\n  bperc &lt;- quantile(var, percent)\n  tm_shape(df) +\n  tm_polygons() +\n  tm_shape(df) +\n     tm_polygons(vnam,\n             title=legtitle,\n             breaks=bperc,\n             palette=\"Blues\",\n          labels=c(\"&lt; 1%\", \"1% - 10%\", \"10% - 50%\", \"50% - 90%\", \"90% - 99%\", \"&gt; 99%\"))  +\n  tm_borders() +\n  tm_layout(main.title = mtitle, \n            title.position = c(\"right\",\"bottom\"))\n}"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08c.html#test-drive-the-percentile-mapping",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08c.html#test-drive-the-percentile-mapping",
    "title": "Hands-on Exercise 8C",
    "section": "5.6 Test drive the percentile mapping",
    "text": "5.6 Test drive the percentile mapping\n\npercentmap(\"total_wp\", NGA_wp)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08c.html#creating-the-boxbreaks-functions",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08c.html#creating-the-boxbreaks-functions",
    "title": "Hands-on Exercise 8C",
    "section": "6.1 Creating the boxbreaks functions",
    "text": "6.1 Creating the boxbreaks functions\nThe code chunk below is an R function that creating break points for a box map.\n\narguments:\n\nv: vector with observations\nmult: multiplier for IQR (default 1.5)\n\nreturns:\n\nbb: vector with 7 break points compute quartile and fences\n\n\n\nboxbreaks &lt;- function(v,mult=1.5) {\n  qv &lt;- unname(quantile(v))\n  iqr &lt;- qv[4] - qv[2]\n  upfence &lt;- qv[4] + mult * iqr\n  lofence &lt;- qv[2] - mult * iqr\n  # initialize break points vector\n  bb &lt;- vector(mode=\"numeric\",length=7)\n  # logic for lower and upper fences\n  if (lofence &lt; qv[1]) {  # no lower outliers\n    bb[1] &lt;- lofence\n    bb[2] &lt;- floor(qv[1])\n  } else {\n    bb[2] &lt;- lofence\n    bb[1] &lt;- qv[1]\n  }\n  if (upfence &gt; qv[5]) { # no upper outliers\n    bb[7] &lt;- upfence\n    bb[6] &lt;- ceiling(qv[5])\n  } else {\n    bb[6] &lt;- upfence\n    bb[7] &lt;- qv[5]\n  }\n  bb[3:5] &lt;- qv[2:4]\n  return(bb)\n}"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08c.html#creating-the-get.var-function-1",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08c.html#creating-the-get.var-function-1",
    "title": "Hands-on Exercise 8C",
    "section": "6.2 Creating the get.var function",
    "text": "6.2 Creating the get.var function\nThe code chunk below is an R function to extract a variable as a vector out of an sf data frame.\n\narguments:\n\nvname: variable name (as character, in quotes)\ndf: name of sf data frame\n\nreturns:\n\nv: vector with values (without a column name)\n\n\n\nget.var &lt;- function(vname,df) {\n  v &lt;- df[vname] %&gt;% st_set_geometry(NULL)\n  v &lt;- unname(v[,1])\n  return(v)\n}"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08c.html#test-drive-the-newly-created-function",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08c.html#test-drive-the-newly-created-function",
    "title": "Hands-on Exercise 8C",
    "section": "6.3 Test drive the newly created function",
    "text": "6.3 Test drive the newly created function\n\nvar &lt;- get.var(\"wp_nonfunctional\", NGA_wp) \nboxbreaks(var)\n\n[1] -56.5   0.0  14.0  34.0  61.0 131.5 278.0"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08c.html#boxmap-function",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08c.html#boxmap-function",
    "title": "Hands-on Exercise 8C",
    "section": "6.4 Boxmap function",
    "text": "6.4 Boxmap function\nThe code chunk below is an R function to create a box map. - arguments: - vnam: variable name (as character, in quotes) - df: simple features polygon layer - legtitle: legend title - mtitle: map title - mult: multiplier for IQR - returns: - a tmap-element (plots a map)\n\nboxmap &lt;- function(vnam, df, \n                   legtitle=NA,\n                   mtitle=\"Box Map\",\n                   mult=1.5){\n  var &lt;- get.var(vnam,df)\n  bb &lt;- boxbreaks(var)\n  tm_shape(df) +\n    tm_polygons() +\n  tm_shape(df) +\n     tm_fill(vnam,title=legtitle,\n             breaks=bb,\n             palette=\"Blues\",\n          labels = c(\"lower outlier\", \n                     \"&lt; 25%\", \n                     \"25% - 50%\", \n                     \"50% - 75%\",\n                     \"&gt; 75%\", \n                     \"upper outlier\"))  +\n  tm_borders() +\n  tm_layout(main.title = mtitle, \n            title.position = c(\"left\",\n                               \"top\"))\n}\ntmap_mode(\"plot\")\nboxmap(\"wp_nonfunctional\", NGA_wp)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html",
    "title": "Take Home Exercise 3",
    "section": "",
    "text": "Take-home Exercise 3: Prototype"
  }
]